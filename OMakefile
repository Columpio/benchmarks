VERSION = 0.2

all: all-benchmarks
	tar vczf tip-benchmarks-$(VERSION).tar.gz LICENSE benchmarks/**/*.smt2
	tar vczf tip-benchmarks-$(VERSION)-why3.tar.gz LICENSE benchmarks-why3/**/*.mlw
	tar vczf tip-benchmarks-$(VERSION)-cvc4.tar.gz LICENSE benchmarks-cvc4/**/*.smt2

commentify = $(file Commentify)
Commentify: Commentify.hs
	ghc --make -O $@

tip-tools = $(file $(which tip-ghc)) $(file $(which tip))

clean:
	rm -r benchmarks benchmarks-why3 benchmarks-cvc4

find-props(prop, file) =
	props[] =
	lex-search($(file))
	case $"^$(prop)[^ ]*"
		props[] += $0
		export
	return $(set $(props))

options=
create(prop_base, orig_dir, dest_dir, source, target_base) =
	source=$(file original/$(orig_dir)/$(source))

	foreach(prop => ..., $(find-props $(prop_base), $(source)))
		name=$(dest_dir)/$(target_base)_$(removeprefix $(prop_base), $(prop))
		tip=$(file benchmarks/$(name).smt2)
		smt2=$(file benchmarks-cvc4/$(name).smt2)
		why3=$(file benchmarks-why3/$(name).mlw)

		all-benchmarks: $(tip) $(smt2) $(why3)
		only-benchmarks: $(tip)

		mkdir(-p $(dirname $(tip)))
		.SUBDIRS: $(dirname $(source))
			$(tip): $(source) $(commentify) $(tip-tools)
				($(commentify) $< "$(prop)" "; " "; " ""; tip-ghc $< -k "$(prop)" | tip $(options) | tip --simplify-gently --csematch) > $@

		mkdir(-p $(dirname $(smt2)))
		$(smt2): $(tip) $(tip-tools)
			($(commentify) $< "$(prop)" "; " "; " ""; tip $< --smtlib) > $@

		mkdir(-p $(dirname $(why3)))
		$(why3): $(tip) $(tip-tools)
			($(commentify) $< "$(prop)" "(* " " * " " *)"; tip $< --why) > $@

		check: $(why3)
			why3 prove $< > /dev/null || true

section
	options=--int-to-nat --simplify-gently --commute-match --simplify-gently
	create(prop_,  tip2015,    tip2015,    Nat.hs,                  nat)
	create(prop_,  tip2015,    tip2015,    WeirdNat.hs,             weird_nat)
	create(prop_,  tip2015,    tip2015,    Fermat.hs,               fermat)

	create(prop_,  tip2015,    tip2015,    Mod.hs,                  mod)

	create(prop_,  tip2015,    tip2015,    ModRotate.hs,            rotate)
	create(prop_,  tip2015,    tip2015,    SnocRotate.hs,           rotate)
	create(prop_,  tip2015,    tip2015,    SelfRotate.hs,           rotate)

	create(prop_,  tip2015,    tip2015,    Integers.hs,             int)
	create(prop_,  tip2015,    tip2015,    BinLists.hs,             bin_nat)
	create(prop_,  koen,       tip2015,    List.hs,                 list_nat)
	create(prop_,  koen,       tip2015,    Sort.hs,                 sort_nat)

create(prop_,  tip2015,    tip2015,    Escape.hs,               escape)

create(prop_,  tip2015,    tip2015,    BinLists.hs,             bin)
create(prop_,  tip2015,    tip2015,    Nicomachus.hs,           nicomachus)
create(prop_,  tip2015,    tip2015,    RegExp.hs,               regexp)
create(prop_,  tip2015,    tip2015,    ListMonad.hs,            list)
create(prop_,  tip2015,    tip2015,    RelaxedPrefix.hs,        relaxedprefix)
create(prop_,  tip2015,    tip2015,    Seq.hs,                  polyrec_seq)

create(prop_T, prod,       prod,       Properties.hs,           prop)
create(prop_,  isaplanner, isaplanner, Properties.hs,           prop)

create(prop_,  grammars,   grammars,   SimpleExpr1.hs,          simp_expr)
create(prop_,  grammars,   grammars,   SimpleExpr2.hs,          simp_expr)
create(prop_,  grammars,   grammars,   SimpleExpr3.hs,          simp_expr)
create(prop_,  grammars,   grammars,   SimpleExpr4.hs,          simp_expr)
create(prop_,  grammars,   grammars,   SimpleExpr5.hs,          simp_expr)
create(prop_,  grammars,   grammars,   Packrat.hs,              packrat)

create(prop_,  koen,       tip2015,    List.hs,                 list)
create(prop_,  koen,       tip2015,    McCarthy91.hs,           mccarthy91)
create(prop_,  koen,       tip2015,    Propositional.hs,        propositional)
create(prop_,  koen,       tip2015,    Sort.hs,                 sort)
create(prop_,  koen,       tip2015,    Subst.hs,                subst)
create(prop_,  koen,       tip2015,    Tree.hs,                 tree)

create(prop_,  false,      false,      CFG5.hs,                 cfg5)
create(prop_,  false,      false,      Definitions.hs,          productive_use_of_failure)
create(prop_,  false,      false,      Deriv.hs,                derivative)
create(prop_,  false,      false,      EditDistance.hs,         edit_distance)
create(prop_,  false,      false,      Expr.hs,                 expr)
create(prop_,  false,      false,      Graph.hs,                graph)
create(prop_,  false,      false,      HotelKey_ReachAsDatatype.hs, hotel_key)
create(prop_,  false,      false,      Imp.hs,                  imperative)
create(prop_,  false,      false,      Kaleidoscope.hs,         kaleidoscope)
create(prop_,  false,      false,      Mergesort.hs,            mergesort)
create(prop_,  false,      false,      Nat.hs,                  nat)
create(prop_,  false,      false,      Palin.hs,                palindrome)
create(prop_,  false,      false,      Parse.hs,                parse)
create(prop_,  false,      false,      Queue1.hs,               queue1)
create(prop_,  false,      false,      Queue2.hs,               queue2)
create(prop_,  false,      false,      Queue3.hs,               queue3)
create(prop_,  false,      false,      Rec.hs,                  rec)
create(prop_,  false,      false,      RegExpDeluxe.hs,         regexp_deluxe)
create(prop_,  false,      false,      RegExp.hs,               regexp)
create(prop_,  false,      false,      Scale.hs,                scale)
create(prop_,  false,      false,      ShowBinLists.hs,         show_bin_lists)
create(prop_,  false,      false,      Sudoku.hs,               sudoku)
create(prop_,  false,      false,      Turing.hs,               turing)
create(prop_,  false,      false,      Type.hs,                 type)
create(prop_,  false,      false,      Untyped.hs,              untyped)
