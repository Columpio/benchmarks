VERSION = 0.1

all: all-benchmarks
	tar vczf tip-benchmarks-$(VERSION).tar.gz benchmarks/**/*.smt2
	tar vczf tip-benchmarks-$(VERSION)-why3.tar.gz benchmarks-why3/**/*.mlw
	tar vczf tip-benchmarks-$(VERSION)-cvc4.tar.gz benchmarks-cvc4/**/*.smt2

commentify = $(file Commentify)
Commentify: Commentify.hs
	ghc --make -O $@

tip-tools = $(file $(which tip-ghc)) $(file $(which tip-parser))

clean:
	rm -r benchmarks benchmarks-why3 benchmarks-cvc4

find-props(prop, file) =
	props[] =
	lex-search($(file))
	case "$(prop)[^ ]*"
		props[] += $0
		export
	return $(set $(props))

create(prop_base, kind, source, target_base) =
	source=$(file original/$(kind)/$(source))

	foreach(prop => ..., $(find-props $(prop_base), $(source)))
		name=$(kind)/$(target_base)_$(removeprefix $(prop_base), $(prop))
		tip=$(file benchmarks/$(name).smt2)
		smt2=$(file benchmarks-cvc4/$(name).smt2)
		why3=$(file benchmarks-why3/$(name).mlw)

		all-benchmarks: $(tip) $(smt2) $(why3)
		only-benchmarks: $(tip)

		mkdir(-p $(dirname $(tip)))
		.SUBDIRS: $(dirname $(source))
			$(tip): $(source) $(commentify) $(tip-tools)
				($(commentify) $< "$(prop)" "; " "; " ""; tip-ghc $< "$(prop)") > $@

		mkdir(-p $(dirname $(smt2)))
		$(smt2): $(tip) $(tip-tools)
			($(commentify) $< "$(prop)" "; " "; " ""; tip-parser $< --smtlib) > $@

		mkdir(-p $(dirname $(why3)))
		$(why3): $(tip) $(tip-tools)
			($(commentify) $< "$(prop)" "(* " " * " " *)"; tip-parser $< --why) > $@

		check: $(why3)
			why3 prove $< > /dev/null || true

create(prop_,  tip2015,    Nat.hs,                  nat)
create(prop_,  tip2015,    WeirdNat.hs,             weird_nat)
create(prop_,  tip2015,    Fermat.hs,               fermat)

create(prop_,  tip2015,    ModRotate.hs,            rotate)
create(prop_,  tip2015,    StructuralModRotate.hs,  rotate)
create(prop_,  tip2015,    SnocRotate.hs,           rotate)
create(prop_,  tip2015,    Rotate.hs,               rotate)

create(prop_,  tip2015,    Escape.hs,               escape)
create(prop_,  tip2015,    Sort_TreeSort.hs,        tree_sort)
create(prop_,  tip2015,    Sort_HeapSort.hs,        heap)

create(prop_,  tip2015,    Integers.hs,             int)
create(prop_,  tip2015,    BinLists.hs,             bin)
create(prop_,  tip2015,    Nicomachus.hs,           nicomachus)
create(prop_,  tip2015,    RegExp.hs,               regexp)
create(prop_,  tip2015,    ListMonad.hs,            list)
create(prop_,  tip2015,    RelaxedPrefix.hs,        relaxedprefix)
create(prop_,  tip2015,    Seq.hs,                  polyrec_seq)

create(prop_T, prod,       Properties.hs,           prop)
create(prop_,  isaplanner, Properties.hs,           prop)

create(prop_,  grammars,   SimpleExpr1.hs,          simp_expr)
create(prop_,  grammars,   SimpleExpr2.hs,          simp_expr)
create(prop_,  grammars,   SimpleExpr3.hs,          simp_expr)
create(prop_,  grammars,   SimpleExpr4.hs,          simp_expr)
create(prop_,  grammars,   SimpleExpr5.hs,          simp_expr)
create(prop_,  grammars,   Packrat.hs,              packrat)

create(prop_,  koen,       List.hs,                 list)
create(prop_,  koen,       McCarthy91.hs,           mccarthy91)
create(prop_,  koen,       Propositional.hs,        propositional)
create(prop_,  koen,       Sort.hs,                 sort)
create(prop_,  koen,       Subst.hs,                subst)
create(prop_,  koen,       Tree.hs,                 tree)
