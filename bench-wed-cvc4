_feat_
["Done.","benchmarks-feat/sat","60","_feat"]
_lazysc_
["-","benchmarks-lazysc/sat","60","_lazysc"]
hbmc_-q_
["-","benchmarks/sat","60","hbmc","-q"]
hbmc_-q_--memo=False_
["-","benchmarks/sat","60","hbmc","-q","--memo=False"]
hbmc_-q_--merge=False_
["-","benchmarks/sat","60","hbmc","-q","--merge=False"]
hbmc_-q_--merge=False_--memo=False_
["-","benchmarks/sat","60","hbmc","-q","--merge=False","--memo=False"]
cvc4-2015-08-18-x86_64-linux-opt_--fmf-fun_--dump-models_
["unknown","benchmarks-sk/sat","60","cvc4-2015-08-18-x86_64-linux-opt","--fmf-fun","--dump-models"]
bsort_inj_len_both_n02.smt2
60.00200s, ExitFailure 124

benchmarks-sk/sat/bsort_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/bsort_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/bsort_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/bsort_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

bsort_inj_n02.smt2
60.00193s, ExitFailure 124

benchmarks-sk/sat/bsort_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/bsort_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/bsort_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/bsort_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

bsort_nub_len_both_n02.smt2
60.00186s, ExitFailure 124

benchmarks-sk/sat/bsort_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/bsort_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/bsort_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/bsort_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

bsort_nub_n02.smt2
60.00238s, ExitFailure 124

benchmarks-sk/sat/bsort_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/bsort_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/bsort_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/bsort_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

bsort_unq_len_both_n02.smt2
60.00208s, ExitFailure 124

benchmarks-sk/sat/bsort_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/bsort_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/bsort_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/bsort_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

bsort_unq_n02.smt2
60.00191s, ExitFailure 124

benchmarks-sk/sat/bsort_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/bsort_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/bsort_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/bsort_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

bubsort_inj_len_both_n02.smt2
0.16364s, ExitSuccess
unknown
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first Bool) (second list)))
))
(define-fun xs () list (cons (S (S (S (S Z)))) (cons Z nil)))
(define-fun ys () list (cons Z (cons Z nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons (S (S (S (S Z)))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons Z (cons Z nil))) (S (S Z)) Z))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun bubble ((BOUND_VARIABLE_439 list)) Pair (Pair2 (= (|first'| (ite (= BOUND_VARIABLE_439 (cons Z (cons Z nil))) (|Pair2'| (_ bv1 1) (cons Z (cons Z nil))) (ite (= BOUND_VARIABLE_439 (cons Z (cons Z (cons (S Z) (cons Z nil))))) (|Pair2'| (_ bv1 1) (cons Z (cons (S (S Z)) nil))) (ite (= BOUND_VARIABLE_439 (cons Z nil)) (|Pair2'| (_ bv1 1) (cons Z nil)) (ite (= BOUND_VARIABLE_439 (cons Z (cons (S Z) (cons Z nil)))) (|Pair2'| (_ bv1 1) (cons (S (S Z)) nil)) (ite (= BOUND_VARIABLE_439 (cons (S (S (S (S Z)))) (cons Z nil))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S Z)))) (cons Z nil))) (|Pair2'| (_ bv0 1) nil))))))) (_ bv1 1)) (|second'| (ite (= BOUND_VARIABLE_439 (cons Z (cons Z nil))) (|Pair2'| (_ bv1 1) (cons Z (cons Z nil))) (ite (= BOUND_VARIABLE_439 (cons Z (cons Z (cons (S Z) (cons Z nil))))) (|Pair2'| (_ bv1 1) (cons Z (cons (S (S Z)) nil))) (ite (= BOUND_VARIABLE_439 (cons Z nil)) (|Pair2'| (_ bv1 1) (cons Z nil)) (ite (= BOUND_VARIABLE_439 (cons Z (cons (S Z) (cons Z nil)))) (|Pair2'| (_ bv1 1) (cons (S (S Z)) nil)) (ite (= BOUND_VARIABLE_439 (cons (S (S (S (S Z)))) (cons Z nil))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S Z)))) (cons Z nil))) (|Pair2'| (_ bv0 1) nil)))))))))
(define-fun bubsort (($x1 list)) list (ite (= $x1 (cons Z (cons Z nil))) (cons Z (cons Z (cons (S Z) (cons Z nil)))) (ite (= $x1 (cons (S (S (S (S Z)))) (cons Z nil))) (cons Z (cons Z (cons (S Z) (cons Z nil)))) nil)))
(declare-datatypes () ((|Pair'| (|Pair2'| (|first'| (_ BitVec 1)) (|second'| list)))
))
; cardinality of I_length is 4
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; cardinality of I_le is 1
(declare-sort I_le 0)
; rep: @uc_I_le_0
; cardinality of I_bubsort is 2
(declare-sort I_bubsort 0)
; rep: @uc_I_bubsort_0
; rep: @uc_I_bubsort_1
)

benchmarks-sk/sat/bubsort_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/bubsort_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/bubsort_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/bubsort_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

bubsort_inj_n02.smt2
0.05685s, ExitSuccess
unknown
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first Bool) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S Z)))))) nil)))
(define-fun ys () list (cons Z (cons Z (cons Z (cons Z (cons Z nil))))))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S Z)))))) nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S Z)))))) nil))) (S (S Z)) Z)))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun bubble ((BOUND_VARIABLE_436 list)) Pair (Pair2 (= (|first'| (ite (= BOUND_VARIABLE_436 (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))) (|Pair2'| (_ bv1 1) (cons Z (cons (S (S (S (S (S (S Z)))))) nil))) (ite (= BOUND_VARIABLE_436 (cons Z (cons (S (S (S (S (S (S Z)))))) nil))) (|Pair2'| (_ bv1 1) (cons Z (cons (S (S (S (S (S (S Z)))))) nil))) (ite (= BOUND_VARIABLE_436 (cons Z (cons Z (cons (S (S Z)) nil)))) (|Pair2'| (_ bv1 1) (cons Z (cons Z (cons (S Z) nil)))) (ite (= BOUND_VARIABLE_436 (cons Z (cons (S (S Z)) nil))) (|Pair2'| (_ bv1 1) (cons Z (cons (S Z) nil))) (ite (= BOUND_VARIABLE_436 (cons Z (cons Z (cons Z (cons Z nil))))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S (S (S Z)))))) nil)) (|Pair2'| (_ bv0 1) nil))))))) (_ bv1 1)) (|second'| (ite (= BOUND_VARIABLE_436 (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))) (|Pair2'| (_ bv1 1) (cons Z (cons (S (S (S (S (S (S Z)))))) nil))) (ite (= BOUND_VARIABLE_436 (cons Z (cons (S (S (S (S (S (S Z)))))) nil))) (|Pair2'| (_ bv1 1) (cons Z (cons (S (S (S (S (S (S Z)))))) nil))) (ite (= BOUND_VARIABLE_436 (cons Z (cons Z (cons (S (S Z)) nil)))) (|Pair2'| (_ bv1 1) (cons Z (cons Z (cons (S Z) nil)))) (ite (= BOUND_VARIABLE_436 (cons Z (cons (S (S Z)) nil))) (|Pair2'| (_ bv1 1) (cons Z (cons (S Z) nil))) (ite (= BOUND_VARIABLE_436 (cons Z (cons Z (cons Z (cons Z nil))))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S (S (S Z)))))) nil)) (|Pair2'| (_ bv0 1) nil)))))))))
(define-fun bubsort (($x1 list)) list (ite (= $x1 (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))) (cons (S Z) nil) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S Z)))))) nil))) (cons (S Z) nil) (cons Z (cons Z (cons Z (cons Z (cons Z nil))))))))
(declare-datatypes () ((|Pair'| (|Pair2'| (|first'| (_ BitVec 1)) (|second'| list)))
))
; cardinality of I_length is 3
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; cardinality of I_le is 1
(declare-sort I_le 0)
; rep: @uc_I_le_0
; cardinality of I_bubsort is 2
(declare-sort I_bubsort 0)
; rep: @uc_I_bubsort_0
; rep: @uc_I_bubsort_1
)

benchmarks-sk/sat/bubsort_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/bubsort_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/bubsort_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/bubsort_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

bubsort_nub_len_both_n02.smt2
0.15285s, ExitSuccess
unknown
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first Bool) (second list)))
))
(define-fun xs () list (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil)))
(define-fun ys () list (cons Z (cons Z nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons Z (cons Z nil))) (S (S Z)) Z))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (= $x2 Z))))
(define-fun deleteAll (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (= $x2 (cons Z nil))) (cons Z nil) nil))
(define-fun nub (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil)) (ite (= $x1 (cons Z nil)) (cons Z nil) nil)))
(define-fun bubble ((BOUND_VARIABLE_528 list)) Pair (Pair2 (= (|first'| (ite (= BOUND_VARIABLE_528 (cons Z (cons Z nil))) (|Pair2'| (_ bv1 1) (cons Z (cons Z nil))) (ite (= BOUND_VARIABLE_528 (cons Z (cons Z (cons (S Z) (cons Z nil))))) (|Pair2'| (_ bv1 1) (cons Z (cons (S (S Z)) nil))) (ite (= BOUND_VARIABLE_528 (cons Z nil)) (|Pair2'| (_ bv1 1) (cons Z nil)) (ite (= BOUND_VARIABLE_528 (cons Z (cons (S Z) (cons Z nil)))) (|Pair2'| (_ bv1 1) (cons (S (S Z)) nil)) (ite (= BOUND_VARIABLE_528 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (|Pair2'| (_ bv0 1) nil))))))) (_ bv1 1)) (|second'| (ite (= BOUND_VARIABLE_528 (cons Z (cons Z nil))) (|Pair2'| (_ bv1 1) (cons Z (cons Z nil))) (ite (= BOUND_VARIABLE_528 (cons Z (cons Z (cons (S Z) (cons Z nil))))) (|Pair2'| (_ bv1 1) (cons Z (cons (S (S Z)) nil))) (ite (= BOUND_VARIABLE_528 (cons Z nil)) (|Pair2'| (_ bv1 1) (cons Z nil)) (ite (= BOUND_VARIABLE_528 (cons Z (cons (S Z) (cons Z nil)))) (|Pair2'| (_ bv1 1) (cons (S (S Z)) nil)) (ite (= BOUND_VARIABLE_528 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (|Pair2'| (_ bv0 1) nil)))))))))
(define-fun bubsort (($x1 list)) list (ite (= $x1 (cons Z (cons Z nil))) (cons Z (cons Z (cons (S Z) (cons Z nil)))) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (cons Z (cons Z (cons (S Z) (cons Z nil)))) nil)))
(declare-datatypes () ((|Pair'| (|Pair2'| (|first'| (_ BitVec 1)) (|second'| list)))
))
; cardinality of I_length is 4
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; cardinality of I_le is 1
(declare-sort I_le 0)
; rep: @uc_I_le_0
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_deleteAll is 3
(declare-sort I_deleteAll 0)
; rep: @uc_I_deleteAll_0
; rep: @uc_I_deleteAll_1
; rep: @uc_I_deleteAll_2
; cardinality of I_nub is 3
(declare-sort I_nub 0)
; rep: @uc_I_nub_0
; rep: @uc_I_nub_1
; rep: @uc_I_nub_2
; cardinality of I_bubsort is 2
(declare-sort I_bubsort 0)
; rep: @uc_I_bubsort_0
; rep: @uc_I_bubsort_1
)

benchmarks-sk/sat/bubsort_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/bubsort_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/bubsort_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/bubsort_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

bubsort_nub_n02.smt2
0.14204s, ExitSuccess
unknown
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first Bool) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)))
(define-fun ys () list (cons Z (cons Z (cons Z (cons Z (cons Z nil))))))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (S (S Z)) Z)))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S Z)))))))))))))
(define-fun deleteAll (($x1 Nat) ($x2 list)) list (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil) nil))
(define-fun nub (($x1 list)) list (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil) nil)))
(define-fun bubble ((BOUND_VARIABLE_525 list)) Pair (Pair2 (= (|first'| (ite (= BOUND_VARIABLE_525 (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))) (|Pair2'| (_ bv1 1) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (ite (= BOUND_VARIABLE_525 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (|Pair2'| (_ bv1 1) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (ite (= BOUND_VARIABLE_525 (cons Z (cons Z (cons (S (S Z)) nil)))) (|Pair2'| (_ bv1 1) (cons Z (cons Z (cons (S Z) nil)))) (ite (= BOUND_VARIABLE_525 (cons Z (cons (S (S Z)) nil))) (|Pair2'| (_ bv1 1) (cons Z (cons (S Z) nil))) (ite (= BOUND_VARIABLE_525 (cons Z (cons Z (cons Z (cons Z nil))))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (|Pair2'| (_ bv0 1) nil))))))) (_ bv1 1)) (|second'| (ite (= BOUND_VARIABLE_525 (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))) (|Pair2'| (_ bv1 1) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (ite (= BOUND_VARIABLE_525 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (|Pair2'| (_ bv1 1) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (ite (= BOUND_VARIABLE_525 (cons Z (cons Z (cons (S (S Z)) nil)))) (|Pair2'| (_ bv1 1) (cons Z (cons Z (cons (S Z) nil)))) (ite (= BOUND_VARIABLE_525 (cons Z (cons (S (S Z)) nil))) (|Pair2'| (_ bv1 1) (cons Z (cons (S Z) nil))) (ite (= BOUND_VARIABLE_525 (cons Z (cons Z (cons Z (cons Z nil))))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (|Pair2'| (_ bv0 1) nil)))))))))
(define-fun bubsort (($x1 list)) list (ite (= $x1 (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))) (cons (S Z) nil) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (cons (S Z) nil) (cons Z (cons Z (cons Z (cons Z (cons Z nil))))))))
(declare-datatypes () ((|Pair'| (|Pair2'| (|first'| (_ BitVec 1)) (|second'| list)))
))
; cardinality of I_length is 3
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; cardinality of I_le is 1
(declare-sort I_le 0)
; rep: @uc_I_le_0
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_deleteAll is 3
(declare-sort I_deleteAll 0)
; rep: @uc_I_deleteAll_0
; rep: @uc_I_deleteAll_1
; rep: @uc_I_deleteAll_2
; cardinality of I_nub is 3
(declare-sort I_nub 0)
; rep: @uc_I_nub_0
; rep: @uc_I_nub_1
; rep: @uc_I_nub_2
; cardinality of I_bubsort is 2
(declare-sort I_bubsort 0)
; rep: @uc_I_bubsort_0
; rep: @uc_I_bubsort_1
)

benchmarks-sk/sat/bubsort_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/bubsort_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/bubsort_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/bubsort_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

bubsort_unq_len_both_n02.smt2
0.07385s, ExitSuccess
unknown
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first Bool) (second list)))
))
(define-fun xs () list (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil)))
(define-fun ys () list (cons (S (S (S (S (S (S Z)))))) (cons Z nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S Z)))))) (cons Z nil))) (S (S Z)) Z))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (= $x2 Z))))
(define-fun elem (($x1 Nat) ($x2 list)) Bool false)
(define-fun unique (($x1 list)) Bool true)
(define-fun bubble ((BOUND_VARIABLE_529 list)) Pair (Pair2 (= (|first'| (ite (= BOUND_VARIABLE_529 (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))) (|Pair2'| (_ bv1 1) (cons Z (cons (S Z) (cons Z nil)))) (ite (= BOUND_VARIABLE_529 (cons (S (S (S (S (S (S Z)))))) (cons Z nil))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (ite (= BOUND_VARIABLE_529 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (ite (= BOUND_VARIABLE_529 (cons Z (cons Z (cons Z (cons Z nil))))) (|Pair2'| (_ bv1 1) (cons (S Z) (cons Z nil))) (|Pair2'| (_ bv0 1) nil)))))) (_ bv1 1)) (|second'| (ite (= BOUND_VARIABLE_529 (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))) (|Pair2'| (_ bv1 1) (cons Z (cons (S Z) (cons Z nil)))) (ite (= BOUND_VARIABLE_529 (cons (S (S (S (S (S (S Z)))))) (cons Z nil))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (ite (= BOUND_VARIABLE_529 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (ite (= BOUND_VARIABLE_529 (cons Z (cons Z (cons Z (cons Z nil))))) (|Pair2'| (_ bv1 1) (cons (S Z) (cons Z nil))) (|Pair2'| (_ bv0 1) nil))))))))
(define-fun bubsort (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S Z)))))) (cons Z nil))) (cons Z (cons Z (cons Z (cons Z (cons Z nil))))) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (cons Z (cons Z (cons Z (cons Z (cons Z nil))))) nil)))
(declare-datatypes () ((|Pair'| (|Pair2'| (|first'| (_ BitVec 1)) (|second'| list)))
))
; cardinality of I_length is 4
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; cardinality of I_le is 1
(declare-sort I_le 0)
; rep: @uc_I_le_0
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
; cardinality of I_bubsort is 2
(declare-sort I_bubsort 0)
; rep: @uc_I_bubsort_0
; rep: @uc_I_bubsort_1
)

benchmarks-sk/sat/bubsort_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/bubsort_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/bubsort_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/bubsort_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

bubsort_unq_n02.smt2
0.06565s, ExitSuccess
unknown
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first Bool) (second list)))
))
(define-fun xs () list (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil)))
(define-fun ys () list (cons Z (cons Z (cons (S Z) (cons Z nil)))))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil))) (S (S Z)) Z)))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S Z))))))))))) (= $x2 Z))))
(define-fun elem (($x1 Nat) ($x2 list)) Bool false)
(define-fun unique (($x1 list)) Bool true)
(define-fun bubble ((BOUND_VARIABLE_526 list)) Pair (Pair2 (= (|first'| (ite (= BOUND_VARIABLE_526 (cons Z (cons Z (cons (S Z) (cons Z nil))))) (|Pair2'| (_ bv1 1) (cons Z (cons Z (cons (S Z) (cons Z nil))))) (ite (= BOUND_VARIABLE_526 (cons Z (cons (S Z) (cons Z nil)))) (|Pair2'| (_ bv1 1) (cons Z (cons (S Z) (cons Z nil)))) (ite (= BOUND_VARIABLE_526 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil))) (|Pair2'| (_ bv0 1) nil))))) (_ bv1 1)) (|second'| (ite (= BOUND_VARIABLE_526 (cons Z (cons Z (cons (S Z) (cons Z nil))))) (|Pair2'| (_ bv1 1) (cons Z (cons Z (cons (S Z) (cons Z nil))))) (ite (= BOUND_VARIABLE_526 (cons Z (cons (S Z) (cons Z nil)))) (|Pair2'| (_ bv1 1) (cons Z (cons (S Z) (cons Z nil)))) (ite (= BOUND_VARIABLE_526 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil))) (|Pair2'| (_ bv1 1) (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil))) (|Pair2'| (_ bv0 1) nil)))))))
(define-fun bubsort (($x1 list)) list (ite (= $x1 (cons Z (cons Z (cons (S Z) (cons Z nil))))) (cons Z (cons Z (cons Z nil))) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil))) (cons Z (cons Z (cons Z nil))) nil)))
(declare-datatypes () ((|Pair'| (|Pair2'| (|first'| (_ BitVec 1)) (|second'| list)))
))
; cardinality of I_length is 3
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; cardinality of I_le is 1
(declare-sort I_le 0)
; rep: @uc_I_le_0
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
; cardinality of I_bubsort is 2
(declare-sort I_bubsort 0)
; rep: @uc_I_bubsort_0
; rep: @uc_I_bubsort_1
)

benchmarks-sk/sat/bubsort_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/bubsort_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/bubsort_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/bubsort_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

calc_not_assoc.smt2
60.00195s, ExitFailure 124

benchmarks-sk/sat/calc_not_assoc.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/calc_not_assoc.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/calc_not_assoc.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/calc_not_assoc.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

calc_not_comm.smt2
60.00275s, ExitFailure 124

benchmarks-sk/sat/calc_not_comm.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/calc_not_comm.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/calc_not_comm.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/calc_not_comm.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

calc_polynomial_a.smt2
60.00137s, ExitFailure 124

benchmarks-sk/sat/calc_polynomial_a.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/calc_polynomial_a.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/calc_polynomial_a.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/calc_polynomial_a.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

calc_polynomial_b.smt2
60.00195s, ExitFailure 124

benchmarks-sk/sat/calc_polynomial_b.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/calc_polynomial_b.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/calc_polynomial_b.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/calc_polynomial_b.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

calc_polynomial_c.smt2
60.00184s, ExitFailure 124

benchmarks-sk/sat/calc_polynomial_c.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/calc_polynomial_c.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/calc_polynomial_c.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/calc_polynomial_c.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

calc_polynomial_d.smt2
60.00198s, ExitFailure 124

benchmarks-sk/sat/calc_polynomial_d.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/calc_polynomial_d.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/calc_polynomial_d.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/calc_polynomial_d.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

calc_polynomial_e.smt2
60.00213s, ExitFailure 124

benchmarks-sk/sat/calc_polynomial_e.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/calc_polynomial_e.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/calc_polynomial_e.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/calc_polynomial_e.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

calc_polynomial_f.smt2
60.00156s, ExitFailure 124

benchmarks-sk/sat/calc_polynomial_f.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/calc_polynomial_f.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/calc_polynomial_f.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/calc_polynomial_f.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

eomsorttd_inj_len_both_n02.smt2
52.88650s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun xs () list (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil)))
(define-fun ys () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (S Z) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S Z)) (cons Z (cons Z nil)))) (S (S (S (S (S (S Z)))))) Z))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S Z))))))))))) (= $x2 Z))))
(define-fun lmerge (($x1 list) ($x2 list)) list (ite (and (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (= $x2 (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (ite (and (= $x1 (cons Z nil)) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (ite (and (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (= $x2 nil)) (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil) (ite (and (= $x1 nil) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil) (ite (and (= $x1 (cons Z nil)) (= $x2 nil)) (cons (S (S Z)) (cons Z nil)) nil))))))
(define-fun evens (($x1 list)) list (ite (= $x1 (cons Z nil)) (cons Z nil) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil))) (cons Z nil) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil))) (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil) nil)))))
(define-fun odds (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons (S (S Z)) (cons Z (cons Z nil)))))) (cons (S Z) (cons Z nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil))) (cons Z nil) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil) (ite (= $x1 (cons (S (S Z)) (cons Z (cons Z nil)))) (cons (S Z) (cons Z (cons Z nil))) nil)))))
(define-fun eomsorttd (($x1 list)) list (ite (= $x1 (cons Z nil)) (cons Z nil) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil) nil)))))
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_lmerge is 4
(declare-sort I_lmerge 0)
; rep: @uc_I_lmerge_0
; rep: @uc_I_lmerge_1
; rep: @uc_I_lmerge_2
; rep: @uc_I_lmerge_3
; cardinality of I_evens is 5
(declare-sort I_evens 0)
; rep: @uc_I_evens_0
; rep: @uc_I_evens_1
; rep: @uc_I_evens_2
; rep: @uc_I_evens_3
; rep: @uc_I_evens_4
; cardinality of I_odds is 5
(declare-sort I_odds 0)
; rep: @uc_I_odds_0
; rep: @uc_I_odds_1
; rep: @uc_I_odds_2
; rep: @uc_I_odds_3
; rep: @uc_I_odds_4
; cardinality of I_eomsorttd is 4
(declare-sort I_eomsorttd 0)
; rep: @uc_I_eomsorttd_0
; rep: @uc_I_eomsorttd_1
; rep: @uc_I_eomsorttd_2
; rep: @uc_I_eomsorttd_3
)

benchmarks-sk/sat/eomsorttd_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/eomsorttd_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/eomsorttd_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/eomsorttd_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

eomsorttd_inj_len_both_n03.smt2
60.00180s, ExitFailure 124

benchmarks-sk/sat/eomsorttd_inj_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/eomsorttd_inj_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/eomsorttd_inj_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/eomsorttd_inj_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

eomsorttd_inj_n02.smt2
60.00179s, ExitFailure 124

benchmarks-sk/sat/eomsorttd_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/eomsorttd_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/eomsorttd_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/eomsorttd_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

eomsorttd_nub_len_both_n02.smt2
60.00170s, ExitFailure 124

benchmarks-sk/sat/eomsorttd_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/eomsorttd_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/eomsorttd_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/eomsorttd_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

eomsorttd_nub_n02.smt2
60.00182s, ExitFailure 124

benchmarks-sk/sat/eomsorttd_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/eomsorttd_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/eomsorttd_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/eomsorttd_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

eomsorttd_unq_len_both_n02.smt2
60.00194s, ExitFailure 124

benchmarks-sk/sat/eomsorttd_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/eomsorttd_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/eomsorttd_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/eomsorttd_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

eomsorttd_unq_n02.smt2
60.00246s, ExitFailure 124

benchmarks-sk/sat/eomsorttd_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/eomsorttd_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/eomsorttd_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/eomsorttd_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

hsort_inj_len_both_n02.smt2
58.93185s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Heap (Node (Node_0 Heap) (Node_1 Nat) (Node_2 Heap)) (Nil))
))
(declare-datatypes () ((list2 (nil2) (cons2 (head2 Heap) (tail2 list2)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S Z))))))))) (cons Z nil)))
(define-fun toHeap2 (($x1 list)) list2 (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (cons2 (Node Nil Z Nil) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) nil2)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) (cons Z nil))) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (cons2 (Node Nil Z Nil) nil2)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) nil2) (ite (= $x1 (cons Z nil)) (cons2 (Node Nil Z Nil) nil2) nil2)))))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons (S Z) (cons Z nil))) (S (S (S (S Z)))) Z))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 Z))))
(define-fun hmerge (($x1 Heap) ($x2 Heap)) Heap (ite (and (= $x1 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil)) (= $x2 (Node Nil Z Nil))) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) (ite (and (= $x1 (Node Nil Z Nil)) (= $x2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil))) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) (ite (and (= $x1 (Node Nil (S (S (S Z))) Nil)) (= $x2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil))) (Node Nil (S Z) Nil) (ite (and (= $x1 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil)) (= $x2 Nil)) (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (ite (and (= $x1 Nil) (= $x2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil))) (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (ite (and (= $x1 (Node Nil Z Nil)) (= $x2 Nil)) (Node (Node Nil Z (Node Nil Z Nil)) Z Nil) (ite (and (= $x1 Nil) (= $x2 (Node Nil Z Nil))) (Node Nil (S (S Z)) (Node Nil Z Nil)) (ite (and (= $x1 (Node (Node (Node Nil Z (Node Nil Z Nil)) Z (Node Nil Z (Node Nil Z Nil))) (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (Node Nil (S (S (S Z))) Nil))) (= $x2 Nil)) (Node Nil Z (Node Nil Z (Node Nil Z Nil))) Nil)))))))))
(define-fun hpairwise (($x1 list2)) list2 (ite (= $x1 (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (cons2 (Node Nil Z Nil) nil2))) (cons2 (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) nil2) (ite (= $x1 (cons2 (Node Nil Z Nil) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) nil2))) (cons2 (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) nil2) nil2)))
(define-fun hmerging (($x1 list2)) Heap (ite (= $x1 (cons2 (Node Nil Z Nil) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) nil2))) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) (ite (= $x1 (cons2 (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) nil2)) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) (ite (= $x1 (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (cons2 (Node Nil Z Nil) nil2))) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) Nil))))
(define-fun toList (($x1 Heap)) list (ite (= $x1 (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil)) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (ite (= $x1 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil)) (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil) nil)))
; cardinality of I_toHeap2 is 5
(declare-sort I_toHeap2 0)
; rep: @uc_I_toHeap2_0
; rep: @uc_I_toHeap2_1
; rep: @uc_I_toHeap2_2
; rep: @uc_I_toHeap2_3
; rep: @uc_I_toHeap2_4
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_hmerge is 5
(declare-sort I_hmerge 0)
; rep: @uc_I_hmerge_0
; rep: @uc_I_hmerge_1
; rep: @uc_I_hmerge_2
; rep: @uc_I_hmerge_3
; rep: @uc_I_hmerge_4
; cardinality of I_hpairwise is 3
(declare-sort I_hpairwise 0)
; rep: @uc_I_hpairwise_0
; rep: @uc_I_hpairwise_1
; rep: @uc_I_hpairwise_2
; cardinality of I_hmerging is 3
(declare-sort I_hmerging 0)
; rep: @uc_I_hmerging_0
; rep: @uc_I_hmerging_1
; rep: @uc_I_hmerging_2
; cardinality of I_toList is 3
(declare-sort I_toList 0)
; rep: @uc_I_toList_0
; rep: @uc_I_toList_1
; rep: @uc_I_toList_2
)

benchmarks-sk/sat/hsort_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/hsort_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/hsort_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/hsort_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

hsort_inj_len_both_n03.smt2
60.00356s, ExitFailure 124

benchmarks-sk/sat/hsort_inj_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/hsort_inj_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/hsort_inj_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/hsort_inj_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

hsort_inj_n02.smt2
60.00255s, ExitFailure 124

benchmarks-sk/sat/hsort_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/hsort_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/hsort_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/hsort_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

hsort_nub_len_both_n02.smt2
8.51998s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Heap (Node (Node_0 Heap) (Node_1 Nat) (Node_2 Heap)) (Nil))
))
(declare-datatypes () ((list2 (nil2) (cons2 (head2 Heap) (tail2 list2)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S Z))))))))) (cons Z nil)))
(define-fun toHeap2 (($x1 list)) list2 (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (cons2 (Node Nil Z Nil) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) nil2)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) (cons Z nil))) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (cons2 (Node Nil Z Nil) nil2)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) nil2) (ite (= $x1 (cons Z nil)) (cons2 (Node Nil Z Nil) nil2) nil2)))))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) (cons Z nil))) (S (S Z)) Z)))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 Z))))
(define-fun hmerge (($x1 Heap) ($x2 Heap)) Heap (ite (and (= $x1 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil)) (= $x2 (Node Nil Z Nil))) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) (ite (and (= $x1 (Node Nil Z Nil)) (= $x2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil))) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) (ite (and (= $x1 (Node (Node Nil Z (Node Nil Z Nil)) Z (Node Nil Z (Node Nil Z Nil)))) (= $x2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil))) (Node Nil (S Z) Nil) (ite (and (= $x1 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil)) (= $x2 Nil)) (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (ite (and (= $x1 Nil) (= $x2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil))) (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (ite (and (= $x1 (Node Nil Z Nil)) (= $x2 Nil)) (Node Nil (S (S Z)) Nil) (ite (and (= $x1 Nil) (= $x2 (Node Nil Z Nil))) (Node (Node Nil Z (Node Nil Z Nil)) (S Z) Nil) (ite (and (= $x1 (Node (Node (Node Nil Z Nil) Z (Node (Node Nil Z Nil) Z Nil)) (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (Node (Node Nil Z (Node Nil Z Nil)) Z (Node Nil Z (Node Nil Z Nil))))) (= $x2 Nil)) (Node Nil Z (Node Nil Z (Node Nil Z Nil))) Nil)))))))))
(define-fun hpairwise (($x1 list2)) list2 (ite (= $x1 (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (cons2 (Node Nil Z Nil) nil2))) (cons2 (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) nil2) (ite (= $x1 (cons2 (Node Nil Z Nil) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) nil2))) (cons2 (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) nil2) nil2)))
(define-fun hmerging (($x1 list2)) Heap (ite (= $x1 (cons2 (Node Nil Z Nil) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) nil2))) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) (ite (= $x1 (cons2 (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) nil2)) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) (ite (= $x1 (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (cons2 (Node Nil Z Nil) nil2))) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) Nil))))
(define-fun toList (($x1 Heap)) list (ite (= $x1 (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil)) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (ite (= $x1 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil)) (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil) nil)))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S Z)))))))))))))
(define-fun deleteAll (($x1 Nat) ($x2 list)) list (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil) nil))
(define-fun nub (($x1 list)) list (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil) nil)))
; cardinality of I_toHeap2 is 5
(declare-sort I_toHeap2 0)
; rep: @uc_I_toHeap2_0
; rep: @uc_I_toHeap2_1
; rep: @uc_I_toHeap2_2
; rep: @uc_I_toHeap2_3
; rep: @uc_I_toHeap2_4
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_hmerge is 5
(declare-sort I_hmerge 0)
; rep: @uc_I_hmerge_0
; rep: @uc_I_hmerge_1
; rep: @uc_I_hmerge_2
; rep: @uc_I_hmerge_3
; rep: @uc_I_hmerge_4
; cardinality of I_hpairwise is 3
(declare-sort I_hpairwise 0)
; rep: @uc_I_hpairwise_0
; rep: @uc_I_hpairwise_1
; rep: @uc_I_hpairwise_2
; cardinality of I_hmerging is 3
(declare-sort I_hmerging 0)
; rep: @uc_I_hmerging_0
; rep: @uc_I_hmerging_1
; rep: @uc_I_hmerging_2
; cardinality of I_toList is 3
(declare-sort I_toList 0)
; rep: @uc_I_toList_0
; rep: @uc_I_toList_1
; rep: @uc_I_toList_2
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_deleteAll is 3
(declare-sort I_deleteAll 0)
; rep: @uc_I_deleteAll_0
; rep: @uc_I_deleteAll_1
; rep: @uc_I_deleteAll_2
; cardinality of I_nub is 3
(declare-sort I_nub 0)
; rep: @uc_I_nub_0
; rep: @uc_I_nub_1
; rep: @uc_I_nub_2
)

benchmarks-sk/sat/hsort_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/hsort_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/hsort_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/hsort_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

hsort_nub_len_both_n03.smt2
60.00206s, ExitFailure 124

benchmarks-sk/sat/hsort_nub_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/hsort_nub_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/hsort_nub_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/hsort_nub_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

hsort_nub_n02.smt2
60.00236s, ExitFailure 124

benchmarks-sk/sat/hsort_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/hsort_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/hsort_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/hsort_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

hsort_unq_len_both_n02.smt2
56.86854s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Heap (Node (Node_0 Heap) (Node_1 Nat) (Node_2 Heap)) (Nil))
))
(declare-datatypes () ((list2 (nil2) (cons2 (head2 Heap) (tail2 list2)))
))
(define-fun xs () list (cons (S (S (S (S (S (S (S (S (S Z))))))))) (cons Z nil)))
(define-fun ys () list (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)))
(define-fun toHeap2 (($x1 list)) list2 (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) (cons Z nil))) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (cons2 (Node Nil Z Nil) nil2)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (cons2 (Node Nil Z Nil) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) nil2)) (ite (= $x1 (cons Z nil)) (cons2 (Node Nil Z Nil) nil2) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) nil2) (ite (= $x1 (cons (S Z) (cons Z nil))) (cons2 Nil (cons2 Nil nil2)) nil2))))))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (S Z) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S Z) (cons Z nil))) (S (S (S (S (S (S Z)))))) Z))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 Z))))
(define-fun hmerge (($x1 Heap) ($x2 Heap)) Heap (ite (and (= $x1 (Node Nil Z Nil)) (= $x2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil))) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) (ite (and (= $x1 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil)) (= $x2 (Node Nil Z Nil))) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) (ite (and (= $x1 (Node (Node Nil Z Nil) (S (S Z)) Nil)) (= $x2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil))) (Node Nil (S Z) Nil) (ite (and (= $x1 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil)) (= $x2 Nil)) (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (ite (and (= $x1 Nil) (= $x2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil))) (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (ite (and (= $x1 (Node (Node Nil (S (S Z)) (Node Nil Z Nil)) (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (Node (Node Nil Z Nil) (S (S Z)) Nil))) (= $x2 Nil)) (Node Nil Z (Node Nil Z (Node Nil Z Nil))) (ite (and (= $x1 (Node Nil Z Nil)) (= $x2 Nil)) (Node (Node Nil Z Nil) (S Z) (Node Nil Z Nil)) (ite (and (= $x1 Nil) (= $x2 (Node Nil Z Nil))) (Node (Node Nil Z Nil) Z (Node Nil Z Nil)) Nil)))))))))
(define-fun hpairwise (($x1 list2)) list2 (ite (= $x1 (cons2 (Node Nil Z Nil) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) nil2))) (cons2 (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) nil2) (ite (= $x1 (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (cons2 (Node Nil Z Nil) nil2))) (cons2 (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) nil2) nil2)))
(define-fun hmerging (($x1 list2)) Heap (ite (= $x1 (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) (cons2 (Node Nil Z Nil) nil2))) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) (ite (= $x1 (cons2 (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) nil2)) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) (ite (= $x1 (cons2 (Node Nil Z Nil) (cons2 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) nil2))) (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil) Nil))))
(define-fun toList (($x1 Heap)) list (ite (= $x1 (Node (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil) Z Nil)) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (ite (= $x1 (Node Nil (S (S (S (S (S (S (S (S (S Z))))))))) Nil)) (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil) nil)))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 Z))))
(define-fun elem (($x1 Nat) ($x2 list)) Bool false)
(define-fun unique (($x1 list)) Bool true)
; cardinality of I_toHeap2 is 5
(declare-sort I_toHeap2 0)
; rep: @uc_I_toHeap2_0
; rep: @uc_I_toHeap2_1
; rep: @uc_I_toHeap2_2
; rep: @uc_I_toHeap2_3
; rep: @uc_I_toHeap2_4
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_hmerge is 5
(declare-sort I_hmerge 0)
; rep: @uc_I_hmerge_0
; rep: @uc_I_hmerge_1
; rep: @uc_I_hmerge_2
; rep: @uc_I_hmerge_3
; rep: @uc_I_hmerge_4
; cardinality of I_hpairwise is 3
(declare-sort I_hpairwise 0)
; rep: @uc_I_hpairwise_0
; rep: @uc_I_hpairwise_1
; rep: @uc_I_hpairwise_2
; cardinality of I_hmerging is 3
(declare-sort I_hmerging 0)
; rep: @uc_I_hmerging_0
; rep: @uc_I_hmerging_1
; rep: @uc_I_hmerging_2
; cardinality of I_toList is 3
(declare-sort I_toList 0)
; rep: @uc_I_toList_0
; rep: @uc_I_toList_1
; rep: @uc_I_toList_2
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
)

benchmarks-sk/sat/hsort_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/hsort_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/hsort_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/hsort_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

hsort_unq_len_both_n03.smt2
60.00172s, ExitFailure 124

benchmarks-sk/sat/hsort_unq_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/hsort_unq_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/hsort_unq_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/hsort_unq_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

hsort_unq_n02.smt2
60.00217s, ExitFailure 124

benchmarks-sk/sat/hsort_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/hsort_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/hsort_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/hsort_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_inj_len_both_n02.smt2
0.41977s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S Z))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S Z))))))) (cons Z nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S Z))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S Z))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S Z))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons (S Z) (cons Z nil))) (S (S (S (S (S (S (S (S Z)))))))) Z))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S Z)))))))) (= $x2 Z))))
(define-fun insert2 (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S Z)))))))) (= $x2 (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S Z))))))) nil)) (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S Z))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S Z))))))) nil)) (ite (and (= $x1 (S (S (S (S (S (S (S Z)))))))) (= $x2 nil)) (cons (S (S (S (S (S (S (S Z))))))) nil) (cons Z nil)))))
(define-fun isort (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S Z))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S Z))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S Z))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S Z))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S Z))))))) nil)) (cons (S (S (S (S (S (S (S Z))))))) nil) (ite (= $x1 (cons Z nil)) (cons Z nil) nil)))))
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_insert2 is 4
(declare-sort I_insert2 0)
; rep: @uc_I_insert2_0
; rep: @uc_I_insert2_1
; rep: @uc_I_insert2_2
; rep: @uc_I_insert2_3
; cardinality of I_isort is 5
(declare-sort I_isort 0)
; rep: @uc_I_isort_0
; rep: @uc_I_isort_1
; rep: @uc_I_isort_2
; rep: @uc_I_isort_3
; rep: @uc_I_isort_4
)

benchmarks-sk/sat/isort_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_inj_len_both_n03.smt2
16.37202s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil))))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z (cons Z nil))))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons Z (cons Z nil))) (S (S Z)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil)))) (S (S (S Z))) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z (cons Z nil)))) (S (S (S Z))) (ite (= $x1 (cons (S (S (S Z))) nil)) (S (S (S (S (S (S (S (S (S (S Z)))))))))) Z)))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) (= $x2 Z))))
(define-fun insert2 (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) (= $x2 (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) (= $x2 (cons Z (cons Z nil)))) (cons Z (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) (ite (and (= $x1 Z) (= $x2 (cons Z nil))) (cons Z (cons Z nil)) (ite (and (= $x1 Z) (= $x2 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)))) (cons Z (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) (= $x2 nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil) (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) (cons (S Z) (cons Z nil)) (cons Z nil))))))))
(define-fun isort (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) (ite (= $x1 (cons Z nil)) (cons Z nil) (ite (= $x1 (cons Z (cons Z nil))) (cons Z (cons Z nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z (cons Z nil)))) (cons Z (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil)))) (cons Z (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) nil))))))
; cardinality of I_length is 6
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; rep: @uc_I_length_5
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_insert2 is 6
(declare-sort I_insert2 0)
; rep: @uc_I_insert2_0
; rep: @uc_I_insert2_1
; rep: @uc_I_insert2_2
; rep: @uc_I_insert2_3
; rep: @uc_I_insert2_4
; rep: @uc_I_insert2_5
; cardinality of I_isort is 6
(declare-sort I_isort 0)
; rep: @uc_I_isort_0
; rep: @uc_I_isort_1
; rep: @uc_I_isort_2
; rep: @uc_I_isort_3
; rep: @uc_I_isort_4
; rep: @uc_I_isort_5
)

benchmarks-sk/sat/isort_inj_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_inj_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_inj_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_inj_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_inj_len_both_n04.smt2
60.00258s, ExitFailure 124

benchmarks-sk/sat/isort_inj_len_both_n04.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_inj_len_both_n04.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_inj_len_both_n04.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_inj_len_both_n04.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_inj_n02.smt2
18.76366s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons Z nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons Z (cons (S Z) nil))) (S (S (S (S (S (S (S Z))))))) Z))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 Z))))
(define-fun insert2 (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil) (ite (and (= $x1 Z) (= $x2 (cons Z (cons (S Z) nil)))) (cons (S (S Z)) nil) (cons Z nil))))))
(define-fun isort (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil) (ite (= $x1 (cons Z nil)) (cons Z nil) nil)))))
; cardinality of I_length is 3
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_insert2 is 4
(declare-sort I_insert2 0)
; rep: @uc_I_insert2_0
; rep: @uc_I_insert2_1
; rep: @uc_I_insert2_2
; rep: @uc_I_insert2_3
; cardinality of I_isort is 5
(declare-sort I_isort 0)
; rep: @uc_I_isort_0
; rep: @uc_I_isort_1
; rep: @uc_I_isort_2
; rep: @uc_I_isort_3
; rep: @uc_I_isort_4
)

benchmarks-sk/sat/isort_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_inj_n03.smt2
60.00211s, ExitFailure 124

benchmarks-sk/sat/isort_inj_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_inj_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_inj_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_inj_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_nub_len_both_n02.smt2
0.87710s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil))) (S (S Z)) Z)))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S Z))))))))))) (= $x2 Z))))
(define-fun insert2 (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S Z))))))))))) (= $x2 (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S Z))))))))))) (= $x2 nil)) (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil) (cons Z nil)))))
(define-fun isort (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil) (ite (= $x1 (cons Z nil)) (cons Z nil) nil)))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S Z))))))))))))))
(define-fun deleteAll (($x1 Nat) ($x2 list)) list (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil) nil))
(define-fun nub (($x1 list)) list (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil) nil)))
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_insert2 is 4
(declare-sort I_insert2 0)
; rep: @uc_I_insert2_0
; rep: @uc_I_insert2_1
; rep: @uc_I_insert2_2
; rep: @uc_I_insert2_3
; cardinality of I_isort is 5
(declare-sort I_isort 0)
; rep: @uc_I_isort_0
; rep: @uc_I_isort_1
; rep: @uc_I_isort_2
; rep: @uc_I_isort_3
; rep: @uc_I_isort_4
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_deleteAll is 3
(declare-sort I_deleteAll 0)
; rep: @uc_I_deleteAll_0
; rep: @uc_I_deleteAll_1
; rep: @uc_I_deleteAll_2
; cardinality of I_nub is 3
(declare-sort I_nub 0)
; rep: @uc_I_nub_0
; rep: @uc_I_nub_1
; rep: @uc_I_nub_2
)

benchmarks-sk/sat/isort_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_nub_len_both_n03.smt2
60.00216s, ExitFailure 124

benchmarks-sk/sat/isort_nub_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_nub_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_nub_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_nub_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_nub_n02.smt2
10.64801s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil))) (S (S Z)) Z)))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (= $x2 Z))))
(define-fun insert2 (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (= $x2 (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (= $x2 nil)) (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil) (cons Z nil)))))
(define-fun isort (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil) (ite (= $x1 (cons Z nil)) (cons Z nil) nil)))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))
(define-fun deleteAll (($x1 Nat) ($x2 list)) list (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil) nil))
(define-fun nub (($x1 list)) list (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil) nil)))
; cardinality of I_length is 3
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_insert2 is 4
(declare-sort I_insert2 0)
; rep: @uc_I_insert2_0
; rep: @uc_I_insert2_1
; rep: @uc_I_insert2_2
; rep: @uc_I_insert2_3
; cardinality of I_isort is 5
(declare-sort I_isort 0)
; rep: @uc_I_isort_0
; rep: @uc_I_isort_1
; rep: @uc_I_isort_2
; rep: @uc_I_isort_3
; rep: @uc_I_isort_4
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_deleteAll is 3
(declare-sort I_deleteAll 0)
; rep: @uc_I_deleteAll_0
; rep: @uc_I_deleteAll_1
; rep: @uc_I_deleteAll_2
; cardinality of I_nub is 3
(declare-sort I_nub 0)
; rep: @uc_I_nub_0
; rep: @uc_I_nub_1
; rep: @uc_I_nub_2
)

benchmarks-sk/sat/isort_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_nub_n03.smt2
60.00369s, ExitFailure 124

benchmarks-sk/sat/isort_nub_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_nub_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_nub_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_nub_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_unq_len_both_n02.smt2
0.60461s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S Z))))))))) (cons Z nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons (S Z) (cons Z nil))) (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) Z))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 Z))))
(define-fun insert2 (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 nil)) (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil) nil))))
(define-fun isort (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S Z))))))))) nil) (ite (= $x1 (cons Z nil)) (cons Z nil) nil)))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S Z)))))))))))))
(define-fun elem (($x1 Nat) ($x2 list)) Bool false)
(define-fun unique (($x1 list)) Bool true)
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_insert2 is 4
(declare-sort I_insert2 0)
; rep: @uc_I_insert2_0
; rep: @uc_I_insert2_1
; rep: @uc_I_insert2_2
; rep: @uc_I_insert2_3
; cardinality of I_isort is 5
(declare-sort I_isort 0)
; rep: @uc_I_isort_0
; rep: @uc_I_isort_1
; rep: @uc_I_isort_2
; rep: @uc_I_isort_3
; rep: @uc_I_isort_4
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
)

benchmarks-sk/sat/isort_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_unq_len_both_n03.smt2
60.00234s, ExitFailure 124

benchmarks-sk/sat/isort_unq_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_unq_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_unq_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_unq_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_unq_n02.smt2
13.74935s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons Z nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons Z (cons (S Z) nil))) (S (S (S (S (S (S (S (S Z)))))))) Z))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 Z))))
(define-fun insert2 (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil) (ite (and (= $x1 Z) (= $x2 (cons Z (cons (S Z) nil)))) (cons (S (S Z)) nil) (cons Z nil))))))
(define-fun isort (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil) (ite (= $x1 (cons Z nil)) (cons Z nil) nil)))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))
(define-fun elem (($x1 Nat) ($x2 list)) Bool false)
(define-fun unique (($x1 list)) Bool true)
; cardinality of I_length is 3
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_insert2 is 4
(declare-sort I_insert2 0)
; rep: @uc_I_insert2_0
; rep: @uc_I_insert2_1
; rep: @uc_I_insert2_2
; rep: @uc_I_insert2_3
; cardinality of I_isort is 5
(declare-sort I_isort 0)
; rep: @uc_I_isort_0
; rep: @uc_I_isort_1
; rep: @uc_I_isort_2
; rep: @uc_I_isort_3
; rep: @uc_I_isort_4
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
)

benchmarks-sk/sat/isort_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

isort_unq_n03.smt2
60.00431s, ExitFailure 124

benchmarks-sk/sat/isort_unq_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/isort_unq_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/isort_unq_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/isort_unq_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

kaleidoscope_ambiguity.smt2
60.00156s, ExitFailure 124

benchmarks-sk/sat/kaleidoscope_ambiguity.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/kaleidoscope_ambiguity.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/kaleidoscope_ambiguity.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/kaleidoscope_ambiguity.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

kaleidoscope_parse.smt2
60.00169s, ExitFailure 124

benchmarks-sk/sat/kaleidoscope_parse.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/kaleidoscope_parse.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/kaleidoscope_parse.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/kaleidoscope_parse.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

kaleidoscope_two_parses.smt2
60.00198s, ExitFailure 124

benchmarks-sk/sat/kaleidoscope_two_parses.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/kaleidoscope_two_parses.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/kaleidoscope_two_parses.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/kaleidoscope_two_parses.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu2_inj_len_both_n02.smt2
60.00231s, ExitFailure 124

benchmarks-sk/sat/msortbu2_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu2_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu2_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu2_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu2_inj_n02.smt2
60.00176s, ExitFailure 124

benchmarks-sk/sat/msortbu2_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu2_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu2_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu2_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu2_nub_len_both_n02.smt2
54.58121s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list2 (nil2) (cons2 (head2 Nat) (tail2 list2)))
))
(declare-datatypes () ((list (nil) (cons (head list2) (tail list)))
))
(define-fun xs () list2 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)))
(define-fun ys () list2 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) (cons2 Z nil2)))
(define-fun length (($x1 list2)) Nat (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (S Z) (ite (= $x1 (cons2 Z nil2)) (S Z) (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2))) (S (S Z)) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) (cons2 Z nil2))) (S (S Z)) Z)))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 Z))))
(define-fun lmerge (($x1 list2) ($x2 list2)) list2 (ite (and (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (= $x2 (cons2 Z nil2))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (ite (and (= $x1 (cons2 (S (S Z)) (cons2 Z nil2))) (= $x2 (cons2 (S (S Z)) (cons2 Z nil2)))) (cons2 Z (cons2 (S Z) nil2)) (ite (and (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (= $x2 nil2)) (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) nil2))))
(define-fun pairwise (($x1 list)) list (ite (= $x1 (cons (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) (cons (cons2 Z nil2) nil))) (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) nil) nil))
(define-fun mergingbu2 (($x1 list)) list2 (ite (= $x1 (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) nil)) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (ite (= $x1 (cons (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) (cons (cons2 Z nil2) nil))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) nil2)))
(define-fun risers (($x1 list2)) list (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) (cons2 Z nil2))) (cons (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) (cons (cons2 Z nil2) nil)) (ite (= $x1 (cons2 Z nil2)) (cons (cons2 Z nil2) nil) (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2))) (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) nil) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (cons (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) nil) nil)))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S Z)))))))))))))
(define-fun deleteAll (($x1 Nat) ($x2 list2)) list2 (ite (and (= $x1 Z) (= $x2 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2))) (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) nil2))
(define-fun nub (($x1 list2)) list2 (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) nil2)))
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_lmerge is 2
(declare-sort I_lmerge 0)
; rep: @uc_I_lmerge_0
; rep: @uc_I_lmerge_1
; cardinality of I_pairwise is 2
(declare-sort I_pairwise 0)
; rep: @uc_I_pairwise_0
; rep: @uc_I_pairwise_1
; cardinality of I_mergingbu2 is 2
(declare-sort I_mergingbu2 0)
; rep: @uc_I_mergingbu2_0
; rep: @uc_I_mergingbu2_1
; cardinality of I_risers is 4
(declare-sort I_risers 0)
; rep: @uc_I_risers_0
; rep: @uc_I_risers_1
; rep: @uc_I_risers_2
; rep: @uc_I_risers_3
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_deleteAll is 3
(declare-sort I_deleteAll 0)
; rep: @uc_I_deleteAll_0
; rep: @uc_I_deleteAll_1
; rep: @uc_I_deleteAll_2
; cardinality of I_nub is 3
(declare-sort I_nub 0)
; rep: @uc_I_nub_0
; rep: @uc_I_nub_1
; rep: @uc_I_nub_2
)

benchmarks-sk/sat/msortbu2_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu2_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu2_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu2_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu2_nub_len_both_n03.smt2
60.00218s, ExitFailure 124

benchmarks-sk/sat/msortbu2_nub_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu2_nub_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu2_nub_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu2_nub_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu2_nub_n02.smt2
60.00141s, ExitFailure 124

benchmarks-sk/sat/msortbu2_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu2_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu2_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu2_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu2_unq_len_both_n02.smt2
6.01269s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list2 (nil2) (cons2 (head2 Nat) (tail2 list2)))
))
(declare-datatypes () ((list (nil) (cons (head list2) (tail list)))
))
(define-fun xs () list2 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2)))
(define-fun ys () list2 (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons2 Z nil2)))
(define-fun length (($x1 list2)) Nat (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2)) (S Z) (ite (= $x1 (cons2 Z nil2)) (S Z) (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2))) (S (S Z)) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons2 Z nil2))) (S (S Z)) Z)))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S Z))))))))))) (= $x2 Z))))
(define-fun lmerge (($x1 list2) ($x2 list2)) list2 (ite (and (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2)) (= $x2 (cons2 Z nil2))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2)) (ite (and (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2)) (= $x2 nil2)) (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2) (ite (and (= $x1 nil2) (= $x2 (cons2 Z nil2))) (cons2 (S (S Z)) nil2) nil2))))
(define-fun pairwise (($x1 list)) list (ite (= $x1 (cons (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2) (cons (cons2 Z nil2) nil))) (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2)) nil) nil))
(define-fun mergingbu2 (($x1 list)) list2 (ite (= $x1 (cons (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2) (cons (cons2 Z nil2) nil))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2)) (ite (= $x1 (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2)) nil)) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2)) nil2)))
(define-fun risers (($x1 list2)) list (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2))) (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2)) nil) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) (cons2 Z nil2))) (cons (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2) (cons (cons2 Z nil2) nil)) (ite (= $x1 (cons2 Z nil2)) (cons (cons2 Z nil2) nil) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2)) (cons (cons2 (S (S (S (S (S (S (S (S (S (S Z)))))))))) nil2) nil) nil)))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S Z))))))))))))))
(define-fun elem (($x1 Nat) ($x2 list2)) Bool false)
(define-fun unique (($x1 list2)) Bool true)
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_lmerge is 2
(declare-sort I_lmerge 0)
; rep: @uc_I_lmerge_0
; rep: @uc_I_lmerge_1
; cardinality of I_pairwise is 2
(declare-sort I_pairwise 0)
; rep: @uc_I_pairwise_0
; rep: @uc_I_pairwise_1
; cardinality of I_mergingbu2 is 2
(declare-sort I_mergingbu2 0)
; rep: @uc_I_mergingbu2_0
; rep: @uc_I_mergingbu2_1
; cardinality of I_risers is 4
(declare-sort I_risers 0)
; rep: @uc_I_risers_0
; rep: @uc_I_risers_1
; rep: @uc_I_risers_2
; rep: @uc_I_risers_3
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
)

benchmarks-sk/sat/msortbu2_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu2_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu2_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu2_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu2_unq_len_both_n03.smt2
60.00207s, ExitFailure 124

benchmarks-sk/sat/msortbu2_unq_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu2_unq_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu2_unq_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu2_unq_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu2_unq_n02.smt2
47.07553s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list2 (nil2) (cons2 (head2 Nat) (tail2 list2)))
))
(declare-datatypes () ((list (nil) (cons (head list2) (tail list)))
))
(define-fun xs () list2 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons2 Z nil2)))
(define-fun ys () list2 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)))
(define-fun length (($x1 list2)) Nat (ite (= $x1 (cons2 Z nil2)) (S Z) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons2 Z nil2))) (S (S Z)) (ite (= $x1 (cons2 Z (cons2 Z (cons2 Z (cons2 Z nil2))))) (S (S (S (S (S (S (S (S Z)))))))) Z))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 Z))))
(define-fun lmerge (($x1 list2) ($x2 list2)) list2 (ite (and (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (= $x2 (cons2 Z nil2))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (ite (and (= $x1 (cons2 (S (S (S Z))) nil2)) (= $x2 (cons2 (S (S (S Z))) nil2))) (cons2 (S Z) (cons2 Z (cons2 Z nil2))) (ite (and (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (= $x2 nil2)) (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) nil2))))
(define-fun pairwise (($x1 list)) list (ite (= $x1 (cons (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) (cons (cons2 Z nil2) nil))) (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) nil) nil))
(define-fun mergingbu2 (($x1 list)) list2 (ite (= $x1 (cons (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) (cons (cons2 Z nil2) nil))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (ite (= $x1 (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) nil)) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) nil2)))
(define-fun risers (($x1 list2)) list (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons2 Z nil2))) (cons (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) (cons (cons2 Z nil2) nil)) (ite (= $x1 (cons2 Z nil2)) (cons (cons2 Z nil2) nil) (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2))) (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) nil) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (cons (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) nil) nil)))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 Z))))
(define-fun elem (($x1 Nat) ($x2 list2)) Bool false)
(define-fun unique (($x1 list2)) Bool true)
; cardinality of I_length is 3
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_lmerge is 2
(declare-sort I_lmerge 0)
; rep: @uc_I_lmerge_0
; rep: @uc_I_lmerge_1
; cardinality of I_pairwise is 2
(declare-sort I_pairwise 0)
; rep: @uc_I_pairwise_0
; rep: @uc_I_pairwise_1
; cardinality of I_mergingbu2 is 2
(declare-sort I_mergingbu2 0)
; rep: @uc_I_mergingbu2_0
; rep: @uc_I_mergingbu2_1
; cardinality of I_risers is 4
(declare-sort I_risers 0)
; rep: @uc_I_risers_0
; rep: @uc_I_risers_1
; rep: @uc_I_risers_2
; rep: @uc_I_risers_3
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
)

benchmarks-sk/sat/msortbu2_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu2_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu2_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu2_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu2_unq_n03.smt2
60.00237s, ExitFailure 124

benchmarks-sk/sat/msortbu2_unq_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu2_unq_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu2_unq_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu2_unq_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu_inj_len_both_n02.smt2
1.69013s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list2 (nil2) (cons2 (head2 Nat) (tail2 list2)))
))
(declare-datatypes () ((list (nil) (cons (head list2) (tail list)))
))
(define-fun xs () list2 (cons2 Z (cons2 (S (S (S (S (S (S (S Z))))))) nil2)))
(define-fun ys () list2 (cons2 (S (S (S (S (S (S (S Z))))))) (cons2 Z nil2)))
(define-fun singletons (($x1 list2)) list (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S Z))))))) nil2))) (cons (cons2 Z nil2) (cons (cons2 (S (S (S (S (S (S (S Z))))))) nil2) nil)) (ite (= $x1 (cons2 (S (S (S (S (S (S (S Z))))))) (cons2 Z nil2))) (cons (cons2 (S (S (S (S (S (S (S Z))))))) nil2) (cons (cons2 Z nil2) nil)) (ite (= $x1 (cons2 (S (S (S (S (S (S (S Z))))))) nil2)) (cons (cons2 (S (S (S (S (S (S (S Z))))))) nil2) nil) (ite (= $x1 (cons2 Z nil2)) (cons (cons2 Z nil2) nil) (ite (= $x1 (cons2 (S (S (S Z))) nil2)) (cons nil2 (cons nil2 nil)) nil))))))
(define-fun length (($x1 list2)) Nat (ite (= $x1 (cons2 (S (S (S (S (S (S (S Z))))))) nil2)) (S Z) (ite (= $x1 (cons2 Z nil2)) (S Z) (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S Z))))))) nil2))) (S (S Z)) (ite (= $x1 (cons2 (S (S (S (S (S (S (S Z))))))) (cons2 Z nil2))) (S (S Z)) (ite (= $x1 (cons2 (S (S (S Z))) nil2)) (S (S (S (S Z)))) Z))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S Z)))))))) (= $x2 Z))))
(define-fun lmerge (($x1 list2) ($x2 list2)) list2 (ite (and (= $x1 (cons2 (S (S (S (S (S (S (S Z))))))) nil2)) (= $x2 (cons2 Z nil2))) (cons2 Z (cons2 (S (S (S (S (S (S (S Z))))))) nil2)) (ite (and (= $x1 (cons2 Z nil2)) (= $x2 (cons2 (S (S (S (S (S (S (S Z))))))) nil2))) (cons2 Z (cons2 (S (S (S (S (S (S (S Z))))))) nil2)) (ite (and (= $x1 nil2) (= $x2 (cons2 (S (S (S (S (S (S (S Z))))))) nil2))) (cons2 (S (S (S (S (S (S (S Z))))))) nil2) (ite (and (= $x1 (cons2 (S (S (S (S (S (S (S Z))))))) nil2)) (= $x2 nil2)) (cons2 (S (S (S (S (S (S (S Z))))))) nil2) nil2)))))
(define-fun pairwise (($x1 list)) list (ite (= $x1 (cons (cons2 (S (S (S (S (S (S (S Z))))))) nil2) (cons (cons2 Z nil2) nil))) (cons (cons2 Z (cons2 (S (S (S (S (S (S (S Z))))))) nil2)) nil) (ite (= $x1 (cons (cons2 Z nil2) (cons (cons2 (S (S (S (S (S (S (S Z))))))) nil2) nil))) (cons (cons2 Z (cons2 (S (S (S (S (S (S (S Z))))))) nil2)) nil) nil)))
(define-fun mergingbu (($x1 list)) list2 (ite (= $x1 (cons (cons2 (S (S (S (S (S (S (S Z))))))) nil2) (cons (cons2 Z nil2) nil))) (cons2 Z (cons2 (S (S (S (S (S (S (S Z))))))) nil2)) (ite (= $x1 (cons (cons2 Z (cons2 (S (S (S (S (S (S (S Z))))))) nil2)) nil)) (cons2 Z (cons2 (S (S (S (S (S (S (S Z))))))) nil2)) (ite (= $x1 (cons (cons2 Z nil2) (cons (cons2 (S (S (S (S (S (S (S Z))))))) nil2) nil))) (cons2 Z (cons2 (S (S (S (S (S (S (S Z))))))) nil2)) nil2))))
; cardinality of I_singletons is 5
(declare-sort I_singletons 0)
; rep: @uc_I_singletons_0
; rep: @uc_I_singletons_1
; rep: @uc_I_singletons_2
; rep: @uc_I_singletons_3
; rep: @uc_I_singletons_4
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_lmerge is 4
(declare-sort I_lmerge 0)
; rep: @uc_I_lmerge_0
; rep: @uc_I_lmerge_1
; rep: @uc_I_lmerge_2
; rep: @uc_I_lmerge_3
; cardinality of I_pairwise is 3
(declare-sort I_pairwise 0)
; rep: @uc_I_pairwise_0
; rep: @uc_I_pairwise_1
; rep: @uc_I_pairwise_2
; cardinality of I_mergingbu is 3
(declare-sort I_mergingbu 0)
; rep: @uc_I_mergingbu_0
; rep: @uc_I_mergingbu_1
; rep: @uc_I_mergingbu_2
)

benchmarks-sk/sat/msortbu_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu_inj_len_both_n03.smt2
60.00197s, ExitFailure 124

benchmarks-sk/sat/msortbu_inj_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu_inj_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu_inj_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu_inj_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu_inj_n02.smt2
60.00274s, ExitFailure 124

benchmarks-sk/sat/msortbu_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu_nub_len_both_n02.smt2
4.68407s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list2 (nil2) (cons2 (head2 Nat) (tail2 list2)))
))
(declare-datatypes () ((list (nil) (cons (head list2) (tail list)))
))
(define-fun xs () list2 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)))
(define-fun ys () list2 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) (cons2 Z nil2)))
(define-fun singletons (($x1 list2)) list (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2))) (cons (cons2 Z nil2) (cons (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) nil)) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) (cons2 Z nil2))) (cons (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) (cons (cons2 Z nil2) nil)) (ite (= $x1 (cons2 Z nil2)) (cons (cons2 Z nil2) nil) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (cons (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) nil) nil)))))
(define-fun length (($x1 list2)) Nat (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (S Z) (ite (= $x1 (cons2 Z nil2)) (S Z) (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2))) (S (S Z)) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) (cons2 Z nil2))) (S (S Z)) Z)))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 Z))))
(define-fun lmerge (($x1 list2) ($x2 list2)) list2 (ite (and (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (= $x2 (cons2 Z nil2))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (ite (and (= $x1 (cons2 Z nil2)) (= $x2 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (ite (and (= $x1 nil2) (= $x2 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2))) (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) (ite (and (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (= $x2 nil2)) (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) nil2)))))
(define-fun pairwise (($x1 list)) list (ite (= $x1 (cons (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) (cons (cons2 Z nil2) nil))) (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) nil) (ite (= $x1 (cons (cons2 Z nil2) (cons (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) nil))) (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) nil) nil)))
(define-fun mergingbu (($x1 list)) list2 (ite (= $x1 (cons (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) (cons (cons2 Z nil2) nil))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (ite (= $x1 (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) nil)) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (ite (= $x1 (cons (cons2 Z nil2) (cons (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) nil))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) nil2))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S Z)))))))))))))
(define-fun deleteAll (($x1 Nat) ($x2 list2)) list2 (ite (and (= $x1 Z) (= $x2 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2))) (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) nil2))
(define-fun nub (($x1 list2)) list2 (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2) (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S Z))))))))) nil2)) nil2)))
; cardinality of I_singletons is 5
(declare-sort I_singletons 0)
; rep: @uc_I_singletons_0
; rep: @uc_I_singletons_1
; rep: @uc_I_singletons_2
; rep: @uc_I_singletons_3
; rep: @uc_I_singletons_4
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_lmerge is 4
(declare-sort I_lmerge 0)
; rep: @uc_I_lmerge_0
; rep: @uc_I_lmerge_1
; rep: @uc_I_lmerge_2
; rep: @uc_I_lmerge_3
; cardinality of I_pairwise is 3
(declare-sort I_pairwise 0)
; rep: @uc_I_pairwise_0
; rep: @uc_I_pairwise_1
; rep: @uc_I_pairwise_2
; cardinality of I_mergingbu is 3
(declare-sort I_mergingbu 0)
; rep: @uc_I_mergingbu_0
; rep: @uc_I_mergingbu_1
; rep: @uc_I_mergingbu_2
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_deleteAll is 3
(declare-sort I_deleteAll 0)
; rep: @uc_I_deleteAll_0
; rep: @uc_I_deleteAll_1
; rep: @uc_I_deleteAll_2
; cardinality of I_nub is 3
(declare-sort I_nub 0)
; rep: @uc_I_nub_0
; rep: @uc_I_nub_1
; rep: @uc_I_nub_2
)

benchmarks-sk/sat/msortbu_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu_nub_len_both_n03.smt2
60.00150s, ExitFailure 124

benchmarks-sk/sat/msortbu_nub_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu_nub_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu_nub_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu_nub_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu_nub_n02.smt2
60.00183s, ExitFailure 124

benchmarks-sk/sat/msortbu_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu_unq_len_both_n02.smt2
2.65134s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list2 (nil2) (cons2 (head2 Nat) (tail2 list2)))
))
(declare-datatypes () ((list (nil) (cons (head list2) (tail list)))
))
(define-fun xs () list2 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons2 Z nil2)))
(define-fun ys () list2 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)))
(define-fun singletons (($x1 list2)) list (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons2 Z nil2))) (cons (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) (cons (cons2 Z nil2) nil)) (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2))) (cons (cons2 Z nil2) (cons (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) nil)) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (cons (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) nil) (ite (= $x1 (cons2 (S (S (S Z))) nil2)) (cons nil2 (cons nil2 nil)) (ite (= $x1 (cons2 Z nil2)) (cons (cons2 Z nil2) nil) nil))))))
(define-fun length (($x1 list2)) Nat (ite (= $x1 (cons2 Z nil2)) (S Z) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (S Z) (ite (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons2 Z nil2))) (S (S Z)) (ite (= $x1 (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2))) (S (S Z)) (ite (= $x1 (cons2 (S (S (S Z))) nil2)) (S (S (S (S (S (S (S Z))))))) Z))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 Z))))
(define-fun lmerge (($x1 list2) ($x2 list2)) list2 (ite (and (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (= $x2 (cons2 Z nil2))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (ite (and (= $x1 (cons2 Z nil2)) (= $x2 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (ite (and (= $x1 nil2) (= $x2 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2))) (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) (ite (and (= $x1 (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (= $x2 nil2)) (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) nil2)))))
(define-fun pairwise (($x1 list)) list (ite (= $x1 (cons (cons2 Z nil2) (cons (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) nil))) (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) nil) (ite (= $x1 (cons (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) (cons (cons2 Z nil2) nil))) (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) nil) nil)))
(define-fun mergingbu (($x1 list)) list2 (ite (= $x1 (cons (cons2 Z nil2) (cons (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) nil))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (ite (= $x1 (cons (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) nil)) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) (ite (= $x1 (cons (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2) (cons (cons2 Z nil2) nil))) (cons2 Z (cons2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil2)) nil2))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 Z))))
(define-fun elem (($x1 Nat) ($x2 list2)) Bool false)
(define-fun unique (($x1 list2)) Bool true)
; cardinality of I_singletons is 5
(declare-sort I_singletons 0)
; rep: @uc_I_singletons_0
; rep: @uc_I_singletons_1
; rep: @uc_I_singletons_2
; rep: @uc_I_singletons_3
; rep: @uc_I_singletons_4
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_lmerge is 4
(declare-sort I_lmerge 0)
; rep: @uc_I_lmerge_0
; rep: @uc_I_lmerge_1
; rep: @uc_I_lmerge_2
; rep: @uc_I_lmerge_3
; cardinality of I_pairwise is 3
(declare-sort I_pairwise 0)
; rep: @uc_I_pairwise_0
; rep: @uc_I_pairwise_1
; rep: @uc_I_pairwise_2
; cardinality of I_mergingbu is 3
(declare-sort I_mergingbu 0)
; rep: @uc_I_mergingbu_0
; rep: @uc_I_mergingbu_1
; rep: @uc_I_mergingbu_2
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
)

benchmarks-sk/sat/msortbu_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu_unq_len_both_n03.smt2
60.00303s, ExitFailure 124

benchmarks-sk/sat/msortbu_unq_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu_unq_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu_unq_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu_unq_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msortbu_unq_n02.smt2
60.00188s, ExitFailure 124

benchmarks-sk/sat/msortbu_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msortbu_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msortbu_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msortbu_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msorttd_inj_len_both_n02.smt2
60.00148s, ExitFailure 124

benchmarks-sk/sat/msorttd_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msorttd_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msorttd_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msorttd_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msorttd_inj_n02.smt2
60.00236s, ExitFailure 124

benchmarks-sk/sat/msorttd_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msorttd_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msorttd_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msorttd_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msorttd_nub_len_both_n02.smt2
60.00198s, ExitFailure 124

benchmarks-sk/sat/msorttd_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msorttd_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msorttd_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msorttd_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msorttd_nub_n02.smt2
60.00149s, ExitFailure 124

benchmarks-sk/sat/msorttd_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msorttd_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msorttd_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msorttd_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msorttd_unq_len_both_n02.smt2
23.30609s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun xs () list (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil)))
(define-fun ys () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)))
(define-fun take (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S Z)) (= $x2 (cons Z (cons (S (S (S (S (S (S (S Z))))))) (cons Z (cons Z (cons Z (cons Z nil)))))))) (cons (S (S Z)) nil) (ite (and (= $x1 (S Z)) (= $x2 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)))) (cons Z nil) (ite (and (= $x1 (S Z)) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil)))) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil) (ite (and (= $x1 Z) (= $x2 (cons Z nil))) nil (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) nil (cons (S (S (S (S Z)))) nil)))))))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) (S Z) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S Z))))))) (cons Z (cons Z (cons Z (cons Z nil))))))) (S (S Z)) (ite (= $x1 (cons Z (cons Z (cons Z (cons Z nil))))) (S (S (S (S (S (S (S (S (S (S Z)))))))))) Z)))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) (= $x2 Z))))
(define-fun lmerge (($x1 list) ($x2 list)) list (ite (and (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) (= $x2 (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) (ite (and (= $x1 (cons Z nil)) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) (ite (and (= $x1 nil) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil) (ite (and (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) (= $x2 nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil) (ite (and (= $x1 (cons Z nil)) (= $x2 nil)) (cons (S Z) nil) (ite (and (= $x1 nil) (= $x2 (cons Z nil))) (cons (S (S (S Z))) nil) nil)))))))
(define-fun half (($x1 Nat)) Nat (ite (= $x1 (S (S Z))) (S Z) Z))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) (= $x2 Z))))
(define-fun elem (($x1 Nat) ($x2 list)) Bool false)
(define-fun unique (($x1 list)) Bool true)
(define-fun drop (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S Z)) (= $x2 (cons Z (cons (S (S (S (S (S (S (S Z))))))) (cons Z (cons Z (cons Z (cons Z nil)))))))) (cons (S Z) (cons Z (cons Z nil))) (ite (and (= $x1 (S Z)) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil)))) (cons Z nil) (ite (and (= $x1 (S Z)) (= $x2 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)))) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil) (ite (and (= $x1 Z) (= $x2 (cons Z nil))) (cons Z nil) (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil) (cons (S (S (S Z))) (cons Z nil))))))))
(define-fun msorttd (($x1 list)) list (ite (= $x1 (cons (S (S Z)) nil)) (cons Z (cons (S Z) nil)) (ite (= $x1 (cons Z nil)) (cons Z nil) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) nil))))))
; cardinality of I_take is 4
(declare-sort I_take 0)
; rep: @uc_I_take_0
; rep: @uc_I_take_1
; rep: @uc_I_take_2
; rep: @uc_I_take_3
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_lmerge is 4
(declare-sort I_lmerge 0)
; rep: @uc_I_lmerge_0
; rep: @uc_I_lmerge_1
; rep: @uc_I_lmerge_2
; rep: @uc_I_lmerge_3
; cardinality of I_half is 2
(declare-sort I_half 0)
; rep: @uc_I_half_0
; rep: @uc_I_half_1
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
; cardinality of I_drop is 4
(declare-sort I_drop 0)
; rep: @uc_I_drop_0
; rep: @uc_I_drop_1
; rep: @uc_I_drop_2
; rep: @uc_I_drop_3
; cardinality of I_msorttd is 4
(declare-sort I_msorttd 0)
; rep: @uc_I_msorttd_0
; rep: @uc_I_msorttd_1
; rep: @uc_I_msorttd_2
; rep: @uc_I_msorttd_3
)

benchmarks-sk/sat/msorttd_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msorttd_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msorttd_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msorttd_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msorttd_unq_len_both_n03.smt2
60.00182s, ExitFailure 124

benchmarks-sk/sat/msorttd_unq_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msorttd_unq_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msorttd_unq_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msorttd_unq_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

msorttd_unq_n02.smt2
60.00236s, ExitFailure 124

benchmarks-sk/sat/msorttd_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/msorttd_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/msorttd_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/msorttd_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

nat_minus_assoc.smt2
0.23338s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(define-fun x () Nat (S (S (S (S (S (S (S (S (S Z))))))))))
(define-fun y () Nat Z)
(define-fun z () Nat (S Z))
(define-fun minus (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 (S Z))) (S (S (S (S (S (S (S (S Z)))))))) (ite (and (= $x1 (S (S (S (S (S (S (S (S Z))))))))) (= $x2 Z)) (S (S (S (S (S (S (S (S Z)))))))) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 Z)) (S (S (S (S (S (S (S (S (S Z))))))))) (ite (and (= $x1 (S (S (S (S (S (S Z))))))) (= $x2 Z)) (S (S Z)) Z)))))
; cardinality of I_minus is 4
(declare-sort I_minus 0)
; rep: @uc_I_minus_0
; rep: @uc_I_minus_1
; rep: @uc_I_minus_2
; rep: @uc_I_minus_3
)

benchmarks-sk/sat/nat_minus_assoc.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/nat_minus_assoc.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/nat_minus_assoc.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/nat_minus_assoc.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

nat_minus_comm.smt2
0.01104s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(define-fun x () Nat Z)
(define-fun y () Nat (S (S (S (S (S Z))))))
(define-fun minus (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S (S (S Z)))) (= $x2 (S (S (S (S Z)))))) (S (S Z)) (ite (and (= $x1 (S (S (S (S (S Z)))))) (= $x2 Z)) (S (S (S (S (S Z))))) Z)))
; cardinality of I_minus is 2
(declare-sort I_minus 0)
; rep: @uc_I_minus_0
; rep: @uc_I_minus_1
)

benchmarks-sk/sat/nat_minus_comm.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/nat_minus_comm.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/nat_minus_comm.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/nat_minus_comm.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

nat_plus_idem.smt2
0.01094s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(define-fun x () Nat (S Z))
(define-fun plus (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S Z)) (= $x2 (S Z))) (S (S Z)) (ite (and (= $x1 Z) (= $x2 (S Z))) (S Z) Z)))
; cardinality of I_plus is 2
(declare-sort I_plus 0)
; rep: @uc_I_plus_0
; rep: @uc_I_plus_1
)

benchmarks-sk/sat/nat_plus_idem.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/nat_plus_idem.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/nat_plus_idem.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/nat_plus_idem.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

nat_plus_idem_somewhere.smt2
0.00590s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(define-fun x () Nat Z)
(define-fun plus (($x1 Nat) ($x2 Nat)) Nat Z)
; cardinality of I_plus is 1
(declare-sort I_plus 0)
; rep: @uc_I_plus_0
)

benchmarks-sk/sat/nat_plus_idem_somewhere.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/nat_plus_idem_somewhere.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/nat_plus_idem_somewhere.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/nat_plus_idem_somewhere.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

nat_pow_le_factorial.smt2
60.00188s, ExitFailure 124

benchmarks-sk/sat/nat_pow_le_factorial.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/nat_pow_le_factorial.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/nat_pow_le_factorial.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/nat_pow_le_factorial.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

prop_cnf_not_assoc.smt2
15.19912s, ExitFailure (-6)

benchmarks-sk/sat/prop_cnf_not_assoc.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/prop_cnf_not_assoc.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/prop_cnf_not_assoc.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/prop_cnf_not_assoc.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffb21d63748
timeout: the monitored command dumped core

prop_cnf_not_comm.smt2
15.55001s, ExitFailure (-6)

benchmarks-sk/sat/prop_cnf_not_comm.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/prop_cnf_not_comm.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/prop_cnf_not_comm.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/prop_cnf_not_comm.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffb75385938
timeout: the monitored command dumped core

prop_cnf_one_four.smt2
14.68364s, ExitFailure (-6)

benchmarks-sk/sat/prop_cnf_one_four.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/prop_cnf_one_four.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/prop_cnf_one_four.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/prop_cnf_one_four.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

prop_cnf_one_three.smt2
14.66110s, ExitFailure (-6)

benchmarks-sk/sat/prop_cnf_one_three.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/prop_cnf_one_three.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/prop_cnf_one_three.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/prop_cnf_one_three.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffe03758fc8
timeout: the monitored command dumped core

prop_cnf_one_two.smt2
14.58006s, ExitFailure (-6)

benchmarks-sk/sat/prop_cnf_one_two.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/prop_cnf_one_two.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/prop_cnf_one_two.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/prop_cnf_one_two.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffc8ee62e88
timeout: the monitored command dumped core

prop_cnf_two_four.smt2
15.23780s, ExitFailure (-6)

benchmarks-sk/sat/prop_cnf_two_four.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/prop_cnf_two_four.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/prop_cnf_two_four.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/prop_cnf_two_four.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

prop_cnf_xor_three.smt2
14.71978s, ExitFailure (-6)

benchmarks-sk/sat/prop_cnf_xor_three.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/prop_cnf_xor_three.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/prop_cnf_xor_three.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/prop_cnf_xor_three.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffbba1a9ed8
timeout: the monitored command dumped core

prop_one_four.smt2
14.64730s, ExitFailure (-6)

benchmarks-sk/sat/prop_one_four.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/prop_one_four.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/prop_one_four.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/prop_one_four.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffc4ff5e9e8
timeout: the monitored command dumped core

prop_one_three.smt2
14.73075s, ExitFailure (-6)

benchmarks-sk/sat/prop_one_three.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/prop_one_three.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/prop_one_three.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/prop_one_three.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffac6c59fe8
timeout: the monitored command dumped core

prop_one_two.smt2
15.64826s, ExitFailure (-6)

benchmarks-sk/sat/prop_one_two.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/prop_one_two.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/prop_one_two.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/prop_one_two.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffc4d254808
timeout: the monitored command dumped core

prop_two_four.smt2
14.64347s, ExitFailure (-6)

benchmarks-sk/sat/prop_two_four.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/prop_two_four.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/prop_two_four.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/prop_two_four.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffc8f692f08
timeout: the monitored command dumped core

prop_xor_three.smt2
14.57395s, ExitFailure (-6)

benchmarks-sk/sat/prop_xor_three.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/prop_xor_three.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/prop_xor_three.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/prop_xor_three.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffb99112de8
timeout: the monitored command dumped core

qsort_inj_len_both_n02.smt2
60.00646s, ExitFailure 124

benchmarks-sk/sat/qsort_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/qsort_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/qsort_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/qsort_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

qsort_inj_n02.smt2
60.00189s, ExitFailure 124

benchmarks-sk/sat/qsort_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/qsort_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/qsort_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/qsort_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

qsort_nub_len_both_n02.smt2
60.00143s, ExitFailure 124

benchmarks-sk/sat/qsort_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/qsort_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/qsort_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/qsort_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

qsort_nub_n02.smt2
60.00160s, ExitFailure 124

benchmarks-sk/sat/qsort_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/qsort_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/qsort_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/qsort_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

qsort_unq_len_both_n02.smt2
60.00212s, ExitFailure 124

benchmarks-sk/sat/qsort_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/qsort_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/qsort_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/qsort_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

qsort_unq_n02.smt2
60.00281s, ExitFailure 124

benchmarks-sk/sat/qsort_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/qsort_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/qsort_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/qsort_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_bad_assoc.smt2
60.00213s, ExitFailure 124

benchmarks-sk/sat/re_brz_bad_assoc.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_bad_assoc.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_bad_assoc.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_bad_assoc.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_comm.smt2
60.00165s, ExitFailure 124

benchmarks-sk/sat/re_brz_comm.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_comm.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_comm.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_comm.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_smart_bad_assoc.smt2
60.00304s, ExitFailure 124

benchmarks-sk/sat/re_brz_smart_bad_assoc.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_bad_assoc.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_bad_assoc.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_bad_assoc.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_smart_comm.smt2
60.00311s, ExitFailure 124

benchmarks-sk/sat/re_brz_smart_comm.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_comm.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_comm.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_comm.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_smart_star_plus.smt2
60.00262s, ExitFailure 124

benchmarks-sk/sat/re_brz_smart_star_plus.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_star_plus.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_star_plus.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_star_plus.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_smart_star_seq.smt2
60.00242s, ExitFailure 124

benchmarks-sk/sat/re_brz_smart_star_seq.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_star_seq.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_star_seq.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_star_seq.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_smart_switcheroo.smt2
60.00299s, ExitFailure 124

benchmarks-sk/sat/re_brz_smart_switcheroo.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_switcheroo.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_switcheroo.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_switcheroo.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_smart_wrong_FullSpec.smt2
14.73472s, ExitFailure (-6)

benchmarks-sk/sat/re_brz_smart_wrong_FullSpec.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_wrong_FullSpec.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_wrong_FullSpec.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_wrong_FullSpec.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffbf7648748
timeout: the monitored command dumped core

re_brz_smart_xxyy.smt2
60.00403s, ExitFailure 124

benchmarks-sk/sat/re_brz_smart_xxyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_xxyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_xxyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_xxyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_smart_xyxy.smt2
60.00187s, ExitFailure 124

benchmarks-sk/sat/re_brz_smart_xyxy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_xyxy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_xyxy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_xyxy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_smart_xyxyx.smt2
60.00198s, ExitFailure 124

benchmarks-sk/sat/re_brz_smart_xyxyx.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_xyxyx.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_xyxyx.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_xyxyx.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_smart_xyxyxy.smt2
60.00191s, ExitFailure 124

benchmarks-sk/sat/re_brz_smart_xyxyxy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_xyxyxy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_xyxyxy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_xyxyxy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_smart_xyxyy.smt2
60.00201s, ExitFailure 124

benchmarks-sk/sat/re_brz_smart_xyxyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_xyxyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_xyxyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_xyxyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_smart_xyy.smt2
3.60653s, ExitSuccess
sat
(model
(declare-datatypes () ((A (X) (Y))
))
(declare-datatypes () ((R (Nil) (Eps) (Atom (Atom_0 A)) (Plus (Plus_0 R) (Plus_1 R)) (Seq (Seq_0 R) (Seq_1 R)) (Star (Star_0 R)))
))
(declare-datatypes () ((list (nil) (cons (head A) (tail list)))
))
(define-fun p () R (Atom X))
(define-fun eps (($x1 R)) Bool (not (= $x1 (Atom X))))
(define-fun step (($x1 R) ($x2 A)) R (ite (and (= $x1 (Atom X)) (= $x2 X)) Eps Nil))
(define-fun recognise (($x1 R) ($x2 list)) Bool true)
; cardinality of I_eps is 1
(declare-sort I_eps 0)
; rep: @uc_I_eps_0
; cardinality of I_step is 3
(declare-sort I_step 0)
; rep: @uc_I_step_0
; rep: @uc_I_step_1
; rep: @uc_I_step_2
; cardinality of I_recognise is 4
(declare-sort I_recognise 0)
; rep: @uc_I_recognise_0
; rep: @uc_I_recognise_1
; rep: @uc_I_recognise_2
; rep: @uc_I_recognise_3
)

benchmarks-sk/sat/re_brz_smart_xyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_xyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_xyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_xyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_smart_xyyx.smt2
60.00189s, ExitFailure 124

benchmarks-sk/sat/re_brz_smart_xyyx.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_smart_xyyx.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_smart_xyyx.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_smart_xyyx.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_star_plus.smt2
60.00161s, ExitFailure 124

benchmarks-sk/sat/re_brz_star_plus.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_star_plus.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_star_plus.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_star_plus.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_star_seq.smt2
60.00204s, ExitFailure 124

benchmarks-sk/sat/re_brz_star_seq.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_star_seq.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_star_seq.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_star_seq.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_switcheroo.smt2
60.00206s, ExitFailure 124

benchmarks-sk/sat/re_brz_switcheroo.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_switcheroo.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_switcheroo.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_switcheroo.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_wrong_FullSpec.smt2
15.51168s, ExitFailure (-6)

benchmarks-sk/sat/re_brz_wrong_FullSpec.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_wrong_FullSpec.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_wrong_FullSpec.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_wrong_FullSpec.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffbf5d9cd68
timeout: the monitored command dumped core

re_brz_xxyy.smt2
60.00784s, ExitFailure 124

benchmarks-sk/sat/re_brz_xxyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_xxyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_xxyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_xxyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_xyxy.smt2
60.00255s, ExitFailure 124

benchmarks-sk/sat/re_brz_xyxy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_xyxy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_xyxy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_xyxy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_xyxyx.smt2
60.00175s, ExitFailure 124

benchmarks-sk/sat/re_brz_xyxyx.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_xyxyx.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_xyxyx.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_xyxyx.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_xyxyxy.smt2
60.00171s, ExitFailure 124

benchmarks-sk/sat/re_brz_xyxyxy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_xyxyxy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_xyxyxy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_xyxyxy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_xyxyy.smt2
60.00215s, ExitFailure 124

benchmarks-sk/sat/re_brz_xyxyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_xyxyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_xyxyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_xyxyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_xyy.smt2
60.00174s, ExitFailure 124

benchmarks-sk/sat/re_brz_xyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_xyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_xyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_xyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_brz_xyyx.smt2
60.00207s, ExitFailure 124

benchmarks-sk/sat/re_brz_xyyx.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_brz_xyyx.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_brz_xyyx.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_brz_xyyx.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_Conj.smt2
60.00171s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_Conj.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_Conj.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_Conj.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_Conj.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_FromToConj.smt2
60.00191s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_FromToConj.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_FromToConj.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_FromToConj.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_FromToConj.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_Iter.smt2
60.00183s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_Iter.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_Iter.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_Iter.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_Iter.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_bad_assoc_a.smt2
60.00167s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_bad_assoc_a.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_bad_assoc_a.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_bad_assoc_a.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_bad_assoc_a.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_bad_assoc_b.smt2
60.00220s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_bad_assoc_b.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_bad_assoc_b.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_bad_assoc_b.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_bad_assoc_b.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_bad_assoc_c.smt2
60.00232s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_bad_assoc_c.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_bad_assoc_c.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_bad_assoc_c.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_bad_assoc_c.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_comm.smt2
60.00190s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_comm.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_comm.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_comm.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_comm.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_Conj.smt2
60.00354s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_Conj.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_Conj.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_Conj.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_Conj.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_FromToConj.smt2
60.00341s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_FromToConj.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_FromToConj.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_FromToConj.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_FromToConj.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_Iter.smt2
60.00264s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_Iter.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_Iter.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_Iter.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_Iter.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_bad_assoc_a.smt2
60.00279s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_bad_assoc_a.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_bad_assoc_a.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_bad_assoc_a.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_bad_assoc_a.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_bad_assoc_b.smt2
60.00238s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_bad_assoc_b.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_bad_assoc_b.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_bad_assoc_b.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_bad_assoc_b.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_bad_assoc_c.smt2
60.00290s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_bad_assoc_c.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_bad_assoc_c.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_bad_assoc_c.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_bad_assoc_c.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_comm.smt2
60.00238s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_comm.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_comm.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_comm.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_comm.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_star_conj.smt2
60.00296s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_star_conj.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_star_conj.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_star_conj.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_star_conj.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_star_plus.smt2
60.00272s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_star_plus.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_star_plus.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_star_plus.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_star_plus.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_star_seq.smt2
60.00230s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_star_seq.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_star_seq.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_star_seq.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_star_seq.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_switcheroo_a.smt2
60.00317s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_switcheroo_a.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_switcheroo_a.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_switcheroo_a.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_switcheroo_a.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_switcheroo_b.smt2
60.00293s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_switcheroo_b.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_switcheroo_b.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_switcheroo_b.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_switcheroo_b.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_switcheroo_c.smt2
60.00280s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_switcheroo_c.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_switcheroo_c.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_switcheroo_c.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_switcheroo_c.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_wrong_FullSpec.smt2
14.83960s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_brz_smart_wrong_FullSpec.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_wrong_FullSpec.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_wrong_FullSpec.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_wrong_FullSpec.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffe16851ef8
timeout: the monitored command dumped core

re_conj_brz_smart_xxyy.smt2
60.00467s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_xxyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_xxyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_xxyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_xxyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_xyxy.smt2
60.00211s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_xyxy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_xyxy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_xyxy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_xyxy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_xyxyx.smt2
60.00193s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_xyxyx.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_xyxyx.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_xyxyx.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_xyxyx.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_xyxyxy.smt2
60.00288s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_xyxyxy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_xyxyxy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_xyxyxy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_xyxyxy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_xyxyy.smt2
60.00250s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_xyxyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_xyxyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_xyxyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_xyxyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_xyy.smt2
9.76463s, ExitSuccess
sat
(model
(declare-datatypes () ((A (X) (Y))
))
(declare-datatypes () ((R (Nil) (Eps) (Atom (Atom_0 A)) (Plus (Plus_0 R) (Plus_1 R)) (And (And_0 R) (And_1 R)) (Seq (Seq_0 R) (Seq_1 R)) (Star (Star_0 R)))
))
(declare-datatypes () ((list (nil) (cons (head A) (tail list)))
))
(define-fun p () R (Atom X))
(define-fun eps (($x1 R)) Bool (not (= $x1 (Atom X))))
(define-fun step (($x1 R) ($x2 A)) R (ite (and (= $x1 (Atom X)) (= $x2 X)) Eps Nil))
(define-fun recognise (($x1 R) ($x2 list)) Bool true)
; cardinality of I_eps is 1
(declare-sort I_eps 0)
; rep: @uc_I_eps_0
; cardinality of I_step is 3
(declare-sort I_step 0)
; rep: @uc_I_step_0
; rep: @uc_I_step_1
; rep: @uc_I_step_2
; cardinality of I_recognise is 4
(declare-sort I_recognise 0)
; rep: @uc_I_recognise_0
; rep: @uc_I_recognise_1
; rep: @uc_I_recognise_2
; rep: @uc_I_recognise_3
)

benchmarks-sk/sat/re_conj_brz_smart_xyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_xyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_xyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_xyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_smart_xyyx.smt2
60.00212s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_smart_xyyx.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_smart_xyyx.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_smart_xyyx.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_smart_xyyx.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_star_conj.smt2
60.00187s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_star_conj.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_star_conj.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_star_conj.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_star_conj.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_star_plus.smt2
60.00185s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_star_plus.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_star_plus.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_star_plus.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_star_plus.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_star_seq.smt2
60.00248s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_star_seq.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_star_seq.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_star_seq.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_star_seq.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_switcheroo_a.smt2
60.00183s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_switcheroo_a.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_switcheroo_a.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_switcheroo_a.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_switcheroo_a.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_switcheroo_b.smt2
60.00176s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_switcheroo_b.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_switcheroo_b.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_switcheroo_b.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_switcheroo_b.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_switcheroo_c.smt2
60.00178s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_switcheroo_c.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_switcheroo_c.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_switcheroo_c.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_switcheroo_c.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_wrong_FullSpec.smt2
14.76224s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_brz_wrong_FullSpec.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_wrong_FullSpec.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_wrong_FullSpec.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_wrong_FullSpec.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffeb1118f78
timeout: the monitored command dumped core

re_conj_brz_xxyy.smt2
60.00426s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_xxyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_xxyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_xxyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_xxyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_xyxy.smt2
60.08234s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_xyxy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_xyxy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_xyxy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_xyxy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_xyxyx.smt2
60.00232s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_xyxyx.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_xyxyx.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_xyxyx.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_xyxyx.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_xyxyxy.smt2
60.00167s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_xyxyxy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_xyxyxy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_xyxyxy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_xyxyxy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_xyxyy.smt2
60.00222s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_xyxyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_xyxyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_xyxyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_xyxyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_xyy.smt2
60.00228s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_xyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_xyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_xyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_xyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_brz_xyyx.smt2
60.00224s, ExitFailure 124

benchmarks-sk/sat/re_conj_brz_xyyx.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_brz_xyyx.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_brz_xyyx.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_brz_xyyx.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

re_conj_reck_bad_assoc.smt2
14.68826s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_reck_bad_assoc.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_reck_bad_assoc.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_reck_bad_assoc.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_reck_bad_assoc.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'St9bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_conj_reck_comm.smt2
14.64485s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_reck_comm.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_reck_comm.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_reck_comm.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_reck_comm.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_conj_reck_star_plus.smt2
15.57369s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_reck_star_plus.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_reck_star_plus.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_reck_star_plus.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_reck_star_plus.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_conj_reck_star_seq.smt2
14.59724s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_reck_star_seq.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_reck_star_seq.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_reck_star_seq.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_reck_star_seq.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_conj_reck_switcheroo.smt2
14.69762s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_reck_switcheroo.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_reck_switcheroo.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_reck_switcheroo.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_reck_switcheroo.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_conj_reck_xxyy.smt2
14.65592s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_reck_xxyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_reck_xxyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_reck_xxyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_reck_xxyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'St9bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_conj_reck_xyxy.smt2
15.54940s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_reck_xyxy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_reck_xyxy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_reck_xyxy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_reck_xyxy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_conj_reck_xyxyx.smt2
14.61058s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_reck_xyxyx.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_reck_xyxyx.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_reck_xyxyx.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_reck_xyxyx.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_conj_reck_xyxyxy.smt2
14.74002s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_reck_xyxyxy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_reck_xyxyxy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_reck_xyxyxy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_reck_xyxyxy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_conj_reck_xyxyy.smt2
14.78287s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_reck_xyxyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_reck_xyxyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_reck_xyxyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_reck_xyxyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_conj_reck_xyy.smt2
14.65184s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_reck_xyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_reck_xyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_reck_xyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_reck_xyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'St9bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_conj_reck_xyyx.smt2
15.49976s, ExitFailure (-6)

benchmarks-sk/sat/re_conj_reck_xyyx.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_conj_reck_xyyx.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_conj_reck_xyyx.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_conj_reck_xyyx.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_reck_bad_assoc.smt2
14.64607s, ExitFailure (-6)

benchmarks-sk/sat/re_reck_bad_assoc.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_reck_bad_assoc.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_reck_bad_assoc.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_reck_bad_assoc.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'St9bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_reck_comm.smt2
14.63659s, ExitFailure (-6)

benchmarks-sk/sat/re_reck_comm.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_reck_comm.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_reck_comm.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_reck_comm.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_reck_star_plus.smt2
14.67167s, ExitFailure (-6)

benchmarks-sk/sat/re_reck_star_plus.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_reck_star_plus.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_reck_star_plus.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_reck_star_plus.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_reck_star_seq.smt2
15.74176s, ExitFailure (-6)

benchmarks-sk/sat/re_reck_star_seq.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_reck_star_seq.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_reck_star_seq.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_reck_star_seq.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_reck_switcheroo.smt2
14.66875s, ExitFailure (-6)

benchmarks-sk/sat/re_reck_switcheroo.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_reck_switcheroo.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_reck_switcheroo.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_reck_switcheroo.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_reck_xxyy.smt2
14.57544s, ExitFailure (-6)

benchmarks-sk/sat/re_reck_xxyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_reck_xxyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_reck_xxyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_reck_xxyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'St9bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_reck_xyxy.smt2
14.68135s, ExitFailure (-6)

benchmarks-sk/sat/re_reck_xyxy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_reck_xyxy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_reck_xyxy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_reck_xyxy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_reck_xyxyx.smt2
14.64561s, ExitFailure (-6)

benchmarks-sk/sat/re_reck_xyxyx.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_reck_xyxyx.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_reck_xyxyx.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_reck_xyxyx.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'St9bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_reck_xyxyxy.smt2
15.62184s, ExitFailure (-6)

benchmarks-sk/sat/re_reck_xyxyxy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_reck_xyxyxy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_reck_xyxyxy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_reck_xyxyxy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_reck_xyxyy.smt2
14.62409s, ExitFailure (-6)

benchmarks-sk/sat/re_reck_xyxyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_reck_xyxyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_reck_xyxyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_reck_xyxyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'St9bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_reck_xyy.smt2
14.76004s, ExitFailure (-6)

benchmarks-sk/sat/re_reck_xyy.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_reck_xyy.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_reck_xyy.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_reck_xyy.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

re_reck_xyyx.smt2
14.59010s, ExitFailure (-6)

benchmarks-sk/sat/re_reck_xyyx.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/re_reck_xyyx.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/re_reck_xyyx.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/re_reck_xyyx.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 threw an "unexpected" exception.
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
timeout: the monitored command dumped core

red_black_insert.smt2
0.03570s, ExitFailure 1

benchmarks-sk/sat/red_black_insert.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/red_black_insert.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/red_black_insert.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/red_black_insert.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
(error "Parse Error: benchmarks-sk/sat/red_black_insert.smt2:57.22: Symbol 'z' not declared as a variable

           (m (second z))
                      ^
")

scale_solution.smt2
20.25860s, ExitFailure (-6)

benchmarks-sk/sat/scale_solution.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/scale_solution.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/scale_solution.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/scale_solution.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
CVC4 suffered a segfault.
Offending address is 0x7ffd7a47dcc8
timeout: the monitored command dumped core

ssort_inj_len_both_n02.smt2
60.00367s, ExitFailure 124

benchmarks-sk/sat/ssort_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/ssort_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/ssort_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/ssort_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

ssort_inj_n02.smt2
60.00258s, ExitFailure 124

benchmarks-sk/sat/ssort_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/ssort_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/ssort_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/ssort_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

ssort_nub_len_both_n02.smt2
60.00250s, ExitFailure 124

benchmarks-sk/sat/ssort_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/ssort_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/ssort_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/ssort_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

ssort_nub_n02.smt2
60.00211s, ExitFailure 124

benchmarks-sk/sat/ssort_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/ssort_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/ssort_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/ssort_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

ssort_unq_len_both_n02.smt2
60.00410s, ExitFailure 124

benchmarks-sk/sat/ssort_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/ssort_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/ssort_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/ssort_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

ssort_unq_n02.smt2
60.00230s, ExitFailure 124

benchmarks-sk/sat/ssort_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/ssort_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/ssort_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/ssort_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort2_inj_len_both_n02.smt2
0.75005s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first list) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (cons Z nil)))
(define-fun twoThirds (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S Z)))))) (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) Z))
(define-fun third (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S Z)))))) (S (S (S (S (S (S (S (S Z)))))))) Z))
(define-fun take (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S Z)))))))) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) nil))) (cons Z (cons (S Z) nil)) nil))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (cons Z nil))) (S (S Z)) Z)))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) (= $x2 Z))))
(define-fun drop (($x1 Nat) ($x2 list)) list nil)
(define-fun append (($x1 list) ($x2 list)) list nil)
(define-fun stooge2sort2 (($x1 list)) list nil)
(define-fun stoogesort2 (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) nil)))
(define-fun stooge2sort1 (($x1 list)) list (ite (= $x1 (cons (S Z) nil)) (cons Z (cons Z (cons Z nil))) (ite (= $x1 (cons (S Z) (cons Z (cons Z nil)))) (cons (S (S Z)) (cons Z nil)) nil)))
; cardinality of I_twoThirds is 1
(declare-sort I_twoThirds 0)
; rep: @uc_I_twoThirds_0
; cardinality of I_third is 1
(declare-sort I_third 0)
; rep: @uc_I_third_0
; cardinality of I_take is 1
(declare-sort I_take 0)
; rep: @uc_I_take_0
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_drop is 1
(declare-sort I_drop 0)
; rep: @uc_I_drop_0
; cardinality of I_append is 1
(declare-sort I_append 0)
; rep: @uc_I_append_0
; cardinality of I_stooge2sort2 is 1
(declare-sort I_stooge2sort2 0)
; rep: @uc_I_stooge2sort2_0
; cardinality of I_stoogesort2 is 3
(declare-sort I_stoogesort2 0)
; rep: @uc_I_stoogesort2_0
; rep: @uc_I_stoogesort2_1
; rep: @uc_I_stoogesort2_2
; cardinality of I_stooge2sort1 is 1
(declare-sort I_stooge2sort1 0)
; rep: @uc_I_stooge2sort1_0
)

benchmarks-sk/sat/stoogesort2_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort2_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort2_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort2_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort2_inj_len_both_n03.smt2
60.00174s, ExitFailure 124

benchmarks-sk/sat/stoogesort2_inj_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort2_inj_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort2_inj_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort2_inj_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort2_inj_n02.smt2
0.50262s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first list) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (cons Z nil)))
(define-fun twoThirds (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S Z)))))) (S (S (S (S (S (S (S (S (S (S Z)))))))))) Z))
(define-fun third (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S Z)))))) (S (S (S (S (S (S (S (S Z)))))))) Z))
(define-fun take (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S Z)))))))) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) nil))) (cons (S (S Z)) nil) nil))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) nil)) (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) Z))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) (= $x2 Z))))
(define-fun drop (($x1 Nat) ($x2 list)) list nil)
(define-fun append (($x1 list) ($x2 list)) list nil)
(define-fun stooge2sort2 (($x1 list)) list nil)
(define-fun stoogesort2 (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) nil)))
(define-fun stooge2sort1 (($x1 list)) list (ite (= $x1 (cons Z (cons (S Z) nil))) (cons (S Z) (cons Z (cons Z nil))) (ite (= $x1 (cons (S Z) nil)) (cons Z (cons Z (cons Z nil))) nil)))
; cardinality of I_twoThirds is 1
(declare-sort I_twoThirds 0)
; rep: @uc_I_twoThirds_0
; cardinality of I_third is 1
(declare-sort I_third 0)
; rep: @uc_I_third_0
; cardinality of I_take is 1
(declare-sort I_take 0)
; rep: @uc_I_take_0
; cardinality of I_length is 3
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_drop is 1
(declare-sort I_drop 0)
; rep: @uc_I_drop_0
; cardinality of I_append is 1
(declare-sort I_append 0)
; rep: @uc_I_append_0
; cardinality of I_stooge2sort2 is 1
(declare-sort I_stooge2sort2 0)
; rep: @uc_I_stooge2sort2_0
; cardinality of I_stoogesort2 is 3
(declare-sort I_stoogesort2 0)
; rep: @uc_I_stoogesort2_0
; rep: @uc_I_stoogesort2_1
; rep: @uc_I_stoogesort2_2
; cardinality of I_stooge2sort1 is 1
(declare-sort I_stooge2sort1 0)
; rep: @uc_I_stooge2sort1_0
)

benchmarks-sk/sat/stoogesort2_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort2_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort2_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort2_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort2_inj_n03.smt2
60.00175s, ExitFailure 124

benchmarks-sk/sat/stoogesort2_inj_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort2_inj_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort2_inj_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort2_inj_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort2_nub_len_both_n02.smt2
1.05813s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first list) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) (cons Z nil)))
(define-fun twoThirds (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S (S Z))))))) (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) Z))
(define-fun third (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S (S Z))))))) (S (S (S (S (S (S (S (S (S Z))))))))) Z))
(define-fun take (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S Z))))))))) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil))) (cons Z (cons (S Z) nil)) nil))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) (cons Z nil))) (S (S Z)) Z)))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (= $x2 Z))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))))
(define-fun drop (($x1 Nat) ($x2 list)) list nil)
(define-fun deleteAll (($x1 Nat) ($x2 list)) list (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil) nil))
(define-fun nub (($x1 list)) list (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil) nil)))
(define-fun append (($x1 list) ($x2 list)) list nil)
(define-fun stooge2sort2 (($x1 list)) list nil)
(define-fun stoogesort2 (($x1 list)) list (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil)) nil)))
(define-fun stooge2sort1 (($x1 list)) list (ite (= $x1 (cons (S Z) nil)) (cons Z (cons Z (cons Z nil))) (ite (= $x1 (cons (S Z) (cons Z (cons Z nil)))) (cons (S (S Z)) (cons Z nil)) nil)))
; cardinality of I_twoThirds is 1
(declare-sort I_twoThirds 0)
; rep: @uc_I_twoThirds_0
; cardinality of I_third is 1
(declare-sort I_third 0)
; rep: @uc_I_third_0
; cardinality of I_take is 1
(declare-sort I_take 0)
; rep: @uc_I_take_0
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_drop is 1
(declare-sort I_drop 0)
; rep: @uc_I_drop_0
; cardinality of I_deleteAll is 3
(declare-sort I_deleteAll 0)
; rep: @uc_I_deleteAll_0
; rep: @uc_I_deleteAll_1
; rep: @uc_I_deleteAll_2
; cardinality of I_nub is 3
(declare-sort I_nub 0)
; rep: @uc_I_nub_0
; rep: @uc_I_nub_1
; rep: @uc_I_nub_2
; cardinality of I_append is 1
(declare-sort I_append 0)
; rep: @uc_I_append_0
; cardinality of I_stooge2sort2 is 1
(declare-sort I_stooge2sort2 0)
; rep: @uc_I_stooge2sort2_0
; cardinality of I_stoogesort2 is 3
(declare-sort I_stoogesort2 0)
; rep: @uc_I_stoogesort2_0
; rep: @uc_I_stoogesort2_1
; rep: @uc_I_stoogesort2_2
; cardinality of I_stooge2sort1 is 1
(declare-sort I_stooge2sort1 0)
; rep: @uc_I_stooge2sort1_0
)

benchmarks-sk/sat/stoogesort2_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort2_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort2_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort2_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort2_nub_len_both_n03.smt2
60.00179s, ExitFailure 124

benchmarks-sk/sat/stoogesort2_nub_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort2_nub_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort2_nub_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort2_nub_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort2_nub_n02.smt2
0.83925s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first list) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (cons Z nil)))
(define-fun twoThirds (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S (S Z))))))) (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) Z))
(define-fun third (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S (S Z))))))) (S (S (S (S (S (S (S (S (S Z))))))))) Z))
(define-fun take (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S Z))))))))) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (cons Z (cons (S Z) nil)) nil))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (S (S Z)) Z)))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) (= $x2 Z))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))))))
(define-fun drop (($x1 Nat) ($x2 list)) list nil)
(define-fun deleteAll (($x1 Nat) ($x2 list)) list (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil) nil))
(define-fun nub (($x1 list)) list (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil) nil)))
(define-fun append (($x1 list) ($x2 list)) list nil)
(define-fun stooge2sort2 (($x1 list)) list nil)
(define-fun stoogesort2 (($x1 list)) list (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) nil)))
(define-fun stooge2sort1 (($x1 list)) list (ite (= $x1 (cons (S Z) (cons Z (cons Z nil)))) (cons (S (S Z)) (cons Z nil)) (ite (= $x1 (cons (S Z) nil)) (cons Z (cons Z (cons Z nil))) nil)))
; cardinality of I_twoThirds is 1
(declare-sort I_twoThirds 0)
; rep: @uc_I_twoThirds_0
; cardinality of I_third is 1
(declare-sort I_third 0)
; rep: @uc_I_third_0
; cardinality of I_take is 1
(declare-sort I_take 0)
; rep: @uc_I_take_0
; cardinality of I_length is 3
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_drop is 1
(declare-sort I_drop 0)
; rep: @uc_I_drop_0
; cardinality of I_deleteAll is 3
(declare-sort I_deleteAll 0)
; rep: @uc_I_deleteAll_0
; rep: @uc_I_deleteAll_1
; rep: @uc_I_deleteAll_2
; cardinality of I_nub is 3
(declare-sort I_nub 0)
; rep: @uc_I_nub_0
; rep: @uc_I_nub_1
; rep: @uc_I_nub_2
; cardinality of I_append is 1
(declare-sort I_append 0)
; rep: @uc_I_append_0
; cardinality of I_stooge2sort2 is 1
(declare-sort I_stooge2sort2 0)
; rep: @uc_I_stooge2sort2_0
; cardinality of I_stoogesort2 is 3
(declare-sort I_stoogesort2 0)
; rep: @uc_I_stoogesort2_0
; rep: @uc_I_stoogesort2_1
; rep: @uc_I_stoogesort2_2
; cardinality of I_stooge2sort1 is 1
(declare-sort I_stooge2sort1 0)
; rep: @uc_I_stooge2sort1_0
)

benchmarks-sk/sat/stoogesort2_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort2_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort2_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort2_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort2_nub_n03.smt2
60.00166s, ExitFailure 124

benchmarks-sk/sat/stoogesort2_nub_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort2_nub_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort2_nub_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort2_nub_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort2_unq_len_both_n02.smt2
0.67205s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first list) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) (cons Z nil)))
(define-fun twoThirds (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S Z)))))) (S (S (S (S (S (S (S (S (S (S Z)))))))))) Z))
(define-fun third (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S Z)))))) (S (S (S (S (S (S (S (S Z)))))))) Z))
(define-fun take (($x1 Nat) ($x2 list)) list nil)
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))))) nil)) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) Z))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (= $x2 Z))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))))
(define-fun elem (($x1 Nat) ($x2 list)) Bool false)
(define-fun unique (($x1 list)) Bool true)
(define-fun drop (($x1 Nat) ($x2 list)) list nil)
(define-fun append (($x1 list) ($x2 list)) list nil)
(define-fun stooge2sort2 (($x1 list)) list nil)
(define-fun stoogesort2 (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) nil)) nil)))
(define-fun stooge2sort1 (($x1 list)) list (ite (= $x1 (cons (S Z) nil)) (cons Z (cons Z (cons Z nil))) (ite (= $x1 (cons Z (cons (S Z) nil))) (cons (S Z) (cons Z (cons Z nil))) nil)))
; cardinality of I_twoThirds is 1
(declare-sort I_twoThirds 0)
; rep: @uc_I_twoThirds_0
; cardinality of I_third is 1
(declare-sort I_third 0)
; rep: @uc_I_third_0
; cardinality of I_take is 1
(declare-sort I_take 0)
; rep: @uc_I_take_0
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
; cardinality of I_drop is 1
(declare-sort I_drop 0)
; rep: @uc_I_drop_0
; cardinality of I_append is 1
(declare-sort I_append 0)
; rep: @uc_I_append_0
; cardinality of I_stooge2sort2 is 1
(declare-sort I_stooge2sort2 0)
; rep: @uc_I_stooge2sort2_0
; cardinality of I_stoogesort2 is 3
(declare-sort I_stoogesort2 0)
; rep: @uc_I_stoogesort2_0
; rep: @uc_I_stoogesort2_1
; rep: @uc_I_stoogesort2_2
; cardinality of I_stooge2sort1 is 1
(declare-sort I_stooge2sort1 0)
; rep: @uc_I_stooge2sort1_0
)

benchmarks-sk/sat/stoogesort2_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort2_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort2_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort2_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort2_unq_len_both_n03.smt2
60.00182s, ExitFailure 124

benchmarks-sk/sat/stoogesort2_unq_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort2_unq_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort2_unq_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort2_unq_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort2_unq_n02.smt2
0.61515s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first list) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) (cons Z nil)))
(define-fun twoThirds (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S Z)))))) (S (S (S (S (S (S (S (S (S (S Z)))))))))) Z))
(define-fun third (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S Z)))))) (S (S (S (S (S (S (S (S Z)))))))) Z))
(define-fun take (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S Z)))))))) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))) nil))) (cons (S (S Z)) nil) nil))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))) nil)) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) Z))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))) (= $x2 Z))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))))))
(define-fun elem (($x1 Nat) ($x2 list)) Bool false)
(define-fun unique (($x1 list)) Bool true)
(define-fun drop (($x1 Nat) ($x2 list)) list nil)
(define-fun append (($x1 list) ($x2 list)) list nil)
(define-fun stooge2sort2 (($x1 list)) list nil)
(define-fun stoogesort2 (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) nil)) nil)))
(define-fun stooge2sort1 (($x1 list)) list (ite (= $x1 (cons (S Z) (cons Z (cons Z nil)))) (cons (S (S Z)) (cons Z nil)) (ite (= $x1 (cons (S Z) nil)) (cons Z (cons Z (cons Z nil))) nil)))
; cardinality of I_twoThirds is 1
(declare-sort I_twoThirds 0)
; rep: @uc_I_twoThirds_0
; cardinality of I_third is 1
(declare-sort I_third 0)
; rep: @uc_I_third_0
; cardinality of I_take is 1
(declare-sort I_take 0)
; rep: @uc_I_take_0
; cardinality of I_length is 3
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
; cardinality of I_drop is 1
(declare-sort I_drop 0)
; rep: @uc_I_drop_0
; cardinality of I_append is 1
(declare-sort I_append 0)
; rep: @uc_I_append_0
; cardinality of I_stooge2sort2 is 1
(declare-sort I_stooge2sort2 0)
; rep: @uc_I_stooge2sort2_0
; cardinality of I_stoogesort2 is 3
(declare-sort I_stoogesort2 0)
; rep: @uc_I_stoogesort2_0
; rep: @uc_I_stoogesort2_1
; rep: @uc_I_stoogesort2_2
; cardinality of I_stooge2sort1 is 1
(declare-sort I_stooge2sort1 0)
; rep: @uc_I_stooge2sort1_0
)

benchmarks-sk/sat/stoogesort2_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort2_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort2_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort2_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort2_unq_n03.smt2
60.00244s, ExitFailure 124

benchmarks-sk/sat/stoogesort2_unq_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort2_unq_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort2_unq_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort2_unq_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort_inj_len_both_n02.smt2
7.36356s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first list) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil)))
(define-fun third (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S (S (S Z)))))))) (S (S (S (S (S Z))))) Z))
(define-fun take (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (cons Z (cons (S Z) nil)) nil))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) Z))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (= $x2 Z))))
(define-fun drop (($x1 Nat) ($x2 list)) list nil)
(define-fun append (($x1 list) ($x2 list)) list (ite (and (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (= $x2 nil)) (cons Z (cons Z (cons Z (cons Z nil)))) nil))
(define-fun reverse (($x1 list)) list nil)
(define-fun stooge1sort2 (($x1 list)) list nil)
(define-fun stoogesort (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) nil)))
(define-fun stooge1sort1 (($x1 list)) list (ite (= $x1 (cons (S Z) nil)) (cons Z (cons Z (cons Z nil))) (ite (= $x1 (cons (S Z) (cons Z (cons Z nil)))) (cons (S (S Z)) (cons Z nil)) nil)))
; cardinality of I_third is 1
(declare-sort I_third 0)
; rep: @uc_I_third_0
; cardinality of I_take is 1
(declare-sort I_take 0)
; rep: @uc_I_take_0
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_drop is 1
(declare-sort I_drop 0)
; rep: @uc_I_drop_0
; cardinality of I_append is 1
(declare-sort I_append 0)
; rep: @uc_I_append_0
; cardinality of I_reverse is 1
(declare-sort I_reverse 0)
; rep: @uc_I_reverse_0
; cardinality of I_stooge1sort2 is 1
(declare-sort I_stooge1sort2 0)
; rep: @uc_I_stooge1sort2_0
; cardinality of I_stoogesort is 3
(declare-sort I_stoogesort 0)
; rep: @uc_I_stoogesort_0
; rep: @uc_I_stoogesort_1
; rep: @uc_I_stoogesort_2
; cardinality of I_stooge1sort1 is 1
(declare-sort I_stooge1sort1 0)
; rep: @uc_I_stooge1sort1_0
)

benchmarks-sk/sat/stoogesort_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort_inj_len_both_n03.smt2
60.00285s, ExitFailure 124

benchmarks-sk/sat/stoogesort_inj_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort_inj_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort_inj_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort_inj_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort_inj_n02.smt2
36.28538s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first list) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil)))
(define-fun third (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S (S (S Z)))))))) (S (S (S (S (S Z))))) Z))
(define-fun take (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (cons (S (S Z)) nil) nil))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) Z))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (= $x2 Z))))
(define-fun drop (($x1 Nat) ($x2 list)) list nil)
(define-fun append (($x1 list) ($x2 list)) list (ite (and (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (= $x2 nil)) (cons Z (cons Z (cons Z (cons Z nil)))) nil))
(define-fun reverse (($x1 list)) list nil)
(define-fun stooge1sort2 (($x1 list)) list nil)
(define-fun stoogesort (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) nil)))
(define-fun stooge1sort1 (($x1 list)) list (ite (= $x1 (cons Z (cons (S Z) nil))) (cons (S Z) (cons Z (cons Z nil))) (ite (= $x1 (cons (S Z) nil)) (cons Z (cons Z (cons Z nil))) nil)))
; cardinality of I_third is 1
(declare-sort I_third 0)
; rep: @uc_I_third_0
; cardinality of I_take is 1
(declare-sort I_take 0)
; rep: @uc_I_take_0
; cardinality of I_length is 3
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_drop is 1
(declare-sort I_drop 0)
; rep: @uc_I_drop_0
; cardinality of I_append is 1
(declare-sort I_append 0)
; rep: @uc_I_append_0
; cardinality of I_reverse is 1
(declare-sort I_reverse 0)
; rep: @uc_I_reverse_0
; cardinality of I_stooge1sort2 is 1
(declare-sort I_stooge1sort2 0)
; rep: @uc_I_stooge1sort2_0
; cardinality of I_stoogesort is 3
(declare-sort I_stoogesort 0)
; rep: @uc_I_stoogesort_0
; rep: @uc_I_stoogesort_1
; rep: @uc_I_stoogesort_2
; cardinality of I_stooge1sort1 is 1
(declare-sort I_stooge1sort1 0)
; rep: @uc_I_stooge1sort1_0
)

benchmarks-sk/sat/stoogesort_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort_inj_n03.smt2
60.00230s, ExitFailure 124

benchmarks-sk/sat/stoogesort_inj_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort_inj_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort_inj_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort_inj_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort_nub_len_both_n02.smt2
9.71026s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first list) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons Z nil)))
(define-fun third (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S (S (S (S Z))))))))) (S (S (S (S (S Z))))) Z))
(define-fun take (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S Z))))))))))) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (cons Z (cons (S Z) nil)) nil))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons Z nil))) (S (S Z)) Z)))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 Z))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))
(define-fun drop (($x1 Nat) ($x2 list)) list nil)
(define-fun deleteAll (($x1 Nat) ($x2 list)) list (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil) nil))
(define-fun nub (($x1 list)) list (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil) nil)))
(define-fun append (($x1 list) ($x2 list)) list (ite (and (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (= $x2 nil)) (cons Z (cons Z (cons Z (cons Z nil)))) nil))
(define-fun reverse (($x1 list)) list nil)
(define-fun stooge1sort2 (($x1 list)) list nil)
(define-fun stoogesort (($x1 list)) list (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) nil)))
(define-fun stooge1sort1 (($x1 list)) list (ite (= $x1 (cons (S Z) nil)) (cons Z (cons Z (cons Z nil))) (ite (= $x1 (cons (S Z) (cons Z (cons Z nil)))) (cons (S (S Z)) (cons Z nil)) nil)))
; cardinality of I_third is 1
(declare-sort I_third 0)
; rep: @uc_I_third_0
; cardinality of I_take is 1
(declare-sort I_take 0)
; rep: @uc_I_take_0
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_drop is 1
(declare-sort I_drop 0)
; rep: @uc_I_drop_0
; cardinality of I_deleteAll is 3
(declare-sort I_deleteAll 0)
; rep: @uc_I_deleteAll_0
; rep: @uc_I_deleteAll_1
; rep: @uc_I_deleteAll_2
; cardinality of I_nub is 3
(declare-sort I_nub 0)
; rep: @uc_I_nub_0
; rep: @uc_I_nub_1
; rep: @uc_I_nub_2
; cardinality of I_append is 1
(declare-sort I_append 0)
; rep: @uc_I_append_0
; cardinality of I_reverse is 1
(declare-sort I_reverse 0)
; rep: @uc_I_reverse_0
; cardinality of I_stooge1sort2 is 1
(declare-sort I_stooge1sort2 0)
; rep: @uc_I_stooge1sort2_0
; cardinality of I_stoogesort is 3
(declare-sort I_stoogesort 0)
; rep: @uc_I_stoogesort_0
; rep: @uc_I_stoogesort_1
; rep: @uc_I_stoogesort_2
; cardinality of I_stooge1sort1 is 1
(declare-sort I_stooge1sort1 0)
; rep: @uc_I_stooge1sort1_0
)

benchmarks-sk/sat/stoogesort_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort_nub_len_both_n03.smt2
60.00221s, ExitFailure 124

benchmarks-sk/sat/stoogesort_nub_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort_nub_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort_nub_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort_nub_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort_nub_n02.smt2
60.00195s, ExitFailure 124

benchmarks-sk/sat/stoogesort_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort_unq_len_both_n02.smt2
8.31696s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first list) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil)))
(define-fun third (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S Z)))))) (S (S (S (S (S (S (S (S Z)))))))) Z))
(define-fun take (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S Z)))))))) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) nil))) (cons (S (S Z)) (cons Z nil)) nil))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) nil)) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) Z))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) (= $x2 Z))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))
(define-fun elem (($x1 Nat) ($x2 list)) Bool false)
(define-fun unique (($x1 list)) Bool true)
(define-fun drop (($x1 Nat) ($x2 list)) list nil)
(define-fun append (($x1 list) ($x2 list)) list (ite (and (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) nil)) (= $x2 nil)) (cons Z (cons Z (cons Z (cons Z nil)))) nil))
(define-fun reverse (($x1 list)) list nil)
(define-fun stooge1sort2 (($x1 list)) list nil)
(define-fun stoogesort (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) nil)) nil)))
(define-fun stooge1sort1 (($x1 list)) list (ite (= $x1 (cons (S Z) nil)) (cons Z (cons Z (cons Z nil))) (ite (= $x1 (cons Z (cons (S Z) nil))) (cons (S Z) (cons Z (cons Z nil))) nil)))
; cardinality of I_third is 1
(declare-sort I_third 0)
; rep: @uc_I_third_0
; cardinality of I_take is 1
(declare-sort I_take 0)
; rep: @uc_I_take_0
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
; cardinality of I_drop is 1
(declare-sort I_drop 0)
; rep: @uc_I_drop_0
; cardinality of I_append is 1
(declare-sort I_append 0)
; rep: @uc_I_append_0
; cardinality of I_reverse is 1
(declare-sort I_reverse 0)
; rep: @uc_I_reverse_0
; cardinality of I_stooge1sort2 is 1
(declare-sort I_stooge1sort2 0)
; rep: @uc_I_stooge1sort2_0
; cardinality of I_stoogesort is 3
(declare-sort I_stoogesort 0)
; rep: @uc_I_stoogesort_0
; rep: @uc_I_stoogesort_1
; rep: @uc_I_stoogesort_2
; cardinality of I_stooge1sort1 is 1
(declare-sort I_stooge1sort1 0)
; rep: @uc_I_stooge1sort1_0
)

benchmarks-sk/sat/stoogesort_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort_unq_len_both_n03.smt2
60.00282s, ExitFailure 124

benchmarks-sk/sat/stoogesort_unq_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort_unq_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort_unq_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort_unq_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort_unq_n02.smt2
3.60810s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(declare-datatypes () ((Pair (Pair2 (first list) (second list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (cons Z nil)))
(define-fun third (($x1 Nat)) Nat (ite (= $x1 (S (S (S (S (S (S (S Z)))))))) (S (S (S (S (S Z))))) Z))
(define-fun take (($x1 Nat) ($x2 list)) list (ite (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil))) (cons (S (S Z)) nil) nil))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) Z))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) (= $x2 Z))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))))))
(define-fun elem (($x1 Nat) ($x2 list)) Bool false)
(define-fun unique (($x1 list)) Bool true)
(define-fun drop (($x1 Nat) ($x2 list)) list nil)
(define-fun append (($x1 list) ($x2 list)) list (ite (and (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) nil)) (= $x2 nil)) (cons (S (S Z)) (cons Z nil)) nil))
(define-fun reverse (($x1 list)) list nil)
(define-fun stooge1sort2 (($x1 list)) list nil)
(define-fun stoogesort (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (cons Z nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) nil)))
(define-fun stooge1sort1 (($x1 list)) list (ite (= $x1 (cons (S (S (S Z))) nil)) (cons Z (cons Z (cons Z (cons Z nil)))) (ite (= $x1 (cons (S Z) nil)) (cons Z (cons Z (cons Z nil))) nil)))
; cardinality of I_third is 1
(declare-sort I_third 0)
; rep: @uc_I_third_0
; cardinality of I_take is 1
(declare-sort I_take 0)
; rep: @uc_I_take_0
; cardinality of I_length is 3
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
; cardinality of I_drop is 1
(declare-sort I_drop 0)
; rep: @uc_I_drop_0
; cardinality of I_append is 1
(declare-sort I_append 0)
; rep: @uc_I_append_0
; cardinality of I_reverse is 1
(declare-sort I_reverse 0)
; rep: @uc_I_reverse_0
; cardinality of I_stooge1sort2 is 1
(declare-sort I_stooge1sort2 0)
; rep: @uc_I_stooge1sort2_0
; cardinality of I_stoogesort is 3
(declare-sort I_stoogesort 0)
; rep: @uc_I_stoogesort_0
; rep: @uc_I_stoogesort_1
; rep: @uc_I_stoogesort_2
; cardinality of I_stooge1sort1 is 1
(declare-sort I_stooge1sort1 0)
; rep: @uc_I_stooge1sort1_0
)

benchmarks-sk/sat/stoogesort_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

stoogesort_unq_n03.smt2
60.00239s, ExitFailure 124

benchmarks-sk/sat/stoogesort_unq_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/stoogesort_unq_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/stoogesort_unq_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/stoogesort_unq_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_balanced_unordered_height_02.smt2
0.35698s, ExitSuccess
sat
(model
; cardinality of sk_a is 1
(declare-sort sk_a 0)
; rep: @uc_sk_a_0
(declare-datatypes () ((Tree (B (B_0 Tree) (B_1 sk_a) (B_2 Tree)) (E))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(define-fun t () Tree (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E)))
(define-fun plus (($x1 Nat) ($x2 Nat)) Nat Z)
(define-fun max2 (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S Z)) (= $x2 (S Z))) (S Z) Z))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun height (($x1 Tree)) Nat (ite (= $x1 (B E @uc_sk_a_0 E)) (S Z) (ite (= $x1 (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E))) (S (S Z)) Z)))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun diff (($x1 Nat) ($x2 Nat)) Nat Z)
(define-fun bal (($x1 Tree)) Nat Z)
; cardinality of I_plus is 1
(declare-sort I_plus 0)
; rep: @uc_I_plus_0
; cardinality of I_max2 is 2
(declare-sort I_max2 0)
; rep: @uc_I_max2_0
; rep: @uc_I_max2_1
; cardinality of I_le is 1
(declare-sort I_le 0)
; rep: @uc_I_le_0
; cardinality of I_height is 3
(declare-sort I_height 0)
; rep: @uc_I_height_0
; rep: @uc_I_height_1
; rep: @uc_I_height_2
; cardinality of I_equal is 3
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; rep: @uc_I_equal_1
; rep: @uc_I_equal_2
; cardinality of I_diff is 2
(declare-sort I_diff 0)
; rep: @uc_I_diff_0
; rep: @uc_I_diff_1
; cardinality of I_bal is 3
(declare-sort I_bal 0)
; rep: @uc_I_bal_0
; rep: @uc_I_bal_1
; rep: @uc_I_bal_2
)

benchmarks-sk/sat/tree_balanced_unordered_height_02.smt2:1.12: No set-logic command was given before this point.
benchmarks-sk/sat/tree_balanced_unordered_height_02.smt2:1.12: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_balanced_unordered_height_02.smt2:1.12: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_balanced_unordered_height_02.smt2:1.12: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_balanced_unordered_height_03.smt2
14.05927s, ExitSuccess
sat
(model
; cardinality of sk_a is 1
(declare-sort sk_a 0)
; rep: @uc_sk_a_0
(declare-datatypes () ((Tree (B (B_0 Tree) (B_1 sk_a) (B_2 Tree)) (E))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(define-fun t () Tree (B (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E)) @uc_sk_a_0 (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E))))
(define-fun plus (($x1 Nat) ($x2 Nat)) Nat Z)
(define-fun max2 (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S Z)) (= $x2 (S Z))) (S Z) (ite (and (= $x1 (S (S Z))) (= $x2 (S (S Z)))) (S (S Z)) Z)))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun height (($x1 Tree)) Nat (ite (= $x1 (B E @uc_sk_a_0 E)) (S Z) (ite (= $x1 (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E))) (S (S Z)) (ite (= $x1 (B (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E)) @uc_sk_a_0 (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E)))) (S (S (S Z))) Z))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun diff (($x1 Nat) ($x2 Nat)) Nat Z)
(define-fun bal (($x1 Tree)) Nat Z)
; cardinality of I_plus is 1
(declare-sort I_plus 0)
; rep: @uc_I_plus_0
; cardinality of I_max2 is 3
(declare-sort I_max2 0)
; rep: @uc_I_max2_0
; rep: @uc_I_max2_1
; rep: @uc_I_max2_2
; cardinality of I_le is 1
(declare-sort I_le 0)
; rep: @uc_I_le_0
; cardinality of I_height is 4
(declare-sort I_height 0)
; rep: @uc_I_height_0
; rep: @uc_I_height_1
; rep: @uc_I_height_2
; rep: @uc_I_height_3
; cardinality of I_equal is 4
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; rep: @uc_I_equal_1
; rep: @uc_I_equal_2
; rep: @uc_I_equal_3
; cardinality of I_diff is 3
(declare-sort I_diff 0)
; rep: @uc_I_diff_0
; rep: @uc_I_diff_1
; rep: @uc_I_diff_2
; cardinality of I_bal is 4
(declare-sort I_bal 0)
; rep: @uc_I_bal_0
; rep: @uc_I_bal_1
; rep: @uc_I_bal_2
; rep: @uc_I_bal_3
)

benchmarks-sk/sat/tree_balanced_unordered_height_03.smt2:1.12: No set-logic command was given before this point.
benchmarks-sk/sat/tree_balanced_unordered_height_03.smt2:1.12: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_balanced_unordered_height_03.smt2:1.12: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_balanced_unordered_height_03.smt2:1.12: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_balanced_unordered_height_04.smt2
60.00140s, ExitFailure 124

benchmarks-sk/sat/tree_balanced_unordered_height_04.smt2:1.12: No set-logic command was given before this point.
benchmarks-sk/sat/tree_balanced_unordered_height_04.smt2:1.12: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_balanced_unordered_height_04.smt2:1.12: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_balanced_unordered_height_04.smt2:1.12: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_balanced_unordered_size_02.smt2
0.75131s, ExitSuccess
sat
(model
; cardinality of sk_a is 1
(declare-sort sk_a 0)
; rep: @uc_sk_a_0
(declare-datatypes () ((Tree (B (B_0 Tree) (B_1 sk_a) (B_2 Tree)) (E))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(define-fun t () Tree (B (B E @uc_sk_a_0 E) @uc_sk_a_0 E))
(define-fun plus (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) (ite (and (= $x1 (S Z)) (= $x2 Z)) (S Z) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S Z)))))))))) (= $x2 Z)) (S (S (S (S (S (S (S Z))))))) Z))))
(define-fun size (($x1 Tree)) Nat (ite (= $x1 (B E @uc_sk_a_0 E)) (S Z) (ite (= $x1 (B (B E @uc_sk_a_0 E) @uc_sk_a_0 E)) (S (S Z)) (ite (= $x1 (B E @uc_sk_a_0 (B E @uc_sk_a_0 (B E @uc_sk_a_0 E)))) (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (ite (= $x1 (B E @uc_sk_a_1 (B E @uc_sk_a_0 E))) (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) Z)))))
(define-fun max2 (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S (S (S (S (S Z)))))) (= $x2 (S (S (S (S Z)))))) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) Z))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun height (($x1 Tree)) Nat (ite (= $x1 (B E @uc_sk_a_0 E)) (S Z) (ite (= $x1 (B E @uc_sk_a_0 (B E @uc_sk_a_0 (B E @uc_sk_a_0 E)))) (S (S (S (S (S Z))))) (ite (= $x1 (B E @uc_sk_a_1 (B E @uc_sk_a_0 E))) (S (S (S (S Z)))) Z))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun diff (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S Z)) (= $x2 Z)) (S Z) (ite (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S Z))))))))))) (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) Z)))
(define-fun bal (($x1 Tree)) Nat (ite (= $x1 (B (B E @uc_sk_a_0 E) @uc_sk_a_0 E)) (S Z) Z))
; cardinality of I_plus is 2
(declare-sort I_plus 0)
; rep: @uc_I_plus_0
; rep: @uc_I_plus_1
; cardinality of I_size is 3
(declare-sort I_size 0)
; rep: @uc_I_size_0
; rep: @uc_I_size_1
; rep: @uc_I_size_2
; cardinality of I_max2 is 1
(declare-sort I_max2 0)
; rep: @uc_I_max2_0
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_height is 2
(declare-sort I_height 0)
; rep: @uc_I_height_0
; rep: @uc_I_height_1
; cardinality of I_equal is 3
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; rep: @uc_I_equal_1
; rep: @uc_I_equal_2
; cardinality of I_diff is 2
(declare-sort I_diff 0)
; rep: @uc_I_diff_0
; rep: @uc_I_diff_1
; cardinality of I_bal is 3
(declare-sort I_bal 0)
; rep: @uc_I_bal_0
; rep: @uc_I_bal_1
; rep: @uc_I_bal_2
)

benchmarks-sk/sat/tree_balanced_unordered_size_02.smt2:1.12: No set-logic command was given before this point.
benchmarks-sk/sat/tree_balanced_unordered_size_02.smt2:1.12: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_balanced_unordered_size_02.smt2:1.12: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_balanced_unordered_size_02.smt2:1.12: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_balanced_unordered_size_03.smt2
60.00228s, ExitFailure 124

benchmarks-sk/sat/tree_balanced_unordered_size_03.smt2:1.12: No set-logic command was given before this point.
benchmarks-sk/sat/tree_balanced_unordered_size_03.smt2:1.12: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_balanced_unordered_size_03.smt2:1.12: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_balanced_unordered_size_03.smt2:1.12: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_enum_members_02.smt2
60.00160s, ExitFailure 124

benchmarks-sk/sat/tree_enum_members_02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tree_enum_members_02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_enum_members_02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_enum_members_02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_even_members_02.smt2
60.00220s, ExitFailure 124

benchmarks-sk/sat/tree_even_members_02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tree_even_members_02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_even_members_02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_even_members_02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_even_members_odd_nonmembers_02.smt2
60.00187s, ExitFailure 124

benchmarks-sk/sat/tree_even_members_odd_nonmembers_02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tree_even_members_odd_nonmembers_02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_even_members_odd_nonmembers_02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_even_members_odd_nonmembers_02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_perfect_height_02.smt2
6.94180s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Tree (B (B_0 Tree) (B_1 Nat) (B_2 Tree)) (E))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun t () Tree (B (B E Z E) (S Z) (B E (S (S Z)) E)))
(define-fun max2 (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S Z)) (= $x2 (S Z))) (S Z) (ite (and (= $x1 (S (S (S Z)))) (= $x2 (S (S (S Z))))) (S (S (S (S (S (S (S (S Z)))))))) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))))))) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))))))))) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))))))) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) Z)))))
(define-fun lt (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun uniqsorted (($x1 list)) Bool true)
(define-fun height (($x1 Tree)) Nat (ite (= $x1 (B E Z E)) (S Z) (ite (= $x1 (B E (S (S Z)) E)) (S Z) (ite (= $x1 (B (B E Z E) (S Z) (B E (S (S Z)) E))) (S (S Z)) (ite (= $x1 (B (B E Z (B E Z E)) Z (B E Z E))) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))))) (ite (= $x1 (B (B (B E Z E) Z E) Z E)) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))))))) (ite (= $x1 (B E (S Z) (B E Z E))) (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) (ite (= $x1 (B (B E Z E) (S Z) E)) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) Z))))))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun perfect (($x1 Tree)) Bool true)
(define-fun append (($x1 list) ($x2 list)) list (ite (and (= $x1 (cons (S Z) nil)) (= $x2 (cons (S (S Z)) nil))) (cons (S Z) (cons (S (S Z)) nil)) (ite (and (= $x1 (cons Z (cons (S Z) nil))) (= $x2 (cons (S (S Z)) nil))) (cons Z (cons (S Z) (cons (S (S Z)) nil))) (ite (and (= $x1 (cons Z nil)) (= $x2 (cons (S Z) nil))) (cons Z (cons (S Z) nil)) (ite (and (= $x1 (cons (S Z) (cons Z (cons Z nil)))) (= $x2 (cons Z nil))) (cons Z (cons Z (cons Z nil))) (ite (and (= $x1 (cons (S Z) (cons Z (cons Z nil)))) (= $x2 (cons (S (S Z)) nil))) (cons (S Z) (cons (S Z) nil)) (ite (and (= $x1 (cons (S (S Z)) nil)) (= $x2 nil)) (cons (S (S Z)) nil) (ite (and (= $x1 nil) (= $x2 (cons (S (S Z)) nil))) (cons (S (S Z)) nil) (ite (and (= $x1 (cons Z nil)) (= $x2 nil)) (cons Z nil) (ite (and (= $x1 nil) (= $x2 (cons Z nil))) (cons Z nil) (ite (and (= $x1 nil) (= $x2 (cons (S Z) nil))) (cons (S Z) nil) nil)))))))))))
(define-fun flatten (($x1 Tree)) list (ite (= $x1 (B (B E Z E) (S Z) (B E (S (S Z)) E))) (cons Z (cons (S Z) (cons (S (S Z)) nil))) (ite (= $x1 (B E (S (S Z)) E)) (cons (S (S Z)) nil) (ite (= $x1 (B E Z E)) (cons Z nil) nil))))
; cardinality of I_max2 is 2
(declare-sort I_max2 0)
; rep: @uc_I_max2_0
; rep: @uc_I_max2_1
; cardinality of I_lt is 2
(declare-sort I_lt 0)
; rep: @uc_I_lt_0
; rep: @uc_I_lt_1
; cardinality of I_uniqsorted is 3
(declare-sort I_uniqsorted 0)
; rep: @uc_I_uniqsorted_0
; rep: @uc_I_uniqsorted_1
; rep: @uc_I_uniqsorted_2
; cardinality of I_height is 4
(declare-sort I_height 0)
; rep: @uc_I_height_0
; rep: @uc_I_height_1
; rep: @uc_I_height_2
; rep: @uc_I_height_3
; cardinality of I_equal is 3
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; rep: @uc_I_equal_1
; rep: @uc_I_equal_2
; cardinality of I_perfect is 4
(declare-sort I_perfect 0)
; rep: @uc_I_perfect_0
; rep: @uc_I_perfect_1
; rep: @uc_I_perfect_2
; rep: @uc_I_perfect_3
; cardinality of I_append is 9
(declare-sort I_append 0)
; rep: @uc_I_append_0
; rep: @uc_I_append_1
; rep: @uc_I_append_2
; rep: @uc_I_append_3
; rep: @uc_I_append_4
; rep: @uc_I_append_5
; rep: @uc_I_append_6
; rep: @uc_I_append_7
; rep: @uc_I_append_8
; cardinality of I_flatten is 4
(declare-sort I_flatten 0)
; rep: @uc_I_flatten_0
; rep: @uc_I_flatten_1
; rep: @uc_I_flatten_2
; rep: @uc_I_flatten_3
)

benchmarks-sk/sat/tree_perfect_height_02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tree_perfect_height_02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_perfect_height_02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_perfect_height_02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_perfect_height_03.smt2
60.00185s, ExitFailure 124

benchmarks-sk/sat/tree_perfect_height_03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tree_perfect_height_03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_perfect_height_03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_perfect_height_03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_perfect_size_03.smt2
60.00204s, ExitFailure 124

benchmarks-sk/sat/tree_perfect_size_03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tree_perfect_size_03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_perfect_size_03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_perfect_size_03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_perfect_size_even_pred_03.smt2
60.00213s, ExitFailure 124

benchmarks-sk/sat/tree_perfect_size_even_pred_03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tree_perfect_size_even_pred_03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_perfect_size_even_pred_03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_perfect_size_even_pred_03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_perfect_unordered_height_02.smt2
0.32246s, ExitSuccess
sat
(model
; cardinality of sk_a is 1
(declare-sort sk_a 0)
; rep: @uc_sk_a_0
(declare-datatypes () ((Tree (B (B_0 Tree) (B_1 sk_a) (B_2 Tree)) (E))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(define-fun t () Tree (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E)))
(define-fun max2 (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S Z)) (= $x2 (S Z))) (S Z) (ite (and (= $x1 (S (S (S (S Z))))) (= $x2 (S (S (S (S Z)))))) (S (S (S (S (S (S Z)))))) Z)))
(define-fun height (($x1 Tree)) Nat (ite (= $x1 (B E @uc_sk_a_0 E)) (S Z) (ite (= $x1 (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E))) (S (S Z)) Z)))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun perfect (($x1 Tree)) Bool true)
; cardinality of I_max2 is 2
(declare-sort I_max2 0)
; rep: @uc_I_max2_0
; rep: @uc_I_max2_1
; cardinality of I_height is 3
(declare-sort I_height 0)
; rep: @uc_I_height_0
; rep: @uc_I_height_1
; rep: @uc_I_height_2
; cardinality of I_equal is 3
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; rep: @uc_I_equal_1
; rep: @uc_I_equal_2
; cardinality of I_perfect is 3
(declare-sort I_perfect 0)
; rep: @uc_I_perfect_0
; rep: @uc_I_perfect_1
; rep: @uc_I_perfect_2
)

benchmarks-sk/sat/tree_perfect_unordered_height_02.smt2:1.12: No set-logic command was given before this point.
benchmarks-sk/sat/tree_perfect_unordered_height_02.smt2:1.12: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_perfect_unordered_height_02.smt2:1.12: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_perfect_unordered_height_02.smt2:1.12: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_perfect_unordered_height_03.smt2
7.98629s, ExitSuccess
sat
(model
; cardinality of sk_a is 1
(declare-sort sk_a 0)
; rep: @uc_sk_a_0
(declare-datatypes () ((Tree (B (B_0 Tree) (B_1 sk_a) (B_2 Tree)) (E))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(define-fun t () Tree (B (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E)) @uc_sk_a_0 (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E))))
(define-fun max2 (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S Z)) (= $x2 (S Z))) (S Z) (ite (and (= $x1 (S (S Z))) (= $x2 (S (S Z)))) (S (S Z)) Z)))
(define-fun height (($x1 Tree)) Nat (ite (= $x1 (B E @uc_sk_a_0 E)) (S Z) (ite (= $x1 (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E))) (S (S Z)) (ite (= $x1 (B (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E)) @uc_sk_a_0 (B (B E @uc_sk_a_0 E) @uc_sk_a_0 (B E @uc_sk_a_0 E)))) (S (S (S Z))) Z))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun perfect (($x1 Tree)) Bool true)
; cardinality of I_max2 is 3
(declare-sort I_max2 0)
; rep: @uc_I_max2_0
; rep: @uc_I_max2_1
; rep: @uc_I_max2_2
; cardinality of I_height is 4
(declare-sort I_height 0)
; rep: @uc_I_height_0
; rep: @uc_I_height_1
; rep: @uc_I_height_2
; rep: @uc_I_height_3
; cardinality of I_equal is 4
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; rep: @uc_I_equal_1
; rep: @uc_I_equal_2
; rep: @uc_I_equal_3
; cardinality of I_perfect is 4
(declare-sort I_perfect 0)
; rep: @uc_I_perfect_0
; rep: @uc_I_perfect_1
; rep: @uc_I_perfect_2
; rep: @uc_I_perfect_3
)

benchmarks-sk/sat/tree_perfect_unordered_height_03.smt2:1.12: No set-logic command was given before this point.
benchmarks-sk/sat/tree_perfect_unordered_height_03.smt2:1.12: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_perfect_unordered_height_03.smt2:1.12: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_perfect_unordered_height_03.smt2:1.12: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_perfect_unordered_height_04.smt2
60.00240s, ExitFailure 124

benchmarks-sk/sat/tree_perfect_unordered_height_04.smt2:1.12: No set-logic command was given before this point.
benchmarks-sk/sat/tree_perfect_unordered_height_04.smt2:1.12: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_perfect_unordered_height_04.smt2:1.12: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_perfect_unordered_height_04.smt2:1.12: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_perfect_unordered_size_03.smt2
60.00197s, ExitFailure 124

benchmarks-sk/sat/tree_perfect_unordered_size_03.smt2:1.12: No set-logic command was given before this point.
benchmarks-sk/sat/tree_perfect_unordered_size_03.smt2:1.12: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_perfect_unordered_size_03.smt2:1.12: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_perfect_unordered_size_03.smt2:1.12: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_size_even_pred_02.smt2
6.42229s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Tree (B (B_0 Tree) (B_1 Nat) (B_2 Tree)) (E))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun t () Tree (B (B E Z E) (S (S Z)) E))
(define-fun plus (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S Z)) (= $x2 Z)) (S Z) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))))) (= $x2 Z)) (S (S (S (S (S (S (S (S Z)))))))) Z)))
(define-fun size (($x1 Tree)) Nat (ite (= $x1 (B E Z E)) (S Z) (ite (= $x1 (B (B E Z E) (S (S Z)) E)) (S (S Z)) Z)))
(define-fun max2 (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S (S (S (S (S Z)))))) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))) (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) Z))
(define-fun lt (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun uniqsorted (($x1 list)) Bool true)
(define-fun le (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun height (($x1 Tree)) Nat (ite (= $x1 (B E Z E)) (S Z) (ite (= $x1 (B E Z (B E Z (B E Z E)))) (S (S (S (S (S Z))))) (ite (= $x1 (B E (S Z) E)) (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) Z))))
(define-fun even (($x1 Nat)) Bool true)
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun diff (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S Z)) (= $x2 Z)) (S Z) (ite (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))))) (S (S (S (S (S (S (S (S (S (S Z)))))))))) Z)))
(define-fun bal (($x1 Tree)) Nat (ite (= $x1 (B (B E Z E) (S (S Z)) E)) (S Z) Z))
(define-fun append (($x1 list) ($x2 list)) list (ite (and (= $x1 (cons Z nil)) (= $x2 (cons (S (S Z)) nil))) (cons Z (cons (S (S Z)) nil)) (ite (and (= $x1 (cons (S Z) nil)) (= $x2 (cons (S (S Z)) nil))) (cons (S Z) (cons Z (cons Z nil))) (ite (and (= $x1 (cons (S Z) nil)) (= $x2 (cons Z nil))) (cons Z (cons (S Z) nil)) (ite (and (= $x1 (cons Z (cons (S (S Z)) nil))) (= $x2 nil)) (cons Z (cons (S (S Z)) nil)) (ite (and (= $x1 nil) (= $x2 (cons Z nil))) (cons Z nil) (ite (and (= $x1 (cons Z nil)) (= $x2 nil)) (cons Z nil) (ite (and (= $x1 (cons (S (S Z)) nil)) (= $x2 nil)) (cons (S (S Z)) nil) (ite (and (= $x1 nil) (= $x2 (cons (S (S Z)) nil))) (cons (S (S Z)) nil) nil)))))))))
(define-fun flatten (($x1 Tree)) list (ite (= $x1 (B (B E Z E) (S (S Z)) E)) (cons Z (cons (S (S Z)) nil)) (ite (= $x1 (B E Z E)) (cons Z nil) nil)))
(define-fun allEven (($x1 Tree)) Bool true)
; cardinality of I_plus is 2
(declare-sort I_plus 0)
; rep: @uc_I_plus_0
; rep: @uc_I_plus_1
; cardinality of I_size is 3
(declare-sort I_size 0)
; rep: @uc_I_size_0
; rep: @uc_I_size_1
; rep: @uc_I_size_2
; cardinality of I_max2 is 1
(declare-sort I_max2 0)
; rep: @uc_I_max2_0
; cardinality of I_lt is 1
(declare-sort I_lt 0)
; rep: @uc_I_lt_0
; cardinality of I_uniqsorted is 2
(declare-sort I_uniqsorted 0)
; rep: @uc_I_uniqsorted_0
; rep: @uc_I_uniqsorted_1
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_height is 2
(declare-sort I_height 0)
; rep: @uc_I_height_0
; rep: @uc_I_height_1
; cardinality of I_even is 2
(declare-sort I_even 0)
; rep: @uc_I_even_0
; rep: @uc_I_even_1
; cardinality of I_equal is 3
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; rep: @uc_I_equal_1
; rep: @uc_I_equal_2
; cardinality of I_diff is 2
(declare-sort I_diff 0)
; rep: @uc_I_diff_0
; rep: @uc_I_diff_1
; cardinality of I_bal is 3
(declare-sort I_bal 0)
; rep: @uc_I_bal_0
; rep: @uc_I_bal_1
; rep: @uc_I_bal_2
; cardinality of I_append is 7
(declare-sort I_append 0)
; rep: @uc_I_append_0
; rep: @uc_I_append_1
; rep: @uc_I_append_2
; rep: @uc_I_append_3
; rep: @uc_I_append_4
; rep: @uc_I_append_5
; rep: @uc_I_append_6
; cardinality of I_flatten is 3
(declare-sort I_flatten 0)
; rep: @uc_I_flatten_0
; rep: @uc_I_flatten_1
; rep: @uc_I_flatten_2
; cardinality of I_allEven is 3
(declare-sort I_allEven 0)
; rep: @uc_I_allEven_0
; rep: @uc_I_allEven_1
; rep: @uc_I_allEven_2
)

benchmarks-sk/sat/tree_size_even_pred_02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tree_size_even_pred_02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_size_even_pred_02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_size_even_pred_02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_size_even_pred_03.smt2
60.00188s, ExitFailure 124

benchmarks-sk/sat/tree_size_even_pred_03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tree_size_even_pred_03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_size_even_pred_03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_size_even_pred_03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_size_odd_nonmembers_02.smt2
37.83071s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Tree (B (B_0 Tree) (B_1 Nat) (B_2 Tree)) (E))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun t () Tree (B (B E Z E) (S (S Z)) E))
(define-fun plus (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) (ite (and (= $x1 (S Z)) (= $x2 Z)) (S Z) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) (= $x2 Z)) (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) Z))))
(define-fun size (($x1 Tree)) Nat (ite (= $x1 (B E Z E)) (S Z) (ite (= $x1 (B (B E Z E) (S (S Z)) E)) (S (S Z)) (ite (= $x1 (B (B E Z E) Z (B E Z E))) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) (ite (= $x1 (B (B E Z (B E Z E)) Z E)) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) Z)))))
(define-fun max2 (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S (S (S (S (S (S (S (S Z))))))))) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))))))) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))))) Z))
(define-fun lt (($x1 Nat) ($x2 Nat)) Bool (ite (and (= $x1 (S (S (S Z)))) (= $x2 (S (S Z)))) false (ite (and (= $x1 (S (S Z))) (= $x2 (S Z))) false (not (and (= $x1 (S Z)) (= $x2 Z))))))
(define-fun uniqsorted (($x1 list)) Bool true)
(define-fun le (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun height (($x1 Tree)) Nat (ite (= $x1 (B E Z E)) (S Z) (ite (= $x1 (B (B E Z E) Z (B E Z E))) (S (S (S (S (S (S (S (S Z)))))))) (ite (= $x1 (B (B E Z (B E Z E)) Z E)) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))))) Z))))
(define-fun gt (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun member2 (($x1 Nat) ($x2 Tree)) Bool (ite (and (= $x1 (S (S (S Z)))) (= $x2 (B (B E Z E) (S (S Z)) E))) false (ite (and (= $x1 (S Z)) (= $x2 (B (B E Z E) (S (S Z)) E))) false (ite (and (= $x1 (S Z)) (= $x2 (B E Z E))) false (not (and (= $x1 (S (S (S Z)))) (= $x2 E)))))))
(define-fun notMembers (($x1 list) ($x2 Tree)) Bool true)
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool true)
(define-fun double (($x1 Nat)) Nat (ite (= $x1 (S Z)) (S (S Z)) Z))
(define-fun odds (($x1 Nat)) list (ite (= $x1 (S Z)) (cons (S Z) nil) (ite (= $x1 (S (S Z))) (cons (S (S (S Z))) (cons (S Z) nil)) nil)))
(define-fun diff (($x1 Nat) ($x2 Nat)) Nat (ite (and (= $x1 (S Z)) (= $x2 Z)) (S Z) (ite (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) Z)))
(define-fun bal (($x1 Tree)) Nat (ite (= $x1 (B (B E Z E) (S (S Z)) E)) (S Z) Z))
(define-fun append (($x1 list) ($x2 list)) list (ite (and (= $x1 (cons Z nil)) (= $x2 (cons (S (S Z)) nil))) (cons Z (cons (S (S Z)) nil)) (ite (and (= $x1 (cons Z (cons (S Z) nil))) (= $x2 (cons Z nil))) (cons (S (S Z)) (cons Z nil)) (ite (and (= $x1 (cons Z (cons (S Z) nil))) (= $x2 (cons (S (S Z)) nil))) (cons Z (cons Z (cons Z (cons Z nil)))) (ite (and (= $x1 (cons Z (cons (S (S Z)) nil))) (= $x2 nil)) (cons Z (cons (S (S Z)) nil)) (ite (and (= $x1 nil) (= $x2 (cons (S (S Z)) nil))) (cons (S (S Z)) nil) (ite (and (= $x1 (cons (S (S Z)) nil)) (= $x2 nil)) (cons (S (S Z)) nil) (ite (and (= $x1 nil) (= $x2 (cons Z nil))) (cons Z nil) (ite (and (= $x1 (cons Z nil)) (= $x2 nil)) (cons Z nil) nil)))))))))
(define-fun flatten (($x1 Tree)) list (ite (= $x1 (B (B E Z E) (S (S Z)) E)) (cons Z (cons (S (S Z)) nil)) (ite (= $x1 (B E Z E)) (cons Z nil) nil)))
; cardinality of I_plus is 2
(declare-sort I_plus 0)
; rep: @uc_I_plus_0
; rep: @uc_I_plus_1
; cardinality of I_size is 3
(declare-sort I_size 0)
; rep: @uc_I_size_0
; rep: @uc_I_size_1
; rep: @uc_I_size_2
; cardinality of I_max2 is 1
(declare-sort I_max2 0)
; rep: @uc_I_max2_0
; cardinality of I_lt is 6
(declare-sort I_lt 0)
; rep: @uc_I_lt_0
; rep: @uc_I_lt_1
; rep: @uc_I_lt_2
; rep: @uc_I_lt_3
; rep: @uc_I_lt_4
; rep: @uc_I_lt_5
; cardinality of I_uniqsorted is 2
(declare-sort I_uniqsorted 0)
; rep: @uc_I_uniqsorted_0
; rep: @uc_I_uniqsorted_1
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_height is 2
(declare-sort I_height 0)
; rep: @uc_I_height_0
; rep: @uc_I_height_1
; cardinality of I_gt is 3
(declare-sort I_gt 0)
; rep: @uc_I_gt_0
; rep: @uc_I_gt_1
; rep: @uc_I_gt_2
; cardinality of I_member2 is 5
(declare-sort I_member2 0)
; rep: @uc_I_member2_0
; rep: @uc_I_member2_1
; rep: @uc_I_member2_2
; rep: @uc_I_member2_3
; rep: @uc_I_member2_4
; cardinality of I_notMembers is 3
(declare-sort I_notMembers 0)
; rep: @uc_I_notMembers_0
; rep: @uc_I_notMembers_1
; rep: @uc_I_notMembers_2
; cardinality of I_equal is 3
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; rep: @uc_I_equal_1
; rep: @uc_I_equal_2
; cardinality of I_double is 2
(declare-sort I_double 0)
; rep: @uc_I_double_0
; rep: @uc_I_double_1
; cardinality of I_odds is 3
(declare-sort I_odds 0)
; rep: @uc_I_odds_0
; rep: @uc_I_odds_1
; rep: @uc_I_odds_2
; cardinality of I_diff is 2
(declare-sort I_diff 0)
; rep: @uc_I_diff_0
; rep: @uc_I_diff_1
; cardinality of I_bal is 3
(declare-sort I_bal 0)
; rep: @uc_I_bal_0
; rep: @uc_I_bal_1
; rep: @uc_I_bal_2
; cardinality of I_append is 7
(declare-sort I_append 0)
; rep: @uc_I_append_0
; rep: @uc_I_append_1
; rep: @uc_I_append_2
; rep: @uc_I_append_3
; rep: @uc_I_append_4
; rep: @uc_I_append_5
; rep: @uc_I_append_6
; cardinality of I_flatten is 3
(declare-sort I_flatten 0)
; rep: @uc_I_flatten_0
; rep: @uc_I_flatten_1
; rep: @uc_I_flatten_2
)

benchmarks-sk/sat/tree_size_odd_nonmembers_02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tree_size_odd_nonmembers_02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_size_odd_nonmembers_02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_size_odd_nonmembers_02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tree_size_odd_nonmembers_03.smt2
60.00250s, ExitFailure 124

benchmarks-sk/sat/tree_size_odd_nonmembers_03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tree_size_odd_nonmembers_03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tree_size_odd_nonmembers_03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tree_size_odd_nonmembers_03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tsort_inj_len_both_n02.smt2
3.32190s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Tree (TNode (TNode_0 Tree) (TNode_1 Nat) (TNode_2 Tree)) (TNil))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons Z nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons (S Z) (cons Z nil))) (S (S (S (S (S (S (S Z))))))) Z))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 Z))))
(define-fun flatten (($x1 Tree) ($x2 list)) list (ite (and (= $x1 (TNode TNil Z TNil)) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (and (= $x1 TNil) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil) (ite (and (= $x1 (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) TNil)) (= $x2 nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil) (ite (and (= $x1 (TNode TNil Z (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) TNil))) (= $x2 nil)) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (and (= $x1 TNil) (= $x2 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (ite (and (= $x1 (TNode (TNode TNil Z TNil) (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) TNil)) (= $x2 nil)) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) nil)))))))
(define-fun add (($x1 Nat) ($x2 Tree)) Tree (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 (TNode TNil Z TNil))) (TNode TNil Z (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) TNil)) (ite (and (= $x1 Z) (= $x2 (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) TNil))) (TNode (TNode TNil Z TNil) (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) TNil) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))) (= $x2 TNil)) (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) TNil) (ite (and (= $x1 Z) (= $x2 (TNode (TNode TNil Z (TNode TNil Z TNil)) Z TNil))) (TNode (TNode TNil Z TNil) Z TNil) (ite (and (= $x1 Z) (= $x2 (TNode (TNode TNil Z TNil) Z (TNode TNil Z TNil)))) (TNode TNil Z (TNode TNil Z TNil)) (TNode TNil Z TNil)))))))
(define-fun toTree (($x1 list)) Tree (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil))) (TNode (TNode TNil Z TNil) (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) TNil) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) (cons Z nil))) (TNode TNil Z (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) TNil)) (ite (= $x1 (cons Z nil)) (TNode TNil Z TNil) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) nil)) (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))) TNil) TNil)))))
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_flatten is 7
(declare-sort I_flatten 0)
; rep: @uc_I_flatten_0
; rep: @uc_I_flatten_1
; rep: @uc_I_flatten_2
; rep: @uc_I_flatten_3
; rep: @uc_I_flatten_4
; rep: @uc_I_flatten_5
; rep: @uc_I_flatten_6
; cardinality of I_add is 4
(declare-sort I_add 0)
; rep: @uc_I_add_0
; rep: @uc_I_add_1
; rep: @uc_I_add_2
; rep: @uc_I_add_3
; cardinality of I_toTree is 5
(declare-sort I_toTree 0)
; rep: @uc_I_toTree_0
; rep: @uc_I_toTree_1
; rep: @uc_I_toTree_2
; rep: @uc_I_toTree_3
; rep: @uc_I_toTree_4
)

benchmarks-sk/sat/tsort_inj_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tsort_inj_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tsort_inj_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tsort_inj_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tsort_inj_len_both_n03.smt2
60.00176s, ExitFailure 124

benchmarks-sk/sat/tsort_inj_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tsort_inj_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tsort_inj_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tsort_inj_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tsort_inj_n02.smt2
60.00146s, ExitFailure 124

benchmarks-sk/sat/tsort_inj_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tsort_inj_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tsort_inj_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tsort_inj_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tsort_nub_len_both_n02.smt2
6.85286s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Tree (TNode (TNode_0 Tree) (TNode_1 Nat) (TNode_2 Tree)) (TNil))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) (cons Z nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) (cons Z nil))) (S (S Z)) Z)))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) (= $x2 Z))))
(define-fun flatten (($x1 Tree) ($x2 list)) list (ite (and (= $x1 (TNode TNil Z TNil)) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil)) (ite (and (= $x1 TNil) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil) (ite (and (= $x1 (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) TNil)) (= $x2 nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil) (ite (and (= $x1 (TNode TNil Z (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) TNil))) (= $x2 nil)) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil)) (ite (and (= $x1 TNil) (= $x2 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil)))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil)) (ite (and (= $x1 (TNode (TNode TNil Z TNil) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) TNil)) (= $x2 nil)) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil)) nil)))))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))))
(define-fun deleteAll (($x1 Nat) ($x2 list)) list (ite (and (= $x1 Z) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil) nil))
(define-fun nub (($x1 list)) list (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil)) nil)))
(define-fun add (($x1 Nat) ($x2 Tree)) Tree (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) (= $x2 (TNode TNil Z TNil))) (TNode TNil Z (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) TNil)) (ite (and (= $x1 Z) (= $x2 (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) TNil))) (TNode (TNode TNil Z TNil) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) TNil) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) (= $x2 TNil)) (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) TNil) (ite (and (= $x1 Z) (= $x2 (TNode TNil (S (S Z)) TNil))) (TNode (TNode TNil Z TNil) Z TNil) (ite (and (= $x1 Z) (= $x2 (TNode (TNode TNil Z TNil) Z (TNode TNil Z TNil)))) (TNode TNil Z (TNode TNil Z TNil)) (TNode TNil Z TNil)))))))
(define-fun toTree (($x1 list)) Tree (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil))) (TNode (TNode TNil Z TNil) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) TNil) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) (cons Z nil))) (TNode TNil Z (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) TNil)) (ite (= $x1 (cons Z nil)) (TNode TNil Z TNil) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) nil)) (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))) TNil) TNil)))))
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_flatten is 7
(declare-sort I_flatten 0)
; rep: @uc_I_flatten_0
; rep: @uc_I_flatten_1
; rep: @uc_I_flatten_2
; rep: @uc_I_flatten_3
; rep: @uc_I_flatten_4
; rep: @uc_I_flatten_5
; rep: @uc_I_flatten_6
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_deleteAll is 3
(declare-sort I_deleteAll 0)
; rep: @uc_I_deleteAll_0
; rep: @uc_I_deleteAll_1
; rep: @uc_I_deleteAll_2
; cardinality of I_nub is 3
(declare-sort I_nub 0)
; rep: @uc_I_nub_0
; rep: @uc_I_nub_1
; rep: @uc_I_nub_2
; cardinality of I_add is 4
(declare-sort I_add 0)
; rep: @uc_I_add_0
; rep: @uc_I_add_1
; rep: @uc_I_add_2
; rep: @uc_I_add_3
; cardinality of I_toTree is 5
(declare-sort I_toTree 0)
; rep: @uc_I_toTree_0
; rep: @uc_I_toTree_1
; rep: @uc_I_toTree_2
; rep: @uc_I_toTree_3
; rep: @uc_I_toTree_4
)

benchmarks-sk/sat/tsort_nub_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tsort_nub_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tsort_nub_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tsort_nub_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tsort_nub_len_both_n03.smt2
60.00259s, ExitFailure 124

benchmarks-sk/sat/tsort_nub_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tsort_nub_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tsort_nub_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tsort_nub_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tsort_nub_n02.smt2
60.00202s, ExitFailure 124

benchmarks-sk/sat/tsort_nub_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tsort_nub_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tsort_nub_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tsort_nub_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tsort_unq_len_both_n02.smt2
4.60284s, ExitSuccess
sat
(model
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Tree (TNode (TNode_0 Tree) (TNode_1 Nat) (TNode_2 Tree)) (TNil))
))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))
))
(define-fun xs () list (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)))
(define-fun ys () list (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (cons Z nil)))
(define-fun length (($x1 list)) Nat (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (S Z) (ite (= $x1 (cons Z nil)) (S Z) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (S (S Z)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (cons Z nil))) (S (S Z)) (ite (= $x1 (cons (S Z) (cons Z nil))) (S (S (S (S (S (S (S (S (S (S (S Z))))))))))) Z))))))
(define-fun le (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) (= $x2 Z))))
(define-fun flatten (($x1 Tree) ($x2 list)) list (ite (and (= $x1 (TNode TNil Z TNil)) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (ite (and (= $x1 TNil) (= $x2 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil) (ite (and (= $x1 (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) TNil)) (= $x2 nil)) (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil) (ite (and (= $x1 (TNode TNil Z (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) TNil))) (= $x2 nil)) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (ite (and (= $x1 TNil) (= $x2 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)))) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (ite (and (= $x1 (TNode (TNode TNil Z TNil) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) TNil)) (= $x2 nil)) (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) nil)))))))
(define-fun equal (($x1 Nat) ($x2 Nat)) Bool (not (and (= $x1 Z) (= $x2 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))))))
(define-fun elem (($x1 Nat) ($x2 list)) Bool false)
(define-fun unique (($x1 list)) Bool true)
(define-fun add (($x1 Nat) ($x2 Tree)) Tree (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) (= $x2 (TNode TNil Z TNil))) (TNode TNil Z (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) TNil)) (ite (and (= $x1 Z) (= $x2 (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) TNil))) (TNode (TNode TNil Z TNil) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) TNil) (ite (and (= $x1 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))))) (= $x2 TNil)) (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) TNil) (ite (and (= $x1 Z) (= $x2 (TNode (TNode (TNode TNil Z TNil) Z TNil) Z TNil))) (TNode (TNode TNil Z TNil) Z TNil) (ite (and (= $x1 Z) (= $x2 (TNode (TNode TNil Z TNil) Z (TNode TNil Z TNil)))) (TNode TNil Z (TNode TNil Z TNil)) (TNode TNil Z TNil)))))))
(define-fun toTree (($x1 list)) Tree (ite (= $x1 (cons Z nil)) (TNode TNil Z TNil) (ite (= $x1 (cons Z (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil))) (TNode (TNode TNil Z TNil) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) TNil) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) (cons Z nil))) (TNode TNil Z (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) TNil)) (ite (= $x1 (cons (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) nil)) (TNode TNil (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) TNil) TNil)))))
; cardinality of I_length is 5
(declare-sort I_length 0)
; rep: @uc_I_length_0
; rep: @uc_I_length_1
; rep: @uc_I_length_2
; rep: @uc_I_length_3
; rep: @uc_I_length_4
; cardinality of I_le is 2
(declare-sort I_le 0)
; rep: @uc_I_le_0
; rep: @uc_I_le_1
; cardinality of I_flatten is 7
(declare-sort I_flatten 0)
; rep: @uc_I_flatten_0
; rep: @uc_I_flatten_1
; rep: @uc_I_flatten_2
; rep: @uc_I_flatten_3
; rep: @uc_I_flatten_4
; rep: @uc_I_flatten_5
; rep: @uc_I_flatten_6
; cardinality of I_equal is 1
(declare-sort I_equal 0)
; rep: @uc_I_equal_0
; cardinality of I_elem is 3
(declare-sort I_elem 0)
; rep: @uc_I_elem_0
; rep: @uc_I_elem_1
; rep: @uc_I_elem_2
; cardinality of I_unique is 3
(declare-sort I_unique 0)
; rep: @uc_I_unique_0
; rep: @uc_I_unique_1
; rep: @uc_I_unique_2
; cardinality of I_add is 4
(declare-sort I_add 0)
; rep: @uc_I_add_0
; rep: @uc_I_add_1
; rep: @uc_I_add_2
; rep: @uc_I_add_3
; cardinality of I_toTree is 5
(declare-sort I_toTree 0)
; rep: @uc_I_toTree_0
; rep: @uc_I_toTree_1
; rep: @uc_I_toTree_2
; rep: @uc_I_toTree_3
; rep: @uc_I_toTree_4
)

benchmarks-sk/sat/tsort_unq_len_both_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tsort_unq_len_both_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tsort_unq_len_both_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tsort_unq_len_both_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tsort_unq_len_both_n03.smt2
60.00240s, ExitFailure 124

benchmarks-sk/sat/tsort_unq_len_both_n03.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tsort_unq_len_both_n03.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tsort_unq_len_both_n03.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tsort_unq_len_both_n03.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

tsort_unq_n02.smt2
60.00207s, ExitFailure 124

benchmarks-sk/sat/tsort_unq_n02.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/tsort_unq_n02.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/tsort_unq_n02.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/tsort_unq_n02.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

turing_insert_case.smt2
0.11454s, ExitFailure 1

benchmarks-sk/sat/turing_insert_case.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/turing_insert_case.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/turing_insert_case.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/turing_insert_case.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
(error "Parse Error: benchmarks-sk/sat/turing_insert_case.smt2:71.51: Symbol 'z' not declared as a variable

  ... (x3 (apply x (Pair22 (Triple_0 y) (first3 z)))))
                                                ^
")

turing_insert_list.smt2
0.02882s, ExitFailure 1

benchmarks-sk/sat/turing_insert_list.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/turing_insert_list.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/turing_insert_list.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/turing_insert_list.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).
(error "Parse Error: benchmarks-sk/sat/turing_insert_list.smt2:80.51: Symbol 'z' not declared as a variable

  ... (x3 (apply x (Pair22 (Triple_0 y) (first3 z)))))
                                                ^
")

type_infer_Ma.smt2
0.34189s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun t () Ty (Arr (Arr C (Arr C C)) (Arr C C)))
(define-fun t1 () Ty C)
(define-fun t2 () Ty C)
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 (cons C (cons (Arr C (Arr C C)) nil))) (= $x2 (S Z))) (Just (Arr C (Arr C C))) (ite (and (= $x1 (cons C (cons (Arr C (Arr C C)) nil))) (= $x2 Z)) (Just C) (ite (and (= $x1 (cons (Arr C (Arr C C)) nil)) (= $x2 Z)) (Just (Arr C (Arr C C))) Nothing))))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_index is 3
(declare-sort I_index 0)
; rep: @uc_I_index_0
; rep: @uc_I_index_1
; rep: @uc_I_index_2
; cardinality of I_eqType is 3
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; rep: @uc_I_eqType_1
; rep: @uc_I_eqType_2
; cardinality of I_tc is 6
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
; rep: @uc_I_tc_2
; rep: @uc_I_tc_3
; rep: @uc_I_tc_4
; rep: @uc_I_tc_5
)

benchmarks-sk/sat/type_infer_Ma.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_infer_Ma.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_infer_Ma.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_infer_Ma.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_infer_Mb.smt2
1.11618s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun t () Ty (Arr (Arr C C) (Arr (Arr (Arr C C) C) (Arr (Arr C C) C))))
(define-fun t1 () Ty (Arr C C))
(define-fun t2 () Ty C)
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 (cons (Arr C C) (cons (Arr (Arr C C) C) (cons (Arr C C) nil)))) (= $x2 (S (S Z)))) (Just (Arr C C)) (ite (and (= $x1 (cons (Arr (Arr C C) C) (cons (Arr C C) nil))) (= $x2 (S Z))) (Just (Arr C C)) (ite (and (= $x1 (cons (Arr C C) (cons (Arr (Arr C C) C) (cons (Arr C C) nil)))) (= $x2 (S Z))) (Just (Arr (Arr C C) C)) (ite (and (= $x1 (cons (Arr C C) nil)) (= $x2 Z)) (Just (Arr C C)) (ite (and (= $x1 (cons (Arr C C) (cons (Arr (Arr C C) C) (cons (Arr C C) nil)))) (= $x2 Z)) (Just (Arr C C)) (ite (and (= $x1 (cons (Arr (Arr C C) C) (cons (Arr C C) nil))) (= $x2 Z)) (Just (Arr (Arr C C) C)) Nothing)))))))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_index is 6
(declare-sort I_index 0)
; rep: @uc_I_index_0
; rep: @uc_I_index_1
; rep: @uc_I_index_2
; rep: @uc_I_index_3
; rep: @uc_I_index_4
; rep: @uc_I_index_5
; cardinality of I_eqType is 3
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; rep: @uc_I_eqType_1
; rep: @uc_I_eqType_2
; cardinality of I_tc is 8
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
; rep: @uc_I_tc_2
; rep: @uc_I_tc_3
; rep: @uc_I_tc_4
; rep: @uc_I_tc_5
; rep: @uc_I_tc_6
; rep: @uc_I_tc_7
)

benchmarks-sk/sat/type_infer_Mb.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_infer_Mb.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_infer_Mb.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_infer_Mb.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_infer_Mc.smt2
0.85298s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun t () Ty (Arr (Arr (Arr C C) (Arr C C)) (Arr (Arr C C) (Arr C C))))
(define-fun t1 () Ty (Arr C C))
(define-fun t2 () Ty C)
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 (cons C (cons (Arr C C) (cons (Arr (Arr C C) (Arr C C)) nil)))) (= $x2 (S Z))) (Just (Arr C C)) (ite (and (= $x1 (cons (Arr C C) (cons (Arr (Arr C C) (Arr C C)) nil))) (= $x2 (S Z))) (Just (Arr (Arr C C) (Arr C C))) (ite (and (= $x1 (cons C (cons (Arr C C) (cons (Arr (Arr C C) (Arr C C)) nil)))) (= $x2 (S (S Z)))) (Just (Arr (Arr C C) (Arr C C))) (ite (and (= $x1 (cons (Arr C C) (cons (Arr (Arr C C) (Arr C C)) nil))) (= $x2 Z)) (Just (Arr C C)) (ite (and (= $x1 (cons C (cons (Arr C C) (cons (Arr (Arr C C) (Arr C C)) nil)))) (= $x2 Z)) (Just C) (ite (and (= $x1 (cons (Arr (Arr C C) (Arr C C)) nil)) (= $x2 Z)) (Just (Arr (Arr C C) (Arr C C))) Nothing)))))))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_index is 6
(declare-sort I_index 0)
; rep: @uc_I_index_0
; rep: @uc_I_index_1
; rep: @uc_I_index_2
; rep: @uc_I_index_3
; rep: @uc_I_index_4
; rep: @uc_I_index_5
; cardinality of I_eqType is 3
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; rep: @uc_I_eqType_1
; rep: @uc_I_eqType_2
; cardinality of I_tc is 8
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
; rep: @uc_I_tc_2
; rep: @uc_I_tc_3
; rep: @uc_I_tc_4
; rep: @uc_I_tc_5
; rep: @uc_I_tc_6
; rep: @uc_I_tc_7
)

benchmarks-sk/sat/type_infer_Mc.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_infer_Mc.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_infer_Mc.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_infer_Mc.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_infer_Md.smt2
1.25093s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun t () Ty (Arr (Arr (Arr C C) (Arr C C)) (Arr (Arr (Arr C C) C) (Arr (Arr C C) C))))
(define-fun t1 () Ty (Arr C C))
(define-fun t2 () Ty (Arr C C))
(define-fun t3 () Ty C)
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 (cons (Arr C C) (cons (Arr (Arr C C) C) (cons (Arr (Arr C C) (Arr C C)) nil)))) (= $x2 (S Z))) (Just (Arr (Arr C C) C)) (ite (and (= $x1 (cons (Arr C C) (cons (Arr (Arr C C) C) (cons (Arr (Arr C C) (Arr C C)) nil)))) (= $x2 (S (S Z)))) (Just (Arr (Arr C C) (Arr C C))) (ite (and (= $x1 (cons (Arr (Arr C C) C) (cons (Arr (Arr C C) (Arr C C)) nil))) (= $x2 (S Z))) (Just (Arr (Arr C C) (Arr C C))) (ite (and (= $x1 (cons (Arr (Arr C C) C) (cons (Arr (Arr C C) (Arr C C)) nil))) (= $x2 Z)) (Just (Arr (Arr C C) C)) (ite (and (= $x1 (cons (Arr C C) (cons (Arr (Arr C C) C) (cons (Arr (Arr C C) (Arr C C)) nil)))) (= $x2 Z)) (Just (Arr C C)) (ite (and (= $x1 (cons (Arr (Arr C C) (Arr C C)) nil)) (= $x2 Z)) (Just (Arr (Arr C C) (Arr C C))) Nothing)))))))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_index is 6
(declare-sort I_index 0)
; rep: @uc_I_index_0
; rep: @uc_I_index_1
; rep: @uc_I_index_2
; rep: @uc_I_index_3
; rep: @uc_I_index_4
; rep: @uc_I_index_5
; cardinality of I_eqType is 4
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; rep: @uc_I_eqType_1
; rep: @uc_I_eqType_2
; rep: @uc_I_eqType_3
; cardinality of I_tc is 9
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
; rep: @uc_I_tc_2
; rep: @uc_I_tc_3
; rep: @uc_I_tc_4
; rep: @uc_I_tc_5
; rep: @uc_I_tc_6
; rep: @uc_I_tc_7
; rep: @uc_I_tc_8
)

benchmarks-sk/sat/type_infer_Md.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_infer_Md.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_infer_Md.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_infer_Md.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_infer_Sa.smt2
0.15546s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun t () Ty (Arr C C))
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 (cons C nil)) (= $x2 Z)) (Just C) Nothing))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_index is 1
(declare-sort I_index 0)
; rep: @uc_I_index_0
; cardinality of I_eqType is 1
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; cardinality of I_tc is 2
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
)

benchmarks-sk/sat/type_infer_Sa.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_infer_Sa.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_infer_Sa.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_infer_Sa.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_infer_Sb.smt2
0.08113s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun t () Ty (Arr (Arr A B) (Arr C C)))
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 (cons C (cons (Arr A B) nil))) (= $x2 Z)) (Just C) Nothing))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_index is 1
(declare-sort I_index 0)
; rep: @uc_I_index_0
; cardinality of I_eqType is 1
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; cardinality of I_tc is 3
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
; rep: @uc_I_tc_2
)

benchmarks-sk/sat/type_infer_Sb.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_infer_Sb.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_infer_Sb.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_infer_Sb.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_infer_Sc.smt2
0.08653s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun t () Ty (Arr C (Arr (Arr B (Arr A A)) C)))
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 (cons (Arr B (Arr A A)) (cons C nil))) (= $x2 (S Z))) (Just C) (ite (and (= $x1 (cons C nil)) (= $x2 Z)) (Just C) Nothing)))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_index is 2
(declare-sort I_index 0)
; rep: @uc_I_index_0
; rep: @uc_I_index_1
; cardinality of I_eqType is 1
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; cardinality of I_tc is 3
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
; rep: @uc_I_tc_2
)

benchmarks-sk/sat/type_infer_Sc.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_infer_Sc.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_infer_Sc.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_infer_Sc.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_infer_Sd.smt2
0.15927s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun t () Ty (Arr (Arr C C) (Arr C C)))
(define-fun t1 () Ty C)
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 (cons C (cons (Arr C C) nil))) (= $x2 (S Z))) (Just (Arr C C)) (ite (and (= $x1 (cons (Arr C C) nil)) (= $x2 Z)) (Just (Arr C C)) (ite (and (= $x1 (cons C (cons (Arr C C) nil))) (= $x2 Z)) (Just C) Nothing))))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_index is 3
(declare-sort I_index 0)
; rep: @uc_I_index_0
; rep: @uc_I_index_1
; rep: @uc_I_index_2
; cardinality of I_eqType is 2
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; rep: @uc_I_eqType_1
; cardinality of I_tc is 5
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
; rep: @uc_I_tc_2
; rep: @uc_I_tc_3
; rep: @uc_I_tc_4
)

benchmarks-sk/sat/type_infer_Sd.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_infer_Sd.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_infer_Sd.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_infer_Sd.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_infer_Se.smt2
0.14415s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun t () Ty (Arr C (Arr (Arr C C) C)))
(define-fun t1 () Ty C)
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 (cons (Arr C C) (cons C nil))) (= $x2 (S Z))) (Just C) (ite (and (= $x1 (cons C nil)) (= $x2 Z)) (Just C) (ite (and (= $x1 (cons (Arr C C) (cons C nil))) (= $x2 Z)) (Just (Arr C C)) Nothing))))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_index is 3
(declare-sort I_index 0)
; rep: @uc_I_index_0
; rep: @uc_I_index_1
; rep: @uc_I_index_2
; cardinality of I_eqType is 2
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; rep: @uc_I_eqType_1
; cardinality of I_tc is 5
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
; rep: @uc_I_tc_2
; rep: @uc_I_tc_3
; rep: @uc_I_tc_4
)

benchmarks-sk/sat/type_infer_Se.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_infer_Se.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_infer_Se.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_infer_Se.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_self.smt2
60.00131s, ExitFailure 124

benchmarks-sk/sat/type_self.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_self.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_self.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_self.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_La.smt2
60.00175s, ExitFailure 124

benchmarks-sk/sat/type_synth_La.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_La.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_La.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_La.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_La_nf.smt2
60.00157s, ExitFailure 124

benchmarks-sk/sat/type_synth_La_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_La_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_La_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_La_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Lb.smt2
60.00189s, ExitFailure 124

benchmarks-sk/sat/type_synth_Lb.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Lb.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Lb.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Lb.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Lb_nf.smt2
60.00194s, ExitFailure 124

benchmarks-sk/sat/type_synth_Lb_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Lb_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Lb_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Lb_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Lc.smt2
60.00191s, ExitFailure 124

benchmarks-sk/sat/type_synth_Lc.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Lc.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Lc.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Lc.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Lc_nf.smt2
60.00215s, ExitFailure 124

benchmarks-sk/sat/type_synth_Lc_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Lc_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Lc_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Lc_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Ma.smt2
60.00248s, ExitFailure 124

benchmarks-sk/sat/type_synth_Ma.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Ma.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Ma.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Ma.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Ma_nf.smt2
60.00217s, ExitFailure 124

benchmarks-sk/sat/type_synth_Ma_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Ma_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Ma_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Ma_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Mb.smt2
60.00237s, ExitFailure 124

benchmarks-sk/sat/type_synth_Mb.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Mb.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Mb.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Mb.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Mb_nf.smt2
60.00230s, ExitFailure 124

benchmarks-sk/sat/type_synth_Mb_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Mb_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Mb_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Mb_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Mc.smt2
60.00238s, ExitFailure 124

benchmarks-sk/sat/type_synth_Mc.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Mc.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Mc.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Mc.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Mc_nf.smt2
60.00229s, ExitFailure 124

benchmarks-sk/sat/type_synth_Mc_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Mc_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Mc_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Mc_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Md.smt2
60.00183s, ExitFailure 124

benchmarks-sk/sat/type_synth_Md.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Md.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Md.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Md.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Md_nf.smt2
60.00185s, ExitFailure 124

benchmarks-sk/sat/type_synth_Md_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Md_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Md_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Md_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Sa.smt2
0.14438s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun e () Expr (Lam (Var Z)))
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 (cons A nil)) (= $x2 Z)) (Just A) (Just (Arr A (Arr A A)))))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_index is 1
(declare-sort I_index 0)
; rep: @uc_I_index_0
; cardinality of I_eqType is 1
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; cardinality of I_tc is 2
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
)

benchmarks-sk/sat/type_synth_Sa.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Sa.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Sa.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Sa.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Sa_nf.smt2
0.08875s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun e () Expr (Lam (Var Z)))
(define-fun nf (($x1 Expr)) Bool true)
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 nil) (= $x2 (S Z))) (Just (Arr A (Arr A A))) (ite (and (= $x1 (cons A nil)) (= $x2 Z)) (Just A) Nothing)))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_nf is 2
(declare-sort I_nf 0)
; rep: @uc_I_nf_0
; rep: @uc_I_nf_1
; cardinality of I_index is 1
(declare-sort I_index 0)
; rep: @uc_I_index_0
; cardinality of I_eqType is 1
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; cardinality of I_tc is 2
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
)

benchmarks-sk/sat/type_synth_Sa_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Sa_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Sa_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Sa_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Sb.smt2
60.00158s, ExitFailure 124

benchmarks-sk/sat/type_synth_Sb.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Sb.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Sb.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Sb.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Sb_nf.smt2
60.00240s, ExitFailure 124

benchmarks-sk/sat/type_synth_Sb_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Sb_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Sb_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Sb_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Sc.smt2
60.00206s, ExitFailure 124

benchmarks-sk/sat/type_synth_Sc.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Sc.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Sc.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Sc.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Sc_nf.smt2
1.09219s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun e () Expr (Lam (Var Z)))
(define-fun nf (($x1 Expr)) Bool true)
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 nil) (= $x2 (S (S (S Z))))) (Just (Arr C A)) (ite (and (= $x1 (cons (Arr A B) nil)) (= $x2 Z)) (Just (Arr A B)) Nothing)))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_nf is 2
(declare-sort I_nf 0)
; rep: @uc_I_nf_0
; rep: @uc_I_nf_1
; cardinality of I_index is 1
(declare-sort I_index 0)
; rep: @uc_I_index_0
; cardinality of I_eqType is 3
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; rep: @uc_I_eqType_1
; rep: @uc_I_eqType_2
; cardinality of I_tc is 2
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
)

benchmarks-sk/sat/type_synth_Sc_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Sc_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Sc_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Sc_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Sd.smt2
0.27570s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun e () Expr (Lam (Lam (Var Z))))
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 nil) (= $x2 (S Z))) (Just (Arr A (Arr A A))) (ite (and (= $x1 (cons B (cons A nil))) (= $x2 Z)) (Just B) Nothing)))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_index is 1
(declare-sort I_index 0)
; rep: @uc_I_index_0
; cardinality of I_eqType is 1
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; cardinality of I_tc is 3
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
; rep: @uc_I_tc_2
)

benchmarks-sk/sat/type_synth_Sd.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Sd.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Sd.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Sd.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Sd_nf.smt2
2.75076s, ExitSuccess
sat
(model
(declare-datatypes () ((Ty (Arr (Arr_0 Ty) (Arr_1 Ty)) (A) (B) (C))
))
(declare-datatypes () ((list (nil) (cons (head Ty) (tail list)))
))
(declare-datatypes () ((Nat (Z) (S (p Nat)))
))
(declare-datatypes () ((Maybe (Nothing) (Just (Just_0 Ty)))
))
(declare-datatypes () ((Expr (App (App_0 Expr) (App_1 Expr) (App_2 Ty)) (Lam (Lam_0 Expr)) (Var (Var_0 Nat)))
))
(define-fun e () Expr (Lam (Lam (Var Z))))
(define-fun nf (($x1 Expr)) Bool true)
(define-fun index (($x1 list) ($x2 Nat)) Maybe (ite (and (= $x1 (cons A nil)) (= $x2 (S (S Z)))) (Just (Arr (Arr A A) (Arr A A))) (ite (and (= $x1 nil) (= $x2 (S (S (S Z))))) (Just (Arr A (Arr A (Arr A A)))) (ite (and (= $x1 (cons B (cons A nil))) (= $x2 Z)) (Just B) Nothing))))
(define-fun eqType (($x1 Ty) ($x2 Ty)) Bool true)
(define-fun tc (($x1 list) ($x2 Expr) ($x3 Ty)) Bool true)
; cardinality of I_nf is 3
(declare-sort I_nf 0)
; rep: @uc_I_nf_0
; rep: @uc_I_nf_1
; rep: @uc_I_nf_2
; cardinality of I_index is 1
(declare-sort I_index 0)
; rep: @uc_I_index_0
; cardinality of I_eqType is 1
(declare-sort I_eqType 0)
; rep: @uc_I_eqType_0
; cardinality of I_tc is 3
(declare-sort I_tc 0)
; rep: @uc_I_tc_0
; rep: @uc_I_tc_1
; rep: @uc_I_tc_2
)

benchmarks-sk/sat/type_synth_Sd_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Sd_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Sd_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Sd_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Se.smt2
60.00164s, ExitFailure 124

benchmarks-sk/sat/type_synth_Se.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Se.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Se.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Se.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Se_nf.smt2
60.00180s, ExitFailure 124

benchmarks-sk/sat/type_synth_Se_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Se_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Se_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Se_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Sf.smt2
60.00203s, ExitFailure 124

benchmarks-sk/sat/type_synth_Sf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Sf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Sf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Sf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

type_synth_Sf_nf.smt2
60.00179s, ExitFailure 124

benchmarks-sk/sat/type_synth_Sf_nf.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/type_synth_Sf_nf.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/type_synth_Sf_nf.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/type_synth_Sf_nf.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_bcw_4_why.smt2
60.00216s, ExitFailure 124

benchmarks-sk/sat/untyped_bcw_4_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_bcw_4_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_bcw_4_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_bcw_4_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_bcw_5_why.smt2
60.00253s, ExitFailure 124

benchmarks-sk/sat/untyped_bcw_5_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_bcw_5_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_bcw_5_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_bcw_5_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_bcw_n_why.smt2
60.00221s, ExitFailure 124

benchmarks-sk/sat/untyped_bcw_n_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_bcw_n_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_bcw_n_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_bcw_n_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_kbcw_4_why.smt2
60.00192s, ExitFailure 124

benchmarks-sk/sat/untyped_kbcw_4_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_kbcw_4_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_kbcw_4_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_kbcw_4_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_kbcw_5_why.smt2
60.00196s, ExitFailure 124

benchmarks-sk/sat/untyped_kbcw_5_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_kbcw_5_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_kbcw_5_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_kbcw_5_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_kbcw_n_why.smt2
60.00183s, ExitFailure 124

benchmarks-sk/sat/untyped_kbcw_n_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_kbcw_n_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_kbcw_n_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_kbcw_n_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_ks_4_why.smt2
60.00232s, ExitFailure 124

benchmarks-sk/sat/untyped_ks_4_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_ks_4_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_ks_4_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_ks_4_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_ks_5_why.smt2
60.00132s, ExitFailure 124

benchmarks-sk/sat/untyped_ks_5_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_ks_5_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_ks_5_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_ks_5_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_ks_n_why.smt2
60.00193s, ExitFailure 124

benchmarks-sk/sat/untyped_ks_n_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_ks_n_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_ks_n_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_ks_n_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_ksb_4_why.smt2
60.00296s, ExitFailure 124

benchmarks-sk/sat/untyped_ksb_4_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_ksb_4_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_ksb_4_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_ksb_4_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_ksb_5_why.smt2
60.00212s, ExitFailure 124

benchmarks-sk/sat/untyped_ksb_5_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_ksb_5_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_ksb_5_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_ksb_5_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_ksb_n_why.smt2
60.00219s, ExitFailure 124

benchmarks-sk/sat/untyped_ksb_n_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_ksb_n_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_ksb_n_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_ksb_n_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_ksbc_4_why.smt2
60.00158s, ExitFailure 124

benchmarks-sk/sat/untyped_ksbc_4_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_ksbc_4_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_ksbc_4_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_ksbc_4_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_ksbc_5_why.smt2
60.00184s, ExitFailure 124

benchmarks-sk/sat/untyped_ksbc_5_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_ksbc_5_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_ksbc_5_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_ksbc_5_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_ksbc_n_why.smt2
60.00142s, ExitFailure 124

benchmarks-sk/sat/untyped_ksbc_n_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_ksbc_n_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_ksbc_n_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_ksbc_n_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_ksbcw_4_why.smt2
60.00159s, ExitFailure 124

benchmarks-sk/sat/untyped_ksbcw_4_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_ksbcw_4_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_ksbcw_4_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_ksbcw_4_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_ksbcw_5_why.smt2
60.00217s, ExitFailure 124

benchmarks-sk/sat/untyped_ksbcw_5_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_ksbcw_5_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_ksbcw_5_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_ksbcw_5_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_ksbcw_n_why.smt2
60.00254s, ExitFailure 124

benchmarks-sk/sat/untyped_ksbcw_n_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_ksbcw_n_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_ksbcw_n_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_ksbcw_n_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_sb_4_why.smt2
60.00183s, ExitFailure 124

benchmarks-sk/sat/untyped_sb_4_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_sb_4_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_sb_4_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_sb_4_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_sb_5_why.smt2
60.00215s, ExitFailure 124

benchmarks-sk/sat/untyped_sb_5_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_sb_5_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_sb_5_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_sb_5_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_sb_n_why.smt2
60.00195s, ExitFailure 124

benchmarks-sk/sat/untyped_sb_n_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_sb_n_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_sb_n_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_sb_n_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_sbcw_4_why.smt2
60.00237s, ExitFailure 124

benchmarks-sk/sat/untyped_sbcw_4_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_sbcw_4_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_sbcw_4_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_sbcw_4_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_sbcw_5_why.smt2
60.00200s, ExitFailure 124

benchmarks-sk/sat/untyped_sbcw_5_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_sbcw_5_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_sbcw_5_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_sbcw_5_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

untyped_sbcw_n_why.smt2
60.00142s, ExitFailure 124

benchmarks-sk/sat/untyped_sbcw_n_why.smt2:1.17: No set-logic command was given before this point.
benchmarks-sk/sat/untyped_sbcw_n_why.smt2:1.17: CVC4 will assume the non-standard ALL_SUPPORTED logic.
benchmarks-sk/sat/untyped_sbcw_n_why.smt2:1.17: Consider setting a stricter logic for (likely) better performance.
benchmarks-sk/sat/untyped_sbcw_n_why.smt2:1.17: To suppress this warning in the future use (set-logic ALL_SUPPORTED).

hbmc_-q_-c_
["-","benchmarks/sat","60","hbmc","-q","-c"]
hbmc_-q_-c_--memo=False_
["-","benchmarks/sat","60","hbmc","-q","-c","--memo=False"]
isort_inj_len_both_n26.smt2
5.57478s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             (S Z)
                                                                             nil)))))))))))))))))))))))))
ys: cons
  (S Z)
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             nil)))))))))))))))))))))))))



isort_inj_len_both_n27.smt2
7.33913s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                (S Z)
                                                                                nil))))))))))))))))))))))))))
ys: cons
  (S Z)
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                nil))))))))))))))))))))))))))



isort_inj_len_both_n28.smt2
10.10652s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                (cons
                                                                                   (S Z)
                                                                                   nil)))))))))))))))))))))))))))
ys: cons
  (S Z)
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                (cons
                                                                                   Z
                                                                                   nil)))))))))))))))))))))))))))



isort_inj_len_both_n29.smt2
13.50523s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                (cons
                                                                                   Z
                                                                                   (cons
                                                                                      (S Z)
                                                                                      nil))))))))))))))))))))))))))))
ys: cons
  (S Z)
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                (cons
                                                                                   Z
                                                                                   (cons
                                                                                      Z
                                                                                      nil))))))))))))))))))))))))))))



isort_inj_n02.smt2
0.16227s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z nil)
ys: cons Z (cons (S Z) nil)



isort_inj_n03.smt2
0.06030s, ExitSuccess
Counterexample!
xs: cons Z (cons (S Z) (cons Z nil))
ys: cons Z (cons Z (cons (S Z) nil))



isort_inj_n04.smt2
0.05257s, ExitSuccess
Counterexample!
xs: cons Z (cons Z (cons (S Z) (cons Z nil)))
ys: cons Z (cons Z (cons Z (cons (S Z) nil)))



isort_inj_n05.smt2
0.05150s, ExitSuccess
Counterexample!
xs: cons Z (cons Z (cons Z (cons (S Z) (cons Z nil))))
ys: cons Z (cons Z (cons Z (cons Z (cons (S Z) nil))))



isort_inj_n06.smt2
0.05586s, ExitSuccess
Counterexample!
xs: cons Z (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil)))))
ys: cons Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil)))))



isort_inj_n07.smt2
0.06611s, ExitSuccess
Counterexample!
xs: cons
  Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil))))))
ys: cons
  Z (cons Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil))))))



isort_inj_n08.smt2
0.11186s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil)))))))
ys: cons
  Z
  (cons
     Z (cons Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil)))))))



isort_inj_n09.smt2
0.11446s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z (cons Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil))))))))



isort_inj_n10.smt2
0.14168s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil)))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z (cons Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil)))))))))



isort_inj_n11.smt2
0.16860s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z (cons Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil))))))))))



isort_inj_n12.smt2
0.21726s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons Z (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil)))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil)))))))))))



isort_inj_n13.smt2
0.43638s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons Z (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil))))))))))))



isort_inj_n14.smt2
0.52445s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil)))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil)))))))))))))



isort_inj_n15.smt2
0.62232s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil))))))))))))))



isort_inj_n16.smt2
0.83252s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil)))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil)))))))))))))))



isort_inj_n17.smt2
0.90133s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil))))))))))))))))



isort_inj_n18.smt2
1.12703s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z (cons Z (cons Z (cons (S Z) (cons Z nil)))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z (cons Z (cons Z (cons Z (cons (S Z) nil)))))))))))))))))



isort_inj_n19.smt2
1.56470s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z (cons Z (cons (S Z) (cons Z nil))))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z (cons Z (cons Z (cons (S Z) nil))))))))))))))))))



isort_inj_n20.smt2
2.11114s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons Z (cons (S Z) (cons Z nil)))))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons Z (cons Z (cons (S Z) nil)))))))))))))))))))



isort_inj_n21.smt2
2.56413s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons (S Z) (cons Z nil))))))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons Z (cons (S Z) nil))))))))))))))))))))



isort_inj_n22.smt2
2.19496s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              (S Z) (cons Z nil)))))))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z (cons (S Z) nil)))))))))))))))))))))



isort_inj_n23.smt2
2.99388s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 (S Z)
                                                                 (cons Z nil))))))))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    (S Z) nil))))))))))))))))))))))



isort_inj_n24.smt2
4.51610s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       Z nil)))))))))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       (S Z)
                                                                       nil)))))))))))))))))))))))



isort_inj_n25.smt2
4.11233s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          Z
                                                                          nil))))))))))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          (S Z)
                                                                          nil))))))))))))))))))))))))



isort_inj_n26.smt2
4.94990s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          (S Z)
                                                                          (cons
                                                                             Z
                                                                             nil)))))))))))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             (S Z)
                                                                             nil)))))))))))))))))))))))))



isort_inj_n27.smt2
5.91562s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             (S Z)
                                                                             (cons
                                                                                Z
                                                                                nil))))))))))))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                (S Z)
                                                                                nil))))))))))))))))))))))))))



isort_inj_n28.smt2
6.62577s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                (S Z)
                                                                                (cons
                                                                                   Z
                                                                                   nil)))))))))))))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                (cons
                                                                                   (S Z)
                                                                                   nil)))))))))))))))))))))))))))



isort_inj_n29.smt2
9.89875s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                (cons
                                                                                   (S Z)
                                                                                   (cons
                                                                                      Z
                                                                                      nil))))))))))))))))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      Z
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                (cons
                                                                                   Z
                                                                                   (cons
                                                                                      (S Z)
                                                                                      nil))))))))))))))))))))))))))))



isort_nub_len_both_n02.smt2
0.18921s, ExitSuccess
Counterexample!
xs: cons Z (cons (S Z) nil)
ys: cons (S Z) (cons Z nil)



isort_nub_len_both_n03.smt2
0.08533s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z (cons (S (S Z)) nil))
ys: cons Z (cons (S Z) (cons (S (S Z)) nil))



isort_nub_len_both_n04.smt2
0.08781s, ExitSuccess
Counterexample!
xs: cons (S (S (S Z))) (cons (S Z) (cons Z (cons (S (S Z)) nil)))
ys: cons (S (S (S Z))) (cons (S (S Z)) (cons (S Z) (cons Z nil)))



isort_nub_len_both_n05.smt2
0.22468s, ExitSuccess
Counterexample!
xs: cons
  (S (S (S Z)))
  (cons (S (S Z)) (cons (S (S (S (S Z)))) (cons (S Z) (cons Z nil))))
ys: cons
  (S (S (S (S Z))))
  (cons (S (S Z)) (cons (S Z) (cons (S (S (S Z))) (cons Z nil))))



isort_nub_len_both_n06.smt2
1.88608s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S (S (S (S Z))))
     (cons
        Z
        (cons
           (S (S (S Z))) (cons (S (S Z)) (cons (S (S (S (S (S Z))))) nil)))))
ys: cons
  (S (S (S (S (S Z)))))
  (cons
     Z
     (cons
        (S (S (S Z)))
        (cons (S (S (S (S Z)))) (cons (S Z) (cons (S (S Z)) nil)))))



isort_nub_len_both_n07.smt2
6.23363s, ExitSuccess
Counterexample!
xs: cons
  (S (S (S (S (S Z)))))
  (cons
     (S Z)
     (cons
        (S (S Z))
        (cons
           Z
           (cons
              (S (S (S (S (S (S Z))))))
              (cons (S (S (S (S Z)))) (cons (S (S (S Z))) nil))))))
ys: cons
  (S (S (S (S (S (S Z))))))
  (cons
     (S (S (S Z)))
     (cons
        (S (S (S (S (S Z)))))
        (cons
           (S (S (S (S Z)))) (cons (S Z) (cons (S (S Z)) (cons Z nil))))))



isort_nub_len_both_n08.smt2
60.00148s, ExitFailure 124


isort_nub_n02.smt2
0.18139s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z nil)
ys: cons Z (cons (S Z) nil)



isort_nub_n03.smt2
0.08280s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z (cons (S (S Z)) nil))
ys: cons Z (cons (S Z) (cons (S (S Z)) nil))



isort_nub_n04.smt2
0.08947s, ExitSuccess
Counterexample!
xs: cons (S (S Z)) (cons (S Z) (cons Z (cons (S (S (S Z))) nil)))
ys: cons (S (S Z)) (cons Z (cons (S (S (S Z))) (cons (S Z) nil)))



isort_nub_n05.smt2
0.19470s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S (S Z))) (cons (S Z) (cons Z (cons (S (S (S (S Z)))) nil))))
ys: cons
  (S Z)
  (cons
     (S (S (S (S Z))))
     (cons (S (S (S Z))) (cons Z (cons (S (S Z)) nil))))



isort_nub_n06.smt2
1.21721s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S (S (S Z))))
     (cons
        Z
        (cons
           (S (S (S Z))) (cons (S Z) (cons (S (S (S (S (S Z))))) nil)))))
ys: cons
  (S (S Z))
  (cons
     (S (S (S (S (S Z)))))
     (cons
        (S Z) (cons (S (S (S Z))) (cons (S (S (S (S Z)))) (cons Z nil)))))



isort_nub_n07.smt2
8.73962s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S Z)
     (cons
        (S (S (S Z)))
        (cons
           Z
           (cons
              (S (S (S (S (S Z)))))
              (cons (S (S (S (S (S (S Z)))))) (cons (S (S (S (S Z)))) nil))))))
ys: cons
  (S (S (S (S (S Z)))))
  (cons
     (S Z)
     (cons
        (S (S (S Z)))
        (cons
           (S (S (S (S (S (S Z))))))
           (cons Z (cons (S (S (S (S Z)))) (cons (S (S Z)) nil))))))



isort_nub_n08.smt2
27.25760s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S (S (S Z)))
     (cons
        (S (S (S (S (S Z)))))
        (cons
           Z
           (cons
              (S (S Z))
              (cons
                 (S (S (S (S Z))))
                 (cons
                    (S (S (S (S (S (S Z))))))
                    (cons (S (S (S (S (S (S (S Z))))))) nil)))))))
ys: cons
  (S (S (S Z)))
  (cons
     (S (S (S (S (S (S Z))))))
     (cons
        (S (S (S (S Z))))
        (cons
           (S (S (S (S (S (S (S Z)))))))
           (cons
              (S (S (S (S (S Z)))))
              (cons (S (S Z)) (cons (S Z) (cons Z nil)))))))



isort_nub_n09.smt2
60.00140s, ExitFailure 124


isort_unq_len_both_n02.smt2
0.20397s, ExitSuccess
Counterexample!
xs: cons Z (cons (S Z) nil)
ys: cons (S Z) (cons Z nil)



isort_unq_len_both_n03.smt2
0.08836s, ExitSuccess
Counterexample!
xs: cons (S (S Z)) (cons (S Z) (cons Z nil))
ys: cons (S (S Z)) (cons Z (cons (S Z) nil))



isort_unq_len_both_n04.smt2
0.10316s, ExitSuccess
Counterexample!
xs: cons (S (S (S Z))) (cons (S (S Z)) (cons (S Z) (cons Z nil)))
ys: cons Z (cons (S (S Z)) (cons (S (S (S Z))) (cons (S Z) nil)))



isort_unq_len_both_n05.smt2
0.33066s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S (S (S (S Z))))
     (cons Z (cons (S (S Z)) (cons (S (S (S Z))) nil))))
ys: cons
  (S (S (S (S Z))))
  (cons Z (cons (S Z) (cons (S (S Z)) (cons (S (S (S Z))) nil))))



isort_unq_len_both_n06.smt2
1.36937s, ExitSuccess
Counterexample!
xs: cons
  (S (S (S (S Z))))
  (cons
     (S (S (S Z)))
     (cons
        (S Z) (cons Z (cons (S (S Z)) (cons (S (S (S (S (S Z))))) nil)))))
ys: cons
  (S (S Z))
  (cons
     Z
     (cons
        (S (S (S (S (S Z)))))
        (cons (S Z) (cons (S (S (S Z))) (cons (S (S (S (S Z)))) nil)))))



isort_unq_len_both_n07.smt2
13.78968s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S Z)
     (cons
        (S (S (S (S Z))))
        (cons
           Z
           (cons
              (S (S (S (S (S Z)))))
              (cons (S (S (S Z))) (cons (S (S (S (S (S (S Z)))))) nil))))))
ys: cons
  (S (S (S (S (S (S Z))))))
  (cons
     (S (S Z))
     (cons
        Z
        (cons
           (S (S (S (S Z))))
           (cons
              (S (S (S (S (S Z))))) (cons (S (S (S Z))) (cons (S Z) nil))))))



isort_unq_len_both_n08.smt2
60.00162s, ExitFailure 124


isort_unq_n02.smt2
0.20340s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z nil)
ys: cons Z (cons (S Z) nil)



isort_unq_n03.smt2
0.08888s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z (cons (S (S Z)) nil))
ys: cons Z (cons (S Z) (cons (S (S Z)) nil))



isort_unq_n04.smt2
0.09425s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z (cons (S (S (S Z))) (cons (S (S Z)) nil)))
ys: cons (S (S Z)) (cons (S (S (S Z))) (cons Z (cons (S Z) nil)))



isort_unq_n05.smt2
0.28966s, ExitSuccess
Counterexample!
xs: cons
  (S (S (S (S Z))))
  (cons Z (cons (S Z) (cons (S (S (S Z))) (cons (S (S Z)) nil))))
ys: cons
  Z
  (cons
     (S (S Z))
     (cons (S (S (S (S Z)))) (cons (S (S (S Z))) (cons (S Z) nil))))



isort_unq_n06.smt2
1.41091s, ExitSuccess
Counterexample!
xs: cons
  (S (S (S (S Z))))
  (cons
     (S Z)
     (cons
        Z
        (cons
           (S (S (S (S (S Z))))) (cons (S (S Z)) (cons (S (S (S Z))) nil)))))
ys: cons
  (S (S (S Z)))
  (cons
     (S (S (S (S (S Z)))))
     (cons
        (S Z) (cons (S (S Z)) (cons Z (cons (S (S (S (S Z)))) nil)))))



isort_unq_n07.smt2
9.58368s, ExitSuccess
Counterexample!
xs: cons
  (S (S (S Z)))
  (cons
     (S Z)
     (cons
        (S (S (S (S (S Z)))))
        (cons
           (S (S Z))
           (cons
              Z (cons (S (S (S (S (S (S Z)))))) (cons (S (S (S (S Z)))) nil))))))
ys: cons
  Z
  (cons
     (S (S (S (S (S (S Z))))))
     (cons
        (S (S (S (S (S Z)))))
        (cons
           (S Z)
           (cons
              (S (S (S (S Z)))) (cons (S (S Z)) (cons (S (S (S Z))) nil))))))



isort_unq_n08.smt2
60.00141s, ExitFailure 124


kaleidoscope_ambiguity.smt2
0.35176s, ExitSuccess
Counterexample!
s: cons I (cons Saw (cons Me (cons In (cons Me nil))))
t1: S2 Pron1 (VP_In (See Pron1) Pron1)
t2: S2 Pron1 (See (NP_In Pron1 Pron1))



kaleidoscope_parse.smt2
0.29780s, ExitSuccess
Counterexample!
s: S2 Pron1 (See (NP_In (Det N_Butterfly) (Det N_Kaleidoscope)))



kaleidoscope_two_parses.smt2
0.35168s, ExitSuccess
Counterexample!
t1: S2 Pron1 (VP_In (See (Det N_Butterfly)) (Det N_Kaleidoscope))
t2: S2 Pron1 (See (NP_In (Det N_Butterfly) (Det N_Kaleidoscope)))



msortbu2_inj_len_both_n02.smt2
0.20832s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z nil)
ys: cons Z (cons (S Z) nil)



msortbu2_inj_len_both_n03.smt2
0.09414s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons (S Z) (cons Z nil))
ys: cons Z (cons (S Z) (cons (S Z) nil))



msortbu2_inj_len_both_n04.smt2
0.09806s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil)))
ys: cons Z (cons (S Z) (cons (S Z) (cons (S Z) nil)))



msortbu2_inj_len_both_n05.smt2
0.09839s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))
ys: cons Z (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil))))



msortbu2_inj_len_both_n06.smt2
0.10943s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil)))))
ys: cons
  Z
  (cons
     (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil)))))



msortbu2_inj_len_both_n07.smt2
0.12421s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil))))))



msortbu2_inj_len_both_n08.smt2
0.18383s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil)))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil)))))))



msortbu2_inj_len_both_n09.smt2
0.24115s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil))))))))



msortbu2_inj_len_both_n10.smt2
0.31274s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil)))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil)))))))))



msortbu2_inj_len_both_n11.smt2
0.37133s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil))))))))))



msortbu2_inj_len_both_n12.smt2
0.41516s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil)))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil)))))))))))



msortbu2_inj_len_both_n13.smt2
0.46304s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil))))))))))))



msortbu2_inj_len_both_n14.smt2
0.53143s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil)))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil)))))))))))))



msortbu2_inj_len_both_n15.smt2
0.72140s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil))))))))))))))



msortbu2_inj_len_both_n16.smt2
0.73056s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil)))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil)))))))))))))))



msortbu2_inj_len_both_n17.smt2
0.90124s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons (S Z) (cons (S Z) (cons (S Z) nil))))))))))))))))



msortbu2_inj_len_both_n18.smt2
1.08794s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons (S Z) (cons (S Z) (cons Z nil)))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons (S Z) (cons (S Z) (cons (S Z) nil)))))))))))))))))



msortbu2_inj_len_both_n19.smt2
1.38956s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons (S Z) (cons (S Z) (cons Z nil))))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons (S Z) (cons (S Z) nil))))))))))))))))))



msortbu2_inj_len_both_n20.smt2
1.49495s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons (S Z) (cons Z nil)))))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons (S Z) (cons (S Z) nil)))))))))))))))))))



msortbu2_inj_len_both_n21.smt2
1.79470s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons (S Z) (cons Z nil))))))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z) (cons (S Z) nil))))))))))))))))))))



msortbu2_inj_len_both_n22.smt2
2.02843s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z) (cons Z nil)))))))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons (S Z) nil)))))))))))))))))))))



msortbu2_inj_len_both_n23.smt2
2.30780s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons Z nil))))))))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z) nil))))))))))))))))))))))



msortbu2_inj_len_both_n24.smt2
2.47916s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       Z nil)))))))))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       nil)))))))))))))))))))))))



msortbu2_inj_len_both_n25.smt2
2.93378s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          Z
                                                                          nil))))))))))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          (S Z)
                                                                          nil))))))))))))))))))))))))



msortbu2_inj_len_both_n26.smt2
3.34221s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          (S Z)
                                                                          (cons
                                                                             Z
                                                                             nil)))))))))))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          (S Z)
                                                                          (cons
                                                                             (S Z)
                                                                             nil)))))))))))))))))))))))))



msortbu2_inj_len_both_n27.smt2
4.85355s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          (S Z)
                                                                          (cons
                                                                             (S Z)
                                                                             (cons
                                                                                Z
                                                                                nil))))))))))))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          (S Z)
                                                                          (cons
                                                                             (S Z)
                                                                             (cons
                                                                                (S Z)
                                                                                nil))))))))))))))))))))))))))



msortbu2_inj_len_both_n28.smt2
4.67576s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          (S Z)
                                                                          (cons
                                                                             (S Z)
                                                                             (cons
                                                                                (S Z)
                                                                                (cons
                                                                                   Z
                                                                                   nil)))))))))))))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          (S Z)
                                                                          (cons
                                                                             (S Z)
                                                                             (cons
                                                                                (S Z)
                                                                                (cons
                                                                                   (S Z)
                                                                                   nil)))))))))))))))))))))))))))



msortbu2_inj_len_both_n29.smt2
6.33901s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          (S Z)
                                                                          (cons
                                                                             (S Z)
                                                                             (cons
                                                                                (S Z)
                                                                                (cons
                                                                                   (S Z)
                                                                                   (cons
                                                                                      Z
                                                                                      nil))))))))))))))))))))))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          (S Z)
                                                                          (cons
                                                                             (S Z)
                                                                             (cons
                                                                                (S Z)
                                                                                (cons
                                                                                   (S Z)
                                                                                   (cons
                                                                                      (S Z)
                                                                                      nil))))))))))))))))))))))))))))



msortbu2_inj_n02.smt2
0.22808s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z nil)
ys: cons Z (cons (S Z) nil)



msortbu2_inj_n03.smt2
0.10849s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z (cons (S Z) nil))
ys: cons (S Z) (cons (S Z) (cons Z nil))



msortbu2_inj_n04.smt2
0.10362s, ExitSuccess
Counterexample!
xs: cons Z (cons (S Z) (cons (S Z) (cons (S Z) nil)))
ys: cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil)))



msortbu2_inj_n05.smt2
0.14434s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons (S Z) (cons Z (cons Z (cons (S Z) nil))))
ys: cons (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z nil))))



msortbu2_inj_n06.smt2
0.25452s, ExitSuccess
Counterexample!
xs: cons
  Z (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil)))))
ys: cons
  (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z nil)))))



msortbu2_inj_n07.smt2
0.81494s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z) (cons (S Z) (cons Z (cons (S Z) (cons Z (cons Z nil))))))
ys: cons
  (S Z)
  (cons
     (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z (cons Z nil))))))



msortbu2_inj_n08.smt2
1.44775s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons (S Z) (cons Z (cons (S Z) (cons Z (cons Z (cons Z nil)))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons (S Z) (cons (S Z) (cons Z (cons Z (cons Z (cons Z nil)))))))



msortbu2_inj_n09.smt2
6.99192s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S Z)
     (cons
        (S (S Z))
        (cons Z (cons Z (cons Z (cons Z (cons Z (cons Z nil))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S (S Z))
        (cons (S (S Z)) (cons Z (cons Z (cons Z (cons Z (cons Z nil))))))))



msortbu2_inj_n10.smt2
12.24105s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              Z (cons (S (S Z)) (cons (S Z) (cons Z (cons Z (cons Z nil)))))))))
ys: cons
  (S Z)
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons Z (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))))))



msortbu2_inj_n11.smt2
39.08144s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z (cons (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z nil))))))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           Z
           (cons
              Z (cons Z (cons Z (cons Z (cons Z (cons Z (cons Z nil))))))))))



msortbu2_inj_n12.smt2
60.00309s, ExitFailure 124


msortbu2_nub_len_both_n02.smt2
0.26669s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z nil)
ys: cons Z (cons (S Z) nil)



msortbu2_nub_len_both_n03.smt2
0.12535s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons (S (S Z)) (cons Z nil))
ys: cons Z (cons (S Z) (cons (S (S Z)) nil))



msortbu2_nub_len_both_n04.smt2
0.15406s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z (cons (S (S Z)) (cons (S (S (S Z))) nil)))
ys: cons (S (S Z)) (cons (S (S (S Z))) (cons Z (cons (S Z) nil)))



msortbu2_nub_len_both_n05.smt2
0.28650s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     Z (cons (S Z) (cons (S (S (S Z))) (cons (S (S (S (S Z)))) nil))))
ys: cons
  (S (S Z))
  (cons
     (S Z) (cons (S (S (S Z))) (cons (S (S (S (S Z)))) (cons Z nil))))



msortbu2_nub_len_both_n06.smt2
0.79472s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     Z
     (cons
        (S Z)
        (cons
           (S (S (S Z)))
           (cons (S (S (S (S Z)))) (cons (S (S (S (S (S Z))))) nil)))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S (S (S Z)))
        (cons
           (S (S (S (S Z))))
           (cons (S (S (S (S (S Z))))) (cons (S (S Z)) nil)))))



msortbu2_nub_len_both_n07.smt2
50.39341s, ExitSuccess
Counterexample!
xs: cons
  (S (S (S (S (S (S Z))))))
  (cons
     Z
     (cons
        (S (S Z))
        (cons
           (S (S (S (S (S Z)))))
           (cons (S (S (S (S Z)))) (cons (S (S (S Z))) (cons (S Z) nil))))))
ys: cons
  (S Z)
  (cons
     (S (S Z))
     (cons
        Z
        (cons
           (S (S (S Z)))
           (cons
              (S (S (S (S Z))))
              (cons
                 (S (S (S (S (S Z))))) (cons (S (S (S (S (S (S Z)))))) nil))))))



msortbu2_nub_len_both_n08.smt2
60.00165s, ExitFailure 124


msortbu2_nub_n02.smt2
0.26786s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z nil)
ys: cons Z (cons (S Z) nil)



msortbu2_nub_n03.smt2
0.14046s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z (cons (S (S Z)) nil))
ys: cons (S (S Z)) (cons Z (cons (S Z) nil))



msortbu2_nub_n04.smt2
0.27750s, ExitSuccess
Counterexample!
xs: cons Z (cons (S Z) (cons (S (S Z)) (cons (S (S (S Z))) nil)))
ys: cons (S Z) (cons (S (S Z)) (cons (S (S (S Z))) (cons Z nil)))



msortbu2_nub_n05.smt2
1.06676s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     (S (S (S Z)))
     (cons (S Z) (cons (S (S (S (S Z)))) (cons (S (S Z)) nil))))
ys: cons
  (S (S Z))
  (cons
     (S (S (S (S Z)))) (cons (S (S (S Z))) (cons (S Z) (cons Z nil))))



msortbu2_nub_n06.smt2
7.96057s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     (S Z)
     (cons
        (S (S (S (S Z))))
        (cons
           (S (S (S Z))) (cons (S (S (S (S (S Z))))) (cons (S (S Z)) nil)))))
ys: cons
  (S (S (S Z)))
  (cons
     (S (S (S (S (S Z)))))
     (cons
        (S (S (S (S Z)))) (cons (S Z) (cons (S (S Z)) (cons Z nil)))))



msortbu2_nub_n07.smt2
60.00168s, ExitFailure 124


msortbu2_unq_len_both_n02.smt2
0.24308s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z nil)
ys: cons Z (cons (S Z) nil)



msortbu2_unq_len_both_n03.smt2
0.11912s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons (S (S Z)) (cons Z nil))
ys: cons Z (cons (S Z) (cons (S (S Z)) nil))



msortbu2_unq_len_both_n04.smt2
0.15950s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons (S (S Z)) (cons (S (S (S Z))) (cons Z nil)))
ys: cons (S (S Z)) (cons (S (S (S Z))) (cons Z (cons (S Z) nil)))



msortbu2_unq_len_both_n05.smt2
0.40530s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     Z (cons (S (S (S Z))) (cons (S (S (S (S Z)))) (cons (S Z) nil))))
ys: cons
  (S (S Z))
  (cons
     (S Z) (cons (S (S (S Z))) (cons (S (S (S (S Z)))) (cons Z nil))))



msortbu2_unq_len_both_n06.smt2
1.20988s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     Z
     (cons
        (S (S (S Z)))
        (cons
           (S (S (S (S Z))))
           (cons (S (S (S (S (S Z))))) (cons (S (S Z)) nil)))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S (S (S Z)))
        (cons
           (S (S (S (S Z))))
           (cons (S (S (S (S (S Z))))) (cons (S (S Z)) nil)))))



msortbu2_unq_len_both_n07.smt2
18.76575s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     (S Z)
     (cons
        (S (S Z))
        (cons
           (S (S (S Z)))
           (cons
              (S (S (S (S Z))))
              (cons
                 (S (S (S (S (S Z))))) (cons (S (S (S (S (S (S Z)))))) nil))))))
ys: cons
  (S (S (S (S Z))))
  (cons
     (S (S (S (S (S (S Z))))))
     (cons
        (S (S (S (S (S Z)))))
        (cons (S (S (S Z))) (cons Z (cons (S Z) (cons (S (S Z)) nil))))))



msortbu2_unq_len_both_n08.smt2
60.00222s, ExitFailure 124


msortbu2_unq_n02.smt2
0.26934s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z nil)
ys: cons Z (cons (S Z) nil)



msortbu2_unq_n03.smt2
0.13499s, ExitSuccess
Counterexample!
xs: cons (S (S Z)) (cons (S Z) (cons Z nil))
ys: cons (S Z) (cons (S (S Z)) (cons Z nil))



msortbu2_unq_n04.smt2
0.20117s, ExitSuccess
Counterexample!
xs: cons (S (S (S Z))) (cons Z (cons (S (S Z)) (cons (S Z) nil)))
ys: cons (S (S Z)) (cons (S (S (S Z))) (cons Z (cons (S Z) nil)))



msortbu2_unq_n05.smt2
0.79410s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     Z
     (cons (S (S Z)) (cons (S (S (S Z))) (cons (S (S (S (S Z)))) nil))))
ys: cons
  (S (S Z))
  (cons
     (S (S (S (S Z)))) (cons (S Z) (cons (S (S (S Z))) (cons Z nil))))



msortbu2_unq_n06.smt2
9.50642s, ExitSuccess
Counterexample!
xs: cons
  (S (S (S (S Z))))
  (cons
     (S Z)
     (cons
        (S (S Z))
        (cons (S (S (S Z))) (cons Z (cons (S (S (S (S (S Z))))) nil)))))
ys: cons
  (S (S (S (S Z))))
  (cons
     (S (S (S (S (S Z)))))
     (cons (S (S Z)) (cons Z (cons (S (S (S Z))) (cons (S Z) nil)))))



msortbu2_unq_n07.smt2
60.00312s, ExitFailure 124


msortbu_inj_len_both_n02.smt2
0.22486s, ExitSuccess
Counterexample!
xs: cons Z (cons (S Z) nil)
ys: cons (S Z) (cons Z nil)



msortbu_inj_len_both_n03.smt2
0.10318s, ExitSuccess
Counterexample!
xs: cons Z (cons (S Z) (cons (S Z) nil))
ys: cons (S Z) (cons (S Z) (cons Z nil))



msortbu_inj_len_both_n04.smt2
0.09156s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z (cons Z (cons Z nil)))
ys: cons Z (cons Z (cons Z (cons (S Z) nil)))



msortbu_inj_len_both_n05.smt2
0.10649s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z (cons (S Z) (cons (S Z) (cons Z nil))))
ys: cons Z (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))



msortbu_inj_len_both_n06.smt2
0.16982s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons (S Z) (cons Z (cons (S Z) (cons Z (cons Z nil)))))
ys: cons Z (cons (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z nil)))))



msortbu_inj_len_both_n07.smt2
0.22776s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z (cons Z (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil))))))
ys: cons
  (S Z)
  (cons
     (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z (cons Z nil))))))



msortbu_inj_len_both_n08.smt2
0.33235s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons Z (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil)))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons (S Z) (cons (S Z) (cons Z (cons Z (cons Z (cons Z nil)))))))



msortbu_inj_len_both_n09.smt2
0.35502s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        Z
        (cons
           (S Z)
           (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))))))
ys: cons
  (S Z)
  (cons
     Z
     (cons
        (S Z)
        (cons
           (S Z)
           (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))))))



msortbu_inj_len_both_n10.smt2
0.39702s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              Z (cons (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z nil)))))))))
ys: cons
  Z
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z nil)))))))))



msortbu_inj_len_both_n11.smt2
0.48223s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z (cons Z nil))))))))))
ys: cons
  (S Z)
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S Z)
              (cons
                 (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z (cons Z nil))))))))))



msortbu_inj_len_both_n12.smt2
0.51222s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S Z)
        (cons
           (S (S Z))
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z) (cons (S Z) (cons Z (cons Z (cons Z (cons Z nil)))))))))))
ys: cons
  (S Z)
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z) (cons (S Z) (cons Z (cons Z (cons Z (cons Z nil)))))))))))



msortbu_inj_len_both_n13.smt2
0.73072s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons (S Z) (cons Z (cons Z (cons Z (cons Z (cons Z nil))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons (S Z) (cons Z (cons Z (cons Z (cons Z (cons Z nil))))))))))))



msortbu_inj_len_both_n14.smt2
0.93430s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons Z (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))))))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S (S Z))
              (cons
                 (S Z)
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons Z (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))))))))))



msortbu_inj_len_both_n15.smt2
1.13924s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          Z (cons Z (cons Z (cons Z (cons Z (cons Z (cons Z nil))))))))))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S Z)
                       (cons
                          Z (cons Z (cons Z (cons Z (cons Z (cons Z (cons Z nil))))))))))))))



msortbu_inj_len_both_n16.smt2
1.23091s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                Z
                                (cons Z (cons Z (cons Z (cons (S Z) (cons (S Z) nil)))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons (S Z) (cons Z (cons Z (cons Z (cons Z nil)))))))))))))))



msortbu_inj_len_both_n17.smt2
2.47840s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons (S Z) (cons Z (cons Z (cons Z (cons Z nil))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons Z (cons Z (cons Z (cons (S Z) (cons Z nil))))))))))))))))



msortbu_inj_len_both_n18.smt2
2.93306s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       Z
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      Z
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z) (cons (S Z) (cons Z (cons Z nil)))))))))))))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons
        Z
        (cons
           Z
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z) (cons (S Z) (cons Z (cons Z nil)))))))))))))))))



msortbu_inj_len_both_n19.smt2
2.51456s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       Z
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z) (cons Z (cons Z (cons Z nil))))))))))))))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    Z
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z) (cons Z (cons Z (cons Z nil))))))))))))))))))



msortbu_inj_len_both_n20.smt2
3.22028s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            Z
                                            (cons
                                               (S Z)
                                               (cons
                                                  Z (cons Z (cons Z (cons Z nil)))))))))))))))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       Z
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  Z (cons Z (cons Z (cons Z nil)))))))))))))))))))



msortbu_inj_len_both_n21.smt2
3.75080s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  Z
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons (S Z) (cons Z nil))))))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        Z
                                                        (cons (S Z) (cons Z nil))))))))))))))))))))



msortbu_inj_len_both_n22.smt2
4.64139s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     Z
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons Z (cons Z nil)))))))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  Z
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons Z (cons Z nil)))))))))))))))))))))



msortbu_inj_len_both_n23.smt2
5.04709s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z (cons Z nil))))))))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            Z
                                            (cons
                                               (S Z)
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z (cons Z nil))))))))))))))))))))))



msortbu_inj_len_both_n24.smt2
4.75015s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z nil)))))))))))))))))))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z nil)))))))))))))))))))))))



msortbu_inj_len_both_n25.smt2
9.41471s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     Z
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              Z
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          Z
                                                                          nil))))))))))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          nil))))))))))))))))))))))))



msortbu_inj_len_both_n26.smt2
8.35661s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              Z
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             nil)))))))))))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           Z
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             nil)))))))))))))))))))))))))



msortbu_inj_len_both_n27.smt2
12.21372s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                nil))))))))))))))))))))))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S (S Z))
        (cons
           (S Z)
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S Z)
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                nil))))))))))))))))))))))))))



msortbu_inj_len_both_n28.smt2
16.18476s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              Z
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          (S Z)
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                (cons
                                                                                   Z
                                                                                   nil)))))))))))))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        Z
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             (S Z)
                                                                             (cons
                                                                                (S Z)
                                                                                (cons
                                                                                   Z
                                                                                   nil)))))))))))))))))))))))))))



msortbu_inj_len_both_n29.smt2
24.54930s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S Z)
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S Z)
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                (cons
                                                                                   Z
                                                                                   (cons
                                                                                      Z
                                                                                      nil))))))))))))))))))))))))))))
ys: cons
  (S Z)
  (cons
     (S (S Z))
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S Z)
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              Z
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z
                                                                       (cons
                                                                          Z
                                                                          (cons
                                                                             Z
                                                                             (cons
                                                                                Z
                                                                                (cons
                                                                                   Z
                                                                                   (cons
                                                                                      Z
                                                                                      nil))))))))))))))))))))))))))))



msortbu_inj_n02.smt2
0.22002s, ExitSuccess
Counterexample!
xs: cons (S Z) (cons Z nil)
ys: cons Z (cons (S Z) nil)



msortbu_inj_n03.smt2
0.15391s, ExitSuccess
Counterexample!
xs: cons Z (cons (S Z) (cons (S Z) nil))
ys: cons (S Z) (cons (S Z) (cons Z nil))



msortbu_inj_n04.smt2
0.10633s, ExitSuccess
Counterexample!
xs: cons Z (cons (S Z) (cons Z (cons (S Z) nil)))
ys: cons (S Z) (cons (S Z) (cons Z (cons Z nil)))



msortbu_inj_n05.smt2
0.11443s, ExitSuccess
Counterexample!
xs: cons Z (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil))))
ys: cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))



msortbu_inj_n06.smt2
0.12425s, ExitSuccess
Counterexample!
xs: cons
  Z (cons (S Z) (cons (S Z) (cons (S Z) (cons Z (cons (S Z) nil)))))
ys: cons
  (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z nil)))))



msortbu_inj_n07.smt2
0.16870s, ExitSuccess
Counterexample!
xs: cons
  Z (cons Z (cons (S Z) (cons Z (cons Z (cons (S Z) (cons Z nil))))))
ys: cons
  Z (cons Z (cons Z (cons Z (cons (S Z) (cons (S Z) (cons Z nil))))))



msortbu_inj_n08.smt2
0.21843s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons (S Z) (cons Z (cons Z (cons Z (cons Z (cons (S Z) nil)))))))
ys: cons
  Z
  (cons
     Z
     (cons Z (cons Z (cons (S Z) (cons (S Z) (cons Z (cons Z nil)))))))



msortbu_inj_n09.smt2
0.51862s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        Z
        (cons
           (S Z)
           (cons
              (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil))))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))))))



msortbu_inj_n10.smt2
0.57232s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           Z
           (cons
              (S Z)
              (cons
                 (S Z) (cons (S Z) (cons (S Z) (cons Z (cons (S Z) nil)))))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z nil)))))))))



msortbu_inj_n11.smt2
1.04964s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S Z)
                 (cons
                    Z (cons Z (cons (S (S Z)) (cons (S (S Z)) (cons (S Z) nil))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    Z (cons (S (S Z)) (cons (S Z) (cons (S Z) (cons Z nil))))))))))



msortbu_inj_n12.smt2
1.04394s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z) (cons (S Z) (cons Z (cons Z (cons Z (cons Z nil)))))))))))
ys: cons
  (S Z)
  (cons
     (S (S Z))
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S (S Z))
                    (cons (S (S Z)) (cons Z (cons Z (cons Z (cons Z nil)))))))))))



msortbu_inj_n13.smt2
1.43917s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              Z
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons (S Z) (cons (S Z) (cons (S Z) (cons (S Z) nil))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S Z) (cons (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))))))))))



msortbu_inj_n14.smt2
1.79948s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     Z
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       Z
                       (cons
                          (S Z)
                          (cons
                             (S (S Z))
                             (cons (S (S Z)) (cons (S Z) (cons Z (cons (S Z) nil)))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    Z
                    (cons
                       (S (S Z))
                       (cons
                          (S Z)
                          (cons
                             (S Z) (cons (S Z) (cons (S Z) (cons Z (cons Z nil)))))))))))))



msortbu_inj_n15.smt2
2.45258s, ExitSuccess
Counterexample!
xs: cons
  Z
  (cons
     Z
     (cons
        (S (S Z))
        (cons
           Z
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    Z
                    (cons
                       (S (S Z))
                       (cons
                          Z
                          (cons
                             (S Z) (cons (S Z) (cons Z (cons Z (cons Z (cons Z nil))))))))))))))
ys: cons
  Z
  (cons
     Z
     (cons
        Z
        (cons
           Z
           (cons
              Z
              (cons
                 Z
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons (S (S Z)) (cons (S Z) (cons (S Z) (cons Z nil))))))))))))))



msortbu_inj_n16.smt2
3.34002s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S Z)
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S (S Z))
                    (cons
                       (S Z)
                       (cons
                          Z
                          (cons
                             Z
                             (cons Z (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          Z
                          (cons
                             Z
                             (cons Z (cons Z (cons Z (cons Z (cons Z (cons Z nil)))))))))))))))



msortbu_inj_n17.smt2
5.59684s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     Z
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons (S Z) (cons (S Z) (cons (S Z) nil))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S Z)
              (cons
                 (S (S Z))
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z) (cons (S Z) (cons (S Z) (cons Z nil))))))))))))))))



msortbu_inj_n18.smt2
8.33072s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             Z
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      Z
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons (S Z) (cons (S Z) (cons (S Z) nil)))))))))))))))))
ys: cons
  (S Z)
  (cons
     (S Z)
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S Z)
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z) (cons (S Z) (cons Z (cons Z nil)))))))))))))))))



msortbu_inj_n19.smt2
15.87717s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S Z)
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons Z (cons (S Z) (cons (S Z) nil))))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S Z)
                                            (cons
                                               (S (S Z))
                                               (cons (S Z) (cons (S Z) (cons Z nil))))))))))))))))))



msortbu_inj_n20.smt2
15.07215s, ExitSuccess
Counterexample!
xs: cons
  (S Z)
  (cons
     (S (S Z))
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S Z)
                    (cons
                       (S Z)
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                (S (S Z))
                                (cons
                                   Z
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S (S Z))
                                            (cons
                                               Z
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons (S Z) (cons (S Z) nil)))))))))))))))))))
ys: cons
  (S Z)
  (cons
     (S (S Z))
     (cons
        (S Z)
        (cons
           (S Z)
           (cons
              (S Z)
              (cons
                 (S Z)
                 (cons
                    (S (S Z))
                    (cons
                       (S Z)
                       (cons
                          (S Z)
                          (cons
                             (S Z)
                             (cons
                                (S Z)
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S Z)
                                      (cons
                                         (S Z)
                                         (cons
                                            (S Z)
                                            (cons
                                               (S Z)
                                               (cons
                                                  Z (cons Z (cons Z (cons Z nil)))))))))))))))))))



msortbu_inj_n21.smt2
16.52899s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    Z
                    (cons
                       Z
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S (S Z))
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z) (cons (S Z) nil))))))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         Z
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons (S Z) (cons Z nil))))))))))))))))))))



msortbu_inj_n22.smt2
28.86172s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               Z
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        Z
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons (S Z) nil)))))))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S Z)
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons Z (cons Z nil)))))))))))))))))))))



msortbu_inj_n23.smt2
52.89345s, ExitSuccess
Counterexample!
xs: cons
  (S (S (S Z)))
  (cons
     (S (S (S Z)))
     (cons
        (S (S (S Z)))
        (cons
           (S (S (S Z)))
           (cons
              (S (S (S Z)))
              (cons
                 (S (S (S Z)))
                 (cons
                    (S (S (S Z)))
                    (cons
                       (S (S (S Z)))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S (S Z)))
                                (cons
                                   (S (S (S Z)))
                                   (cons
                                      (S (S (S Z)))
                                      (cons
                                         (S (S (S Z)))
                                         (cons
                                            (S (S (S Z)))
                                            (cons
                                               (S (S (S Z)))
                                               (cons
                                                  (S (S Z))
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           (S (S Z))
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z) nil))))))))))))))))))))))
ys: cons
  (S (S (S Z)))
  (cons
     (S (S (S Z)))
     (cons
        (S (S (S Z)))
        (cons
           (S (S (S Z)))
           (cons
              (S (S (S Z)))
              (cons
                 (S (S (S Z)))
                 (cons
                    (S (S (S Z)))
                    (cons
                       (S (S (S Z)))
                       (cons
                          (S (S (S Z)))
                          (cons
                             (S (S (S Z)))
                             (cons
                                (S Z)
                                (cons
                                   (S (S (S Z)))
                                   (cons
                                      (S (S (S Z)))
                                      (cons
                                         Z
                                         (cons
                                            (S (S (S Z)))
                                            (cons
                                               (S (S (S Z)))
                                               (cons
                                                  (S (S Z))
                                                  (cons
                                                     (S (S Z))
                                                     (cons
                                                        (S (S Z))
                                                        (cons
                                                           (S (S Z))
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons Z nil))))))))))))))))))))))



msortbu_inj_n24.smt2
58.66872s, ExitSuccess
Counterexample!
xs: cons
  (S (S (S Z)))
  (cons
     (S (S Z))
     (cons
        (S (S (S Z)))
        (cons
           (S (S Z))
           (cons
              (S (S (S Z)))
              (cons
                 (S (S (S Z)))
                 (cons
                    (S (S (S Z)))
                    (cons
                       (S (S (S Z)))
                       (cons
                          Z
                          (cons
                             Z
                             (cons
                                Z
                                (cons
                                   Z
                                   (cons
                                      (S Z)
                                      (cons
                                         Z
                                         (cons
                                            Z
                                            (cons
                                               (S Z)
                                               (cons
                                                  (S (S Z))
                                                  (cons
                                                     (S (S Z))
                                                     (cons
                                                        (S (S Z))
                                                        (cons
                                                           (S (S Z))
                                                           (cons
                                                              Z
                                                              (cons
                                                                 (S (S Z))
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       Z nil)))))))))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S Z)
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S (S Z)))
                 (cons
                    (S (S (S Z)))
                    (cons
                       (S (S (S Z)))
                       (cons
                          (S (S (S Z)))
                          (cons
                             (S (S Z))
                             (cons
                                (S (S (S Z)))
                                (cons
                                   (S (S (S Z)))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            Z
                                            (cons
                                               Z
                                               (cons
                                                  Z
                                                  (cons
                                                     Z
                                                     (cons
                                                        Z
                                                        (cons
                                                           Z
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    Z
                                                                    (cons
                                                                       Z nil)))))))))))))))))))))))



msortbu_inj_n25.smt2
43.25766s, ExitSuccess
Counterexample!
xs: cons
  (S (S Z))
  (cons
     (S Z)
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    (S (S Z))
                    (cons
                       (S (S Z))
                       (cons
                          (S Z)
                          (cons
                             Z
                             (cons
                                (S (S Z))
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S (S Z))
                                                        (cons
                                                           Z
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 Z
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          (S Z)
                                                                          nil))))))))))))))))))))))))
ys: cons
  (S (S Z))
  (cons
     (S (S Z))
     (cons
        (S (S Z))
        (cons
           (S (S Z))
           (cons
              (S (S Z))
              (cons
                 (S (S Z))
                 (cons
                    Z
                    (cons
                       (S (S Z))
                       (cons
                          (S (S Z))
                          (cons
                             (S (S Z))
                             (cons
                                Z
                                (cons
                                   (S (S Z))
                                   (cons
                                      (S (S Z))
                                      (cons
                                         (S (S Z))
                                         (cons
                                            (S (S Z))
                                            (cons
                                               (S (S Z))
                                               (cons
                                                  (S Z)
                                                  (cons
                                                     (S Z)
                                                     (cons
                                                        (S Z)
                                                        (cons
                                                           (S Z)
                                                           (cons
                                                              (S Z)
                                                              (cons
                                                                 (S Z)
                                                                 (cons
                                                                    (S Z)
                                                                    (cons
                                                                       (S Z)
                                                                       (cons
                                                                          Z
 