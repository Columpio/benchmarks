(* Simple expression unambiguity *)
module A
  use HighOrd
  type e = Plus e e | EX | EY
  type tok = C | D | X | Y | Pl
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function linTerm (e2 : e) : list tok =
    match e2 with
    | Plus ds2 ds3 ->
        append (append (Cons C Nil) (lin e2)) (Cons D Nil)
    | EX -> Cons X Nil
    | EY -> Cons Y Nil
    end
  with lin (ds4 : e) : list tok =
    match ds4 with
    | Plus a4 b ->
        append (append (linTerm a4) (Cons Pl Nil)) (linTerm b)
    | EX -> Cons X Nil
    | EY -> Cons Y Nil
    end
  goal prop_unambig4 : forall u : e, v : e . lin u = lin v -> u = v
end
