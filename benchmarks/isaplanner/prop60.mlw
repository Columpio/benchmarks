module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function last (ds2 : list nat) : nat =
    match ds2 with
    | Nil -> Z
    | Cons x2 ds1 ->
        match ds1 with
        | Nil -> x2
        | Cons ipv ipv1 -> last ds1
        end
    end
  function not2 (ds3 : bool) : bool =
    match ds3 with
    | False -> True
    | True -> False
    end
  function null (ds4 : list 'a4) : bool =
    match ds4 with
    | Nil -> True
    | Cons ipv2 ipv12 -> False
    end
  goal prop_60 :
    forall xs2 : list nat, ys2 : list nat .
      not2 (null ys2) = True -> last (append xs2 ys2) = last ys2
end
