module A
  use HighOrd
  type nat = S nat | Z
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function minus (ds2 : nat) (ds1 : nat) : nat =
    match ds2 with
    | S ipv ->
        match ds1 with
        | S ipv1 -> minus ipv ipv1
        | Z -> S ipv
        end
    | Z -> Z
    end
  function drop (ds3 : nat) (xs2 : list 'a4) : list 'a4 =
    match ds3 with
    | S ipv2 ->
        match xs2 with
        | Nil -> Nil
        | Cons ipv12 ipv22 -> drop ipv2 ipv22
        end
    | Z -> xs2
    end
  function len (ds4 : list 'a6) : nat =
    match ds4 with
    | Nil -> Z
    | Cons ds12 xs3 -> S (len xs3)
    end
  goal prop_55 :
    forall n : nat, xs4 : list 'a8, ys2 : list 'a8 .
      drop n (append xs4 ys2) =
        append (drop n xs4) (drop (minus n (len xs4)) ys2)
end
