module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function minus (ds : nat) (ds1 : nat) : nat =
    match ds with
    | Z -> Z
    | S ipv ->
        match ds1 with
        | Z -> S ipv
        | S ipv1 -> minus ipv ipv1
        end
    end
  function butlast (ds2 : list 'a2) : list 'a2 =
    match ds2 with
    | Nil -> Nil
    | Cons x ds12 ->
        match ds12 with
        | Nil -> Nil
        | Cons ipv2 ipv12 -> Cons x (butlast (Cons ipv2 ipv12))
        end
    end
  function len (ds3 : list 'a4) : nat =
    match ds3 with
    | Nil -> Z
    | Cons ds13 xs -> S (len xs)
    end
  function take (ds4 : nat) (ds14 : list 'a6) : list 'a6 =
    match ds4 with
    | Z -> Nil
    | S ipv3 ->
        match ds14 with
        | Nil -> Nil
        | Cons ipv13 ipv22 -> Cons ipv13 (take ipv3 ipv22)
        end
    end
  goal prop_50 :
    forall xs2 : list 'a8 .
      butlast xs2 = take (minus (len xs2) (S Z)) xs2
end
