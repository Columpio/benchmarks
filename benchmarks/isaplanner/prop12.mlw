module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function drop (ds : nat) (xs : list 'a2) : list 'a2 =
    match ds with
    | Z -> xs
    | S ipv ->
        match xs with
        | Nil -> Nil
        | Cons ipv1 ipv2 -> drop ipv ipv2
        end
    end
  function map (f : ('a4 -> 'b)) (ds2 : list 'a4) : list 'b =
    match ds2 with
    | Nil -> Nil
    | Cons x xs2 -> Cons (f x) (map f xs2)
    end
  goal prop_12 :
    forall n : nat, f2 : ('a1 -> 'a6), xs3 : list 'a1 .
      drop n (map f2 xs3) = map f2 (drop n xs3)
end
