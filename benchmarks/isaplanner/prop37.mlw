module A
  use HighOrd
  type nat = S nat | Z
  type list 'a = Nil | Cons 'a (list 'a)
  function equal2 (ds : nat) (ds1 : nat) : bool =
    match ds with
    | S ds2 ->
        match ds1 with
        | S y -> equal2 ds2 y
        | Z -> False
        end
    | Z ->
        match ds1 with
        | S ipv -> False
        | Z -> True
        end
    end
  function delete (ds3 : nat) (ds12 : list nat) : list nat =
    match ds12 with
    | Nil -> Nil
    | Cons x xs ->
        match equal2 ds3 x with
        | False -> Cons x (delete ds3 xs)
        | True -> delete ds3 xs
        end
    end
  function elem (ds4 : nat) (ds13 : list nat) : bool =
    match ds13 with
    | Nil -> False
    | Cons x2 xs2 ->
        match equal2 ds4 x2 with
        | False -> elem ds4 xs2
        | True -> True
        end
    end
  function not2 (ds5 : bool) : bool =
    match ds5 with
    | False -> True
    | True -> False
    end
  goal prop_37 :
    forall x3 : nat, xs3 : list nat .
      not2 (elem x3 (delete x3 xs3)) = True
end
