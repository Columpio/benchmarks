module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function map (f : ('a2 -> 'b)) (ds : list 'a2) : list 'b =
    match ds with
    | Nil -> Nil
    | Cons x xs -> Cons (f x) (map f xs)
    end
  function take (ds2 : nat) (ds1 : list 'a4) : list 'a4 =
    match ds2 with
    | Z -> Nil
    | S ipv ->
        match ds1 with
        | Nil -> Nil
        | Cons ipv1 ipv2 -> Cons ipv1 (take ipv ipv2)
        end
    end
  goal prop_41 :
    forall n : nat, f2 : ('a1 -> 'a6), xs2 : list 'a1 .
      take n (map f2 xs2) = map f2 (take n xs2)
end
