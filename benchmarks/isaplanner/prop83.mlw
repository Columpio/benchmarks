module A
  use HighOrd
  type nat = S nat | Z
  type tup 'a 'b = Tup 'a 'b
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function drop (ds2 : nat) (xs2 : list 'a4) : list 'a4 =
    match ds2 with
    | S ipv ->
        match xs2 with
        | Nil -> Nil
        | Cons ipv1 ipv2 -> drop ipv ipv2
        end
    | Z -> xs2
    end
  function len (ds3 : list 'a6) : nat =
    match ds3 with
    | Nil -> Z
    | Cons ds1 xs3 -> S (len xs3)
    end
  function take (ds4 : nat) (ds12 : list 'a8) : list 'a8 =
    match ds4 with
    | S ipv3 ->
        match ds12 with
        | Nil -> Nil
        | Cons ipv12 ipv22 -> Cons ipv12 (take ipv3 ipv22)
        end
    | Z -> Nil
    end
  function zip
    (ds5 : list 'a10) (ds13 : list 'b2) : list (tup 'a10 'b2) =
    match ds5 with
    | Nil -> Nil
    | Cons ipv4 ipv13 ->
        match ds13 with
        | Nil -> Nil
        | Cons ipv23 ipv32 -> Cons (Tup ipv4 ipv23) (zip ipv13 ipv32)
        end
    end
  goal prop_83 :
    forall xs4 : list 'a12, ys2 : list 'a12, zs : list 'b4 .
      zip (append xs4 ys2) zs =
        append (zip xs4 (take (len xs4) zs)) (zip ys2 (drop (len xs4) zs))
end
