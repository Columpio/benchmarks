module A
  use HighOrd
  type nat = Z | S nat
  type tup 'a 'b = Tup 'a 'b
  type list 'a = Nil | Cons 'a (list 'a)
  function take (ds : nat) (ds1 : list 'a2) : list 'a2 =
    match ds with
    | Z -> (Nil : list 'a2)
    | S ipv ->
        match ds1 with
        | Nil -> (Nil : list 'a2)
        | Cons ipv1 ipv2 -> Cons ipv1 (take ipv ipv2)
        end
    end
  function zip
    (ds2 : list 'a4) (ds12 : list 'b2) : list (tup 'a4 'b2) =
    match ds2 with
    | Nil -> (Nil : list (tup 'a4 'b2))
    | Cons ipv3 ipv12 ->
        match ds12 with
        | Nil -> (Nil : list (tup 'a4 'b2))
        | Cons ipv22 ipv32 -> Cons (Tup ipv3 ipv22) (zip ipv12 ipv32)
        end
    end
  goal prop_82 :
    forall n : nat, xs : list 'a6, ys : list 'b4 .
      take n (zip xs ys) = zip (take n xs) (take n ys)
end
