module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function minus (ds2 : nat) (ds1 : nat) : nat =
    match ds2 with
    | Z -> Z
    | S ipv ->
        match ds1 with
        | Z -> S ipv
        | S ipv1 -> minus ipv ipv1
        end
    end
  function drop (ds3 : nat) (xs2 : list 'a4) : list 'a4 =
    match ds3 with
    | Z -> xs2
    | S ipv2 ->
        match xs2 with
        | Nil -> Nil
        | Cons ipv12 ipv22 -> drop ipv2 ipv22
        end
    end
  function len (ds4 : list 'a6) : nat =
    match ds4 with
    | Nil -> Z
    | Cons ds12 xs3 -> S (len xs3)
    end
  function rev (ds5 : list 'a8) : list 'a8 =
    match ds5 with
    | Nil -> Nil
    | Cons x2 xs4 -> append (rev xs4) (Cons x2 Nil)
    end
  function take (ds6 : nat) (ds13 : list 'a10) : list 'a10 =
    match ds6 with
    | Z -> Nil
    | S ipv3 ->
        match ds13 with
        | Nil -> Nil
        | Cons ipv13 ipv23 -> Cons ipv13 (take ipv3 ipv23)
        end
    end
  goal prop_72 :
    forall i : nat, xs5 : list 'a12 .
      rev (drop i xs5) = take (minus (len xs5) i) (rev xs5)
end
