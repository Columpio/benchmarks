(* Source: IsaPlanner test suite *)
module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function equal2 (ds2 : nat) (ds1 : nat) : bool =
    match ds2 with
    | Z ->
        match ds1 with
        | Z -> True
        | S ipv -> False
        end
    | S ds22 ->
        match ds1 with
        | Z -> False
        | S y -> equal2 ds22 y
        end
    end
  function count (x2 : nat) (ds3 : list nat) : nat =
    match ds3 with
    | Nil -> Z
    | Cons y2 ys2 ->
        match equal2 x2 y2 with
        | False -> count x2 ys2
        | True -> S (count x2 ys2)
        end
    end
  goal prop_38 :
    forall n : nat, xs2 : list nat .
      count n (append xs2 (Cons n Nil)) = S (count n xs2)
end
