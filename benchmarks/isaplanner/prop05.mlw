module A
  use HighOrd
  type nat = S nat | Z
  type list 'a = Nil | Cons 'a (list 'a)
  function equal2 (ds : nat) (ds1 : nat) : bool =
    match ds with
    | S ds2 ->
        match ds1 with
        | S y -> equal2 ds2 y
        | Z -> False
        end
    | Z ->
        match ds1 with
        | S ipv -> False
        | Z -> True
        end
    end
  function count (x : nat) (ds3 : list nat) : nat =
    match ds3 with
    | Nil -> Z
    | Cons y2 ys ->
        match equal2 x y2 with
        | False -> count x ys
        | True -> S (count x ys)
        end
    end
  goal prop_05 :
    forall n : nat, x2 : nat, xs : list nat .
      n = x2 -> S (count n xs) = count n (Cons x2 xs)
end
