(* Source: IsaPlanner test suite *)
module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function plus (ds : nat) (y : nat) : nat =
    match ds with
    | Z -> y
    | S x -> S (plus x y)
    end
  function equal2 (ds2 : nat) (ds1 : nat) : bool =
    match ds2 with
    | Z ->
        match ds1 with
        | Z -> True
        | S ipv -> False
        end
    | S ds22 ->
        match ds1 with
        | Z -> False
        | S y2 -> equal2 ds22 y2
        end
    end
  function count (x2 : nat) (ds3 : list nat) : nat =
    match ds3 with
    | Nil -> Z
    | Cons y3 ys ->
        match equal2 x2 y3 with
        | False -> count x2 ys
        | True -> S (count x2 ys)
        end
    end
  goal prop_75 :
    forall n : nat, m : nat, xs : list nat .
      plus (count n xs) (count n (Cons m Nil)) = count n (Cons m xs)
end
