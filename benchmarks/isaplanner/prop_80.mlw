(* Source: IsaPlanner test suite *)
module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function minus (ds2 : nat) (ds1 : nat) : nat =
    match ds2 with
    | Z -> Z
    | S ipv ->
        match ds1 with
        | Z -> ds2
        | S ipv1 -> minus ipv ipv1
        end
    end
  function len (ds3 : list 'a4) : nat =
    match ds3 with
    | Nil -> Z
    | Cons ds12 xs2 -> S (len xs2)
    end
  function take (ds4 : nat) (ds13 : list 'a6) : list 'a6 =
    match ds4 with
    | Z -> (Nil : list 'a6)
    | S ipv2 ->
        match ds13 with
        | Nil -> (Nil : list 'a6)
        | Cons ipv12 ipv22 -> Cons ipv12 (take ipv2 ipv22)
        end
    end
  goal prop_80 :
    forall n : nat, xs3 : list 'a8, ys2 : list 'a8 .
      take n (append xs3 ys2) =
        append (take n xs3) (take (minus n (len xs3)) ys2)
end
