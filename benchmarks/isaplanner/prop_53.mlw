(* Source: IsaPlanner test suite *)
module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function le (ds : nat) (ds1 : nat) : bool =
    match ds with
    | Z -> True
    | S ipv ->
        match ds1 with
        | Z -> False
        | S ipv1 -> le ipv ipv1
        end
    end
  function equal2 (ds2 : nat) (ds12 : nat) : bool =
    match ds2 with
    | Z ->
        match ds12 with
        | Z -> True
        | S ipv2 -> False
        end
    | S ds22 ->
        match ds12 with
        | Z -> False
        | S y -> equal2 ds22 y
        end
    end
  function count (x : nat) (ds3 : list nat) : nat =
    match ds3 with
    | Nil -> Z
    | Cons y2 ys ->
        match equal2 x y2 with
        | False -> count x ys
        | True -> S (count x ys)
        end
    end
  function insort (n : nat) (ds4 : list nat) : list nat =
    match ds4 with
    | Nil -> Cons n Nil
    | Cons x2 xs ->
        match le n x2 with
        | False -> Cons x2 (insort n xs)
        | True -> Cons n ds4
        end
    end
  function sort (ds5 : list nat) : list nat =
    match ds5 with
    | Nil -> Nil
    | Cons x3 xs2 -> insort x3 (sort xs2)
    end
  goal prop_53 :
    forall n2 : nat, xs3 : list nat .
      count n2 xs3 = count n2 (sort xs3)
end
