module A
  use HighOrd
  type nat = S nat | Z
  type list 'a = Nil | Cons 'a (list 'a)
  function plus (ds : nat) (y : nat) : nat =
    match ds with
    | S x -> S (plus x y)
    | Z -> y
    end
  function drop (ds2 : nat) (xs : list 'a2) : list 'a2 =
    match ds2 with
    | S ipv ->
        match xs with
        | Nil -> Nil
        | Cons ipv1 ipv2 -> drop ipv ipv2
        end
    | Z -> xs
    end
  function take (ds3 : nat) (ds1 : list 'a4) : list 'a4 =
    match ds3 with
    | S ipv3 ->
        match ds1 with
        | Nil -> Nil
        | Cons ipv12 ipv22 -> Cons ipv12 (take ipv3 ipv22)
        end
    | Z -> Nil
    end
  goal prop_81 :
    forall n : nat, m : nat, xs2 : list 'a6 .
      take n (drop m xs2) = drop m (take (plus n m) xs2)
end
