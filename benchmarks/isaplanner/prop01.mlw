module A
  use HighOrd
  type nat = S nat | Z
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function drop (ds2 : nat) (xs2 : list 'a4) : list 'a4 =
    match ds2 with
    | S ipv ->
        match xs2 with
        | Nil -> Nil
        | Cons ipv1 ipv2 -> drop ipv ipv2
        end
    | Z -> xs2
    end
  function take (ds3 : nat) (ds1 : list 'a6) : list 'a6 =
    match ds3 with
    | S ipv3 ->
        match ds1 with
        | Nil -> Nil
        | Cons ipv12 ipv22 -> Cons ipv12 (take ipv3 ipv22)
        end
    | Z -> Nil
    end
  goal prop_01 :
    forall n : nat, xs3 : list 'a8 .
      append (take n xs3) (drop n xs3) = xs3
end
