module A
  use HighOrd
  type nat = S nat | Z
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function butlast (ds2 : list 'a4) : list 'a4 =
    match ds2 with
    | Nil -> Nil
    | Cons x2 ds1 ->
        match ds1 with
        | Nil -> Nil
        | Cons ipv ipv1 -> Cons x2 (butlast (Cons ipv ipv1))
        end
    end
  function last (ds3 : list nat) : nat =
    match ds3 with
    | Nil -> Z
    | Cons x3 ds12 ->
        match ds12 with
        | Nil -> x3
        | Cons ipv2 ipv12 -> last (Cons ipv2 ipv12)
        end
    end
  function not2 (ds4 : bool) : bool =
    match ds4 with
    | False -> True
    | True -> False
    end
  function null (ds5 : list 'a6) : bool =
    match ds5 with
    | Nil -> True
    | Cons ipv3 ipv13 -> False
    end
  goal prop_48 :
    forall xs2 : list nat .
      not2 (null xs2) = True ->
      append (butlast xs2) (Cons (last xs2) Nil) = xs2
end
