module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function plus (ds : nat) (y : nat) : nat =
    match ds with
    | Z -> y
    | S x -> S (plus x y)
    end
  function append (ds2 : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds2 with
    | Nil -> ys
    | Cons x2 xs -> Cons x2 (append xs ys)
    end
  function equal2 (ds3 : nat) (ds1 : nat) : bool =
    match ds3 with
    | Z ->
        match ds1 with
        | Z -> True
        | S ipv -> False
        end
    | S ds22 ->
        match ds1 with
        | Z -> False
        | S y2 -> equal2 ds22 y2
        end
    end
  function count (x3 : nat) (ds4 : list nat) : nat =
    match ds4 with
    | Nil -> Z
    | Cons y3 ys2 ->
        match equal2 x3 y3 with
        | False -> count x3 ys2
        | True -> S (count x3 ys2)
        end
    end
  goal prop_02 :
    forall n : nat, xs2 : list nat, ys3 : list nat .
      plus (count n xs2) (count n ys3) = count n (append xs2 ys3)
end
