(* Difficult examples about rotate *)
module A
  use HighOrd
  type list 'a = Cons 'a (list 'a) | Nil
  type nat = S nat | Z
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Cons x xs -> Cons x (append xs ys)
    | Nil -> ys
    end
  function length (ds2 : list 'a4) : nat =
    match ds2 with
    | Cons ds3 xs2 -> S (length xs2)
    | Nil -> Z
    end
  function rotate (ds4 : nat) (xs3 : list 'a6) : list 'a6 =
    match ds4 with
    | S d ->
        match xs3 with
        | Cons d2 d3 -> rotate d (append d3 (Cons d2 Nil))
        | Nil -> (Nil : list 'a6)
        end
    | Z -> xs3
    end
  goal prop_T32 :
    forall xs4 : list 'a8 . rotate (length xs4) xs4 = xs4
end
