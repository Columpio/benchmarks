(* Difficult examples about rotate *)
module A
  use HighOrd
  type list 'a = Cons 'a (list 'a) | Nil
  type nat = S nat | Z
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Cons x xs -> Cons x (append xs ys)
    | Nil -> ys
    end
  function rotate (ds2 : nat) (xs2 : list 'a4) : list 'a4 =
    match ds2 with
    | S d ->
        match xs2 with
        | Cons d2 d3 -> rotate d (append d3 (Cons d2 Nil))
        | Nil -> (Nil : list 'a4)
        end
    | Z -> xs2
    end
  goal prop_rot_self :
    forall n : nat, xs3 : list 'a6 .
      rotate n (append xs3 xs3) = append (rotate n xs3) (rotate n xs3)
end
