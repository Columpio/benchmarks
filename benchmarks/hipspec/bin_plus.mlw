(* Binary natural numbers *)
module A
  use HighOrd
  type bin = One | ZeroAnd bin | OneAnd bin
  type nat = Z | S nat
  function plus (ds : nat) (m : nat) : nat =
    match ds with
    | Z -> m
    | S n -> S (plus n m)
    end
  function s (ds2 : bin) : bin =
    match ds2 with
    | One -> ZeroAnd One
    | ZeroAnd xs -> OneAnd xs
    | OneAnd xs2 -> ZeroAnd (s xs2)
    end
  function plus2 (ds3 : bin) (xs3 : bin) : bin =
    match ds3 with
    | One -> s xs3
    | ZeroAnd ds4 ->
        match xs3 with
        | One -> s ds3
        | ZeroAnd ys -> ZeroAnd (plus2 ds4 ys)
        | OneAnd ys2 -> OneAnd (plus2 ds4 ys2)
        end
    | OneAnd ds5 ->
        match xs3 with
        | One -> s ds3
        | ZeroAnd ys3 -> OneAnd (plus2 ds5 ys3)
        | OneAnd ys4 -> ZeroAnd (s (plus2 ds5 ys4))
        end
    end
  function toNat (ds6 : bin) : nat =
    match ds6 with
    | One -> S Z
    | ZeroAnd xs4 -> plus (toNat xs4) (toNat xs4)
    | OneAnd xs5 -> S (plus (toNat xs5) (toNat xs5))
    end
  goal prop_plus :
    forall x : bin, y : bin .
      toNat (plus2 x y) = plus (toNat x) (toNat y)
end
