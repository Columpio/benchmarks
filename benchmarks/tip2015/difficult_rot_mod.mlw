(* Difficult examples about rotate *)
module A
  use HighOrd
  type list 'a = Cons 'a (list 'a) | Nil
  type nat = S nat | Z
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Cons x xs -> Cons x (append xs ys)
    | Nil -> ys
    end
  function minus (ds2 : nat) (ds3 : nat) : nat =
    match ds2 with
    | S d ->
        match ds3 with
        | S d2 -> minus d d2
        | Z -> ds2
        end
    | Z -> Z
    end
  function drop (ds4 : nat) (xs2 : list 'a4) : list 'a4 =
    match ds4 with
    | S d3 ->
        match xs2 with
        | Cons d4 d5 -> drop d3 d5
        | Nil -> (Nil : list 'a4)
        end
    | Z -> xs2
    end
  function length (ds5 : list 'a6) : nat =
    match ds5 with
    | Cons ds6 xs3 -> S (length xs3)
    | Nil -> Z
    end
  function mod2 (ds7 : nat) (ds8 : nat) (ds9 : nat) : nat =
    match ds9 with
    | S d6 ->
        match ds7 with
        | S n ->
            match ds8 with
            | S k -> mod2 n k ds9
            | Z -> mod2 n d6 ds9
            end
        | Z ->
            match ds8 with
            | S n2 -> minus ds9 ds8
            | Z -> Z
            end
        end
    | Z -> Z
    end
  function mod (n3 : nat) (m : nat) : nat = mod2 n3 Z m
  function rotate (ds10 : nat) (xs4 : list 'a8) : list 'a8 =
    match ds10 with
    | S d7 ->
        match xs4 with
        | Cons d8 d9 -> rotate d7 (append d9 (Cons d8 Nil))
        | Nil -> (Nil : list 'a8)
        end
    | Z -> xs4
    end
  function take (ds11 : nat) (xs5 : list 'a10) : list 'a10 =
    match ds11 with
    | S d10 ->
        match xs5 with
        | Cons d11 d12 -> Cons d11 (take d10 d12)
        | Nil -> (Nil : list 'a10)
        end
    | Z -> (Nil : list 'a10)
    end
  goal prop_rot_mod :
    forall n4 : nat, xs6 : list 'a12 .
      rotate n4 xs6 =
        append
          (drop (mod n4 (length xs6)) xs6) (take (mod n4 (length xs6)) xs6)
end
