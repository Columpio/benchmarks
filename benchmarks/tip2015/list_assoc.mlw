(* List monad laws *)
module A
  use HighOrd
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function bind (ds2 : list 'a4) (f : ('a4 -> list 'b)) : list 'b =
    match ds2 with
    | Nil -> (Nil : list 'b)
    | Cons x2 xs2 -> append (f x2) (bind xs2 f)
    end
  goal prop_assoc :
    forall m : list 'a6, f2 : ('a6 -> list 'b3), g : ('b3 -> list 'c) .
      bind (bind m f2) g = bind m (lam_prop_assoc f2 g)
end
