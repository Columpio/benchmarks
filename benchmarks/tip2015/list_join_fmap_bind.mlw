(* List monad laws *)
module A
  use HighOrd
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function bind (ds2 : list 'a4) (f : ('a4 -> list 'b)) : list 'b =
    match ds2 with
    | Nil -> (Nil : list 'b)
    | Cons x2 xs2 -> append (f x2) (bind xs2 f)
    end
  function fmap (f2 : ('a6 -> 'b3)) (ds3 : list 'a6) : list 'b3 =
    match ds3 with
    | Nil -> (Nil : list 'b3)
    | Cons x3 xs3 -> Cons (f2 x3) (fmap f2 xs3)
    end
  function join (ds4 : list (list 'a8)) : list 'a8 =
    match ds4 with
    | Nil -> (Nil : list 'a8)
    | Cons ds5 xss ->
        match ds5 with
        | Nil -> join xss
        | Cons x4 xs4 -> Cons x4 (join (Cons xs4 xss))
        end
    end
  goal prop_join_fmap_bind :
    forall f3 : ('a10 -> list 'b5), xs5 : list 'a10 .
      join (fmap f3 xs5) = bind xs5 f3
end
