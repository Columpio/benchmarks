(* Escaping *)
module A
  use HighOrd
  type token = A | B | C | D | ESC | P | Q | R
  type list 'a = Nil | Cons 'a (list 'a)
  function code (ds : token) : token =
    match ds with
    | A -> A
    | B -> B
    | C -> C
    | D -> D
    | ESC -> ESC
    | P -> A
    | Q -> B
    | R -> C
    end
  function isSpecial (ds2 : token) : bool =
    match ds2 with
    | A -> False
    | B -> False
    | C -> False
    | D -> False
    | ESC -> True
    | P -> True
    | Q -> True
    | R -> True
    end
  function escape (ds3 : list token) : list token =
    match ds3 with
    | Nil -> Nil
    | Cons x xs ->
        match isSpecial x with
        | False -> Cons x (escape xs)
        | True -> Cons ESC (Cons (code x) (escape xs))
        end
    end
  goal prop_Injective :
    forall xs2 : list token, ys : list token .
      escape xs2 = escape ys -> xs2 = ys
end
