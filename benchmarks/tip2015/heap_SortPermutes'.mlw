(* Skew heaps *)
module A
  use HighOrd
  type nat = Z | S nat
  type heap = Node heap nat heap | Nil
  type list 'a = Nil2 | Cons 'a (list 'a)
  function le (ds : nat) (ds2 : nat) : bool =
    match ds with
    | Z -> True
    | S d ->
        match ds2 with
        | Z -> False
        | S d2 -> le d d2
        end
    end
  function equal2 (ds3 : nat) (ds4 : nat) : bool =
    match ds3 with
    | Z ->
        match ds4 with
        | Z -> True
        | S d3 -> False
        end
    | S x ->
        match ds4 with
        | Z -> False
        | S y -> equal2 x y
        end
    end
  function delete (ds5 : nat) (ds6 : list nat) : list nat =
    match ds6 with
    | Nil2 -> Nil2
    | Cons y2 ys ->
        match equal2 ds5 y2 with
        | False -> Cons y2 (delete ds5 ys)
        | True -> ys
        end
    end
  function merge (ds7 : heap) (q : heap) : heap =
    match ds7 with
    | Node d4 d5 d6 ->
        match q with
        | Node d7 d8 d9 ->
            match le d5 d8 with
            | False -> Node (merge ds7 d9) d8 d7
            | True -> Node (merge d6 q) d5 d4
            end
        | Nil -> ds7
        end
    | Nil -> q
    end
  function insert (x2 : nat) (h : heap) : heap =
    merge (Node Nil x2 Nil) h
  function toHeap (ds8 : list nat) : heap =
    match ds8 with
    | Nil2 -> Nil
    | Cons x3 xs -> insert x3 (toHeap xs)
    end
  function toList' (ds9 : nat) (ds10 : heap) : list nat =
    match ds9 with
    | Z -> Nil2
    | S d10 ->
        match ds10 with
        | Node d11 d12 d13 -> Cons d12 (toList' d10 (merge d11 d13))
        | Nil -> Nil2
        end
    end
  function null (ds11 : list 'a2) : bool =
    match ds11 with
    | Nil2 -> True
    | Cons ds1 ds22 -> False
    end
  function and2 (ds12 : bool) (x4 : bool) : bool =
    match ds12 with
    | False -> False
    | True -> x4
    end
  function or2 (ds13 : bool) (ds14 : bool) : bool =
    match ds13 with
    | False -> ds14
    | True -> True
    end
  function elem (x5 : nat) (ds15 : list nat) : bool =
    match ds15 with
    | Nil2 -> False
    | Cons y3 ys2 -> or2 (equal2 x5 y3) (elem x5 ys2)
    end
  function isPermutation (ds16 : list nat) (ys3 : list nat) : bool =
    match ds16 with
    | Nil2 -> null ys3
    | Cons x6 xs2 ->
        and2 (elem x6 ys3) (isPermutation xs2 (delete x6 ys3))
    end
  function dot (f : ('b -> 'c)) (g : ('a4 -> 'b)) (x7 : 'a4) : 'c =
    f (g x7)
  function plus (ds17 : nat) (m : nat) : nat =
    match ds17 with
    | Z -> m
    | S n -> S (plus n m)
    end
  function heapSize (ds18 : heap) : nat =
    match ds18 with
    | Node l ds19 r -> plus (heapSize l) (heapSize r)
    | Nil -> Z
    end
  function toList (h2 : heap) : list nat = toList' (heapSize h2) h2
  function hsort (lam_hsort : list nat) : list nat =
    dot toList toHeap lam_hsort
  goal prop_SortPermutes' :
    forall ds20 : list nat . isPermutation (hsort ds20) ds20 = True
end
