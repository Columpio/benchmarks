(* Skew heaps *)
module A
  use HighOrd
  type nat = Z | S nat
  type heap = Node heap nat heap | Nil
  type list 'a = Nil2 | Cons 'a (list 'a)
  function le (ds : nat) (ds2 : nat) : bool =
    match ds with
    | Z -> True
    | S d ->
        match ds2 with
        | Z -> False
        | S d2 -> le d d2
        end
    end
  function equal2 (ds3 : nat) (ds4 : nat) : bool =
    match ds3 with
    | Z ->
        match ds4 with
        | Z -> True
        | S d3 -> False
        end
    | S x ->
        match ds4 with
        | Z -> False
        | S y -> equal2 x y
        end
    end
  function count (x2 : nat) (ds5 : list nat) : nat =
    match ds5 with
    | Nil2 -> Z
    | Cons y2 xs ->
        match equal2 x2 y2 with
        | False -> count x2 xs
        | True -> S (count x2 xs)
        end
    end
  function merge (ds6 : heap) (q : heap) : heap =
    match ds6 with
    | Node d4 d5 d6 ->
        match q with
        | Node d7 d8 d9 ->
            match le d5 d8 with
            | False -> Node (merge ds6 d9) d8 d7
            | True -> Node (merge d6 q) d5 d4
            end
        | Nil -> ds6
        end
    | Nil -> q
    end
  function insert (x3 : nat) (h : heap) : heap =
    merge (Node Nil x3 Nil) h
  function toHeap (ds7 : list nat) : heap =
    match ds7 with
    | Nil2 -> Nil
    | Cons x4 xs2 -> insert x4 (toHeap xs2)
    end
  function toList' (ds8 : nat) (ds9 : heap) : list nat =
    match ds8 with
    | Z -> Nil2
    | S d10 ->
        match ds9 with
        | Node d11 d12 d13 -> Cons d12 (toList' d10 (merge d11 d13))
        | Nil -> Nil2
        end
    end
  function dot (f : ('b -> 'c)) (g : ('a2 -> 'b)) (x5 : 'a2) : 'c =
    f (g x5)
  function plus (ds10 : nat) (m : nat) : nat =
    match ds10 with
    | Z -> m
    | S n -> S (plus n m)
    end
  function heapSize (ds11 : heap) : nat =
    match ds11 with
    | Node l ds12 r -> plus (heapSize l) (heapSize r)
    | Nil -> Z
    end
  function toList (h2 : heap) : list nat = toList' (heapSize h2) h2
  function hsort (lam_hsort : list nat) : list nat =
    dot toList toHeap lam_hsort
  goal prop_SortPermutes :
    forall x6 : nat, ds13 : list nat .
      count x6 (hsort ds13) = count x6 ds13
end
