module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function equal2 (ds : nat) (ds1 : nat) : bool =
    match ds with
    | Z ->
        match ds1 with
        | Z -> True
        | S ipv -> False
        end
    | S ds2 ->
        match ds1 with
        | Z -> False
        | S y -> equal2 ds2 y
        end
    end
  function elem (ds3 : nat) (ds12 : list nat) : bool =
    match ds12 with
    | Nil -> False
    | Cons x xs ->
        match equal2 ds3 x with
        | False -> elem ds3 xs
        | True -> True
        end
    end
  function union (ds4 : list nat) (ys : list nat) : list nat =
    match ds4 with
    | Nil -> ys
    | Cons x2 xs2 ->
        match elem x2 ys with
        | False -> Cons x2 (union xs2 ys)
        | True -> union xs2 ys
        end
    end
  goal prop_T42 :
    forall x3 : nat, y2 : list nat, z : list nat .
      elem x3 y2 = True -> elem x3 (union y2 z) = True
end
