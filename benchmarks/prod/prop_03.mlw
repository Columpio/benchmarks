(* Source: Productive use of failure *)
module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function plus (ds : nat) (y : nat) : nat =
    match ds with
    | Z -> y
    | S x -> S (plus x y)
    end
  function append (ds2 : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds2 with
    | Nil -> ys
    | Cons x2 xs -> Cons x2 (append xs ys)
    end
  function length (ds3 : list 'a4) : nat =
    match ds3 with
    | Nil -> Z
    | Cons ds1 xs2 -> S (length xs2)
    end
  goal prop_T03 :
    forall x3 : list 'a6, y2 : list 'a6 .
      length (append x3 y2) = plus (length y2) (length x3)
end
