(* Source: Productive use of failure *)
module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function even (ds2 : nat) : bool =
    match ds2 with
    | Z -> True
    | S ds1 ->
        match ds1 with
        | Z -> False
        | S x2 -> even x2
        end
    end
  function length (ds3 : list 'a4) : nat =
    match ds3 with
    | Nil -> Z
    | Cons ds12 xs2 -> S (length xs2)
    end
  goal prop_T22 :
    forall x3 : list 'a6, y : list 'a6 .
      even (length (append x3 y)) = even (length (append y x3))
end
