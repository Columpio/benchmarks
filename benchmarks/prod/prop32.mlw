module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function append (ds : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)
    end
  function length (ds2 : list 'a4) : nat =
    match ds2 with
    | Nil -> Z
    | Cons ds1 xs2 -> S (length xs2)
    end
  function rotate (ds3 : nat) (xs3 : list 'a6) : list 'a6 =
    match ds3 with
    | Z -> xs3
    | S ipv ->
        match xs3 with
        | Nil -> (Nil : list 'a6)
        | Cons ipv1 ipv2 -> rotate ipv (append ipv2 (Cons ipv1 Nil))
        end
    end
  goal prop_T32 : forall x2 : list 'a8 . rotate (length x2) x2 = x2
end
