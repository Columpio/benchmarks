module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function plus (ds : nat) (y : nat) : nat =
    match ds with
    | Z -> y
    | S x -> S (plus x y)
    end
  function append (ds2 : list 'a2) (ys : list 'a2) : list 'a2 =
    match ds2 with
    | Nil -> ys
    | Cons x2 xs -> Cons x2 (append xs ys)
    end
  function length (ds3 : list 'a4) : nat =
    match ds3 with
    | Nil -> Z
    | Cons ds1 xs2 -> S (length xs2)
    end
  function rev (ds4 : list 'a6) : list 'a6 =
    match ds4 with
    | Nil -> Nil
    | Cons x3 xs3 -> append (rev xs3) (Cons x3 Nil)
    end
  goal prop_T06 :
    forall x4 : list 'a8, y2 : list 'a8 .
      length (rev (append x4 y2)) = plus (length x4) (length y2)
end
