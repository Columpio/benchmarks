(* Source: Productive use of failure *)
module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function le (ds : nat) (ds1 : nat) : bool =
    match ds with
    | Z -> True
    | S ipv ->
        match ds1 with
        | Z -> False
        | S ipv1 -> le ipv ipv1
        end
    end
  function insert (n : nat) (ds2 : list nat) : list nat =
    match ds2 with
    | Nil -> Cons n Nil
    | Cons x xs ->
        match le n x with
        | False -> Cons x (insert n xs)
        | True -> Cons n ds2
        end
    end
  function isort (ds3 : list nat) : list nat =
    match ds3 with
    | Nil -> Nil
    | Cons x2 xs2 -> insert x2 (isort xs2)
    end
  function sorted (ds4 : list nat) : bool =
    match ds4 with
    | Nil -> True
    | Cons x3 ds12 ->
        match ds12 with
        | Nil -> True
        | Cons y xs3 ->
            match le x3 y with
            | False -> False
            | True -> sorted ds12
            end
        end
    end
  goal prop_T14 : forall x4 : list nat . sorted (isort x4) = True
end
