module A
  use HighOrd
  type nat = Z | S nat
  function plus (ds : nat) (y : nat) : nat =
    match ds with
    | Z -> y
    | S x -> S (plus x y)
    end
  function mult (ds2 : nat) (ds1 : nat) : nat =
    match ds2 with
    | Z -> Z
    | S x2 -> plus ds1 (mult x2 ds1)
    end
  function exp (ds3 : nat) (ds12 : nat) : nat =
    match ds12 with
    | Z -> S Z
    | S n -> mult ds3 (exp ds3 n)
    end
  function one : nat = S Z
  function qexp (x3 : nat) (ds4 : nat) (acc : nat) : nat =
    match ds4 with
    | Z -> acc
    | S n2 -> qexp x3 n2 (mult x3 acc)
    end
  goal prop_T35 :
    forall x4 : nat, y2 : nat . exp x4 y2 = qexp x4 y2 one
end
