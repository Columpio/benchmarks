module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function le (ds : nat) (ds1 : nat) : bool =
    match ds with
    | Z -> True
    | S ipv ->
        match ds1 with
        | Z -> False
        | S ipv1 -> le ipv ipv1
        end
    end
  function equal2 (ds2 : nat) (ds12 : nat) : bool =
    match ds2 with
    | Z ->
        match ds12 with
        | Z -> True
        | S ipv2 -> False
        end
    | S ds22 ->
        match ds12 with
        | Z -> False
        | S y -> equal2 ds22 y
        end
    end
  function count (n : nat) (ds3 : list nat) : nat =
    match ds3 with
    | Nil -> Z
    | Cons x xs ->
        match equal2 n x with
        | False -> count n xs
        | True -> S (count n xs)
        end
    end
  function insert (n2 : nat) (ds4 : list nat) : list nat =
    match ds4 with
    | Nil -> Cons n2 Nil
    | Cons x2 xs2 ->
        match le n2 x2 with
        | False -> Cons x2 (insert n2 xs2)
        | True -> Cons n2 (Cons x2 xs2)
        end
    end
  function isort (ds5 : list nat) : list nat =
    match ds5 with
    | Nil -> Nil
    | Cons x3 xs3 -> insert x3 (isort xs3)
    end
  goal prop_T50 :
    forall x4 : nat, y2 : list nat . count x4 (isort y2) = count x4 y2
end
