module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function equal2 (ds : nat) (ds1 : nat) : bool =
    match ds with
    | Z ->
        match ds1 with
        | Z -> True
        | S ipv -> False
        end
    | S ds2 ->
        match ds1 with
        | Z -> False
        | S y -> equal2 ds2 y
        end
    end
  function drop (ds3 : nat) (xs : list 'a2) : list 'a2 =
    match ds3 with
    | Z -> xs
    | S ipv2 ->
        match xs with
        | Nil -> (Nil : list 'a2)
        | Cons ipv1 ipv22 -> drop ipv2 ipv22
        end
    end
  function elem (ds4 : nat) (ds12 : list nat) : bool =
    match ds12 with
    | Nil -> False
    | Cons x xs2 ->
        match equal2 ds4 x with
        | False -> elem ds4 xs2
        | True -> True
        end
    end
  goal prop_T39 :
    forall x2 : nat, y2 : nat, z : list nat .
      elem x2 (drop y2 z) = True -> elem x2 z = True
end
