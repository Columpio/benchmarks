(* Source: Productive use of failure *)
module A
  use HighOrd
  type nat = Z | S nat
  type list 'a = Nil | Cons 'a (list 'a)
  function plus (ds : nat) (y : nat) : nat =
    match ds with
    | Z -> y
    | S x -> S (plus x y)
    end
  function length (ds2 : list 'a2) : nat =
    match ds2 with
    | Nil -> Z
    | Cons ds1 xs -> S (length xs)
    end
  function qrev (ds3 : list 'a4) (acc : list 'a4) : list 'a4 =
    match ds3 with
    | Nil -> acc
    | Cons x2 xs2 -> qrev xs2 (Cons x2 acc)
    end
  goal prop_T07 :
    forall x3 : list 'a6, y2 : list 'a6 .
      length (qrev x3 y2) = plus (length x3) (length y2)
end
