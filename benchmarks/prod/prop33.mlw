module A
  use HighOrd
  type nat = Z | S nat
  function plus (ds : nat) (y : nat) : nat =
    match ds with
    | Z -> y
    | S x -> S (plus x y)
    end
  function mult (ds2 : nat) (ds1 : nat) : nat =
    match ds2 with
    | Z -> Z
    | S x2 -> plus ds1 (mult x2 ds1)
    end
  function fac (ds3 : nat) : nat =
    match ds3 with
    | Z -> S Z
    | S x3 -> mult ds3 (fac x3)
    end
  function one : nat = S Z
  function qfac (ds4 : nat) (acc : nat) : nat =
    match ds4 with
    | Z -> acc
    | S x4 -> qfac x4 (mult ds4 acc)
    end
  goal prop_T33 : forall x5 : nat . fac x5 = qfac x5 one
end
